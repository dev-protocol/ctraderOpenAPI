// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OpenApiModelMessages.proto

#include "OpenApiModelMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_OpenApiModelMessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOAClosePositionDetail_OpenApiModelMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OpenApiModelMessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOAHoliday_OpenApiModelMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OpenApiModelMessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOAInterval_OpenApiModelMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OpenApiModelMessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOATradeData_OpenApiModelMessages_2eproto;
class ProtoOAAssetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOAAsset> _instance;
} _ProtoOAAsset_default_instance_;
class ProtoOASymbolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOASymbol> _instance;
} _ProtoOASymbol_default_instance_;
class ProtoOALightSymbolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOALightSymbol> _instance;
} _ProtoOALightSymbol_default_instance_;
class ProtoOAArchivedSymbolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOAArchivedSymbol> _instance;
} _ProtoOAArchivedSymbol_default_instance_;
class ProtoOASymbolCategoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOASymbolCategory> _instance;
} _ProtoOASymbolCategory_default_instance_;
class ProtoOAIntervalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOAInterval> _instance;
} _ProtoOAInterval_default_instance_;
class ProtoOATraderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOATrader> _instance;
} _ProtoOATrader_default_instance_;
class ProtoOAPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOAPosition> _instance;
} _ProtoOAPosition_default_instance_;
class ProtoOATradeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOATradeData> _instance;
} _ProtoOATradeData_default_instance_;
class ProtoOAOrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOAOrder> _instance;
} _ProtoOAOrder_default_instance_;
class ProtoOABonusDepositWithdrawDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOABonusDepositWithdraw> _instance;
} _ProtoOABonusDepositWithdraw_default_instance_;
class ProtoOADepositWithdrawDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOADepositWithdraw> _instance;
} _ProtoOADepositWithdraw_default_instance_;
class ProtoOADealDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOADeal> _instance;
} _ProtoOADeal_default_instance_;
class ProtoOAClosePositionDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOAClosePositionDetail> _instance;
} _ProtoOAClosePositionDetail_default_instance_;
class ProtoOATrendbarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOATrendbar> _instance;
} _ProtoOATrendbar_default_instance_;
class ProtoOAExpectedMarginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOAExpectedMargin> _instance;
} _ProtoOAExpectedMargin_default_instance_;
class ProtoOATickDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOATickData> _instance;
} _ProtoOATickData_default_instance_;
class ProtoOACtidProfileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOACtidProfile> _instance;
} _ProtoOACtidProfile_default_instance_;
class ProtoOACtidTraderAccountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOACtidTraderAccount> _instance;
} _ProtoOACtidTraderAccount_default_instance_;
class ProtoOAAssetClassDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOAAssetClass> _instance;
} _ProtoOAAssetClass_default_instance_;
class ProtoOADepthQuoteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOADepthQuote> _instance;
} _ProtoOADepthQuote_default_instance_;
class ProtoOAMarginCallDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOAMarginCall> _instance;
} _ProtoOAMarginCall_default_instance_;
class ProtoOAHolidayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOAHoliday> _instance;
} _ProtoOAHoliday_default_instance_;
static void InitDefaultsProtoOAAsset_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOAAsset_default_instance_;
    new (ptr) ::ProtoOAAsset();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoOAAsset::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOAAsset_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProtoOAAsset_OpenApiModelMessages_2eproto}, {}};

static void InitDefaultsProtoOASymbol_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ProtoOASymbol::_i_give_permission_to_break_this_code_default_mincommissionasset_.DefaultConstruct();
  *::ProtoOASymbol::_i_give_permission_to_break_this_code_default_mincommissionasset_.get_mutable() = std::string("USD", 3);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::ProtoOASymbol::_i_give_permission_to_break_this_code_default_mincommissionasset_.get_mutable());
  {
    void* ptr = &::_ProtoOASymbol_default_instance_;
    new (ptr) ::ProtoOASymbol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoOASymbol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProtoOASymbol_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsProtoOASymbol_OpenApiModelMessages_2eproto}, {
      &scc_info_ProtoOAInterval_OpenApiModelMessages_2eproto.base,
      &scc_info_ProtoOAHoliday_OpenApiModelMessages_2eproto.base,}};

static void InitDefaultsProtoOALightSymbol_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOALightSymbol_default_instance_;
    new (ptr) ::ProtoOALightSymbol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoOALightSymbol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOALightSymbol_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProtoOALightSymbol_OpenApiModelMessages_2eproto}, {}};

static void InitDefaultsProtoOAArchivedSymbol_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOAArchivedSymbol_default_instance_;
    new (ptr) ::ProtoOAArchivedSymbol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoOAArchivedSymbol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOAArchivedSymbol_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProtoOAArchivedSymbol_OpenApiModelMessages_2eproto}, {}};

static void InitDefaultsProtoOASymbolCategory_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOASymbolCategory_default_instance_;
    new (ptr) ::ProtoOASymbolCategory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoOASymbolCategory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOASymbolCategory_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProtoOASymbolCategory_OpenApiModelMessages_2eproto}, {}};

static void InitDefaultsProtoOAInterval_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOAInterval_default_instance_;
    new (ptr) ::ProtoOAInterval();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoOAInterval::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOAInterval_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProtoOAInterval_OpenApiModelMessages_2eproto}, {}};

static void InitDefaultsProtoOATrader_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOATrader_default_instance_;
    new (ptr) ::ProtoOATrader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoOATrader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOATrader_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProtoOATrader_OpenApiModelMessages_2eproto}, {}};

static void InitDefaultsProtoOAPosition_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOAPosition_default_instance_;
    new (ptr) ::ProtoOAPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoOAPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProtoOAPosition_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsProtoOAPosition_OpenApiModelMessages_2eproto}, {
      &scc_info_ProtoOATradeData_OpenApiModelMessages_2eproto.base,}};

static void InitDefaultsProtoOATradeData_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOATradeData_default_instance_;
    new (ptr) ::ProtoOATradeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoOATradeData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOATradeData_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProtoOATradeData_OpenApiModelMessages_2eproto}, {}};

static void InitDefaultsProtoOAOrder_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOAOrder_default_instance_;
    new (ptr) ::ProtoOAOrder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoOAOrder::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProtoOAOrder_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsProtoOAOrder_OpenApiModelMessages_2eproto}, {
      &scc_info_ProtoOATradeData_OpenApiModelMessages_2eproto.base,}};

static void InitDefaultsProtoOABonusDepositWithdraw_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOABonusDepositWithdraw_default_instance_;
    new (ptr) ::ProtoOABonusDepositWithdraw();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoOABonusDepositWithdraw::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOABonusDepositWithdraw_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProtoOABonusDepositWithdraw_OpenApiModelMessages_2eproto}, {}};

static void InitDefaultsProtoOADepositWithdraw_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOADepositWithdraw_default_instance_;
    new (ptr) ::ProtoOADepositWithdraw();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoOADepositWithdraw::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOADepositWithdraw_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProtoOADepositWithdraw_OpenApiModelMessages_2eproto}, {}};

static void InitDefaultsProtoOADeal_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOADeal_default_instance_;
    new (ptr) ::ProtoOADeal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoOADeal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProtoOADeal_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsProtoOADeal_OpenApiModelMessages_2eproto}, {
      &scc_info_ProtoOAClosePositionDetail_OpenApiModelMessages_2eproto.base,}};

static void InitDefaultsProtoOAClosePositionDetail_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOAClosePositionDetail_default_instance_;
    new (ptr) ::ProtoOAClosePositionDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoOAClosePositionDetail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOAClosePositionDetail_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProtoOAClosePositionDetail_OpenApiModelMessages_2eproto}, {}};

static void InitDefaultsProtoOATrendbar_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOATrendbar_default_instance_;
    new (ptr) ::ProtoOATrendbar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoOATrendbar::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOATrendbar_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProtoOATrendbar_OpenApiModelMessages_2eproto}, {}};

static void InitDefaultsProtoOAExpectedMargin_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOAExpectedMargin_default_instance_;
    new (ptr) ::ProtoOAExpectedMargin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoOAExpectedMargin::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOAExpectedMargin_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProtoOAExpectedMargin_OpenApiModelMessages_2eproto}, {}};

static void InitDefaultsProtoOATickData_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOATickData_default_instance_;
    new (ptr) ::ProtoOATickData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoOATickData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOATickData_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProtoOATickData_OpenApiModelMessages_2eproto}, {}};

static void InitDefaultsProtoOACtidProfile_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOACtidProfile_default_instance_;
    new (ptr) ::ProtoOACtidProfile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoOACtidProfile::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOACtidProfile_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProtoOACtidProfile_OpenApiModelMessages_2eproto}, {}};

static void InitDefaultsProtoOACtidTraderAccount_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOACtidTraderAccount_default_instance_;
    new (ptr) ::ProtoOACtidTraderAccount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoOACtidTraderAccount::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOACtidTraderAccount_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProtoOACtidTraderAccount_OpenApiModelMessages_2eproto}, {}};

static void InitDefaultsProtoOAAssetClass_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOAAssetClass_default_instance_;
    new (ptr) ::ProtoOAAssetClass();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoOAAssetClass::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOAAssetClass_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProtoOAAssetClass_OpenApiModelMessages_2eproto}, {}};

static void InitDefaultsProtoOADepthQuote_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOADepthQuote_default_instance_;
    new (ptr) ::ProtoOADepthQuote();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoOADepthQuote::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOADepthQuote_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProtoOADepthQuote_OpenApiModelMessages_2eproto}, {}};

static void InitDefaultsProtoOAMarginCall_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOAMarginCall_default_instance_;
    new (ptr) ::ProtoOAMarginCall();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoOAMarginCall::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOAMarginCall_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProtoOAMarginCall_OpenApiModelMessages_2eproto}, {}};

static void InitDefaultsProtoOAHoliday_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOAHoliday_default_instance_;
    new (ptr) ::ProtoOAHoliday();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoOAHoliday::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOAHoliday_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProtoOAHoliday_OpenApiModelMessages_2eproto}, {}};

void InitDefaults_OpenApiModelMessages_2eproto() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoOAAsset_OpenApiModelMessages_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoOASymbol_OpenApiModelMessages_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoOALightSymbol_OpenApiModelMessages_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoOAArchivedSymbol_OpenApiModelMessages_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoOASymbolCategory_OpenApiModelMessages_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoOAInterval_OpenApiModelMessages_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoOATrader_OpenApiModelMessages_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoOAPosition_OpenApiModelMessages_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoOATradeData_OpenApiModelMessages_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoOAOrder_OpenApiModelMessages_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoOABonusDepositWithdraw_OpenApiModelMessages_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoOADepositWithdraw_OpenApiModelMessages_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoOADeal_OpenApiModelMessages_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoOAClosePositionDetail_OpenApiModelMessages_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoOATrendbar_OpenApiModelMessages_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoOAExpectedMargin_OpenApiModelMessages_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoOATickData_OpenApiModelMessages_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoOACtidProfile_OpenApiModelMessages_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoOACtidTraderAccount_OpenApiModelMessages_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoOAAssetClass_OpenApiModelMessages_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoOADepthQuote_OpenApiModelMessages_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoOAMarginCall_OpenApiModelMessages_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoOAHoliday_OpenApiModelMessages_2eproto.base);
}

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_OpenApiModelMessages_2eproto[23];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_OpenApiModelMessages_2eproto[26];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_OpenApiModelMessages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_OpenApiModelMessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ProtoOAAsset, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAAsset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOAAsset, assetid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAAsset, name_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAAsset, displayname_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAAsset, digits_),
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, symbolid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, digits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, pipposition_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, enableshortselling_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, guaranteedstoploss_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, swaprollover3days_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, swaplong_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, swapshort_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, maxvolume_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, minvolume_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, stepvolume_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, maxexposure_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, schedule_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, commission_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, commissiontype_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, sldistance_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, tpdistance_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, gsldistance_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, gslcharge_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, distancesetin_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, mincommission_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, mincommissiontype_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, mincommissionasset_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, rollovercommission_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, skiprolloverdays_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, scheduletimezone_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, tradingmode_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, rollovercommission3days_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, swapcalculationtype_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, lotsize_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, precisetradingcommissionrate_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, precisemincommission_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, holiday_),
  2,
  3,
  4,
  7,
  8,
  27,
  5,
  6,
  10,
  11,
  12,
  13,
  ~0u,
  14,
  28,
  9,
  15,
  16,
  17,
  29,
  18,
  30,
  0,
  19,
  20,
  1,
  21,
  26,
  25,
  22,
  23,
  24,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ProtoOALightSymbol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOALightSymbol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOALightSymbol, symbolid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOALightSymbol, symbolname_),
  PROTOBUF_FIELD_OFFSET(::ProtoOALightSymbol, enabled_),
  PROTOBUF_FIELD_OFFSET(::ProtoOALightSymbol, baseassetid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOALightSymbol, quoteassetid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOALightSymbol, symbolcategoryid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOALightSymbol, description_),
  2,
  0,
  6,
  3,
  4,
  5,
  1,
  PROTOBUF_FIELD_OFFSET(::ProtoOAArchivedSymbol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAArchivedSymbol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOAArchivedSymbol, symbolid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAArchivedSymbol, name_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAArchivedSymbol, utclastupdatetimestamp_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAArchivedSymbol, description_),
  2,
  0,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbolCategory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbolCategory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbolCategory, id_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbolCategory, assetclassid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbolCategory, name_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::ProtoOAInterval, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAInterval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOAInterval, startsecond_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAInterval, endsecond_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, ctidtraderaccountid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, balance_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, balanceversion_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, managerbonus_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, ibbonus_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, nonwithdrawablebonus_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, accessrights_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, depositassetid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, swapfree_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, leverageincents_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, totalmargincalculationtype_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, maxleverage_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, frenchrisk_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, traderlogin_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, accounttype_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, brokername_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, registrationtimestamp_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, islimitedrisk_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, limitedriskmargincalculationstrategy_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, moneydigits_),
  1,
  2,
  3,
  4,
  5,
  6,
  8,
  7,
  12,
  9,
  10,
  11,
  13,
  16,
  15,
  0,
  17,
  14,
  18,
  19,
  PROTOBUF_FIELD_OFFSET(::ProtoOAPosition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOAPosition, positionid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAPosition, tradedata_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAPosition, positionstatus_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAPosition, swap_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAPosition, price_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAPosition, stoploss_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAPosition, takeprofit_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAPosition, utclastupdatetimestamp_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAPosition, commission_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAPosition, marginrate_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAPosition, mirroringcommission_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAPosition, guaranteedstoploss_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAPosition, usedmargin_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAPosition, stoplosstriggermethod_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAPosition, moneydigits_),
  1,
  0,
  13,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  11,
  10,
  14,
  12,
  PROTOBUF_FIELD_OFFSET(::ProtoOATradeData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATradeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOATradeData, symbolid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATradeData, volume_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATradeData, tradeside_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATradeData, opentimestamp_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATradeData, label_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATradeData, guaranteedstoploss_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATradeData, comment_),
  2,
  3,
  6,
  4,
  0,
  5,
  1,
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, orderid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, tradedata_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, ordertype_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, orderstatus_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, expirationtimestamp_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, executionprice_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, executedvolume_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, utclastupdatetimestamp_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, baseslippageprice_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, slippageinpoints_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, closingorder_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, limitprice_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, stopprice_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, stoploss_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, takeprofit_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, clientorderid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, timeinforce_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, positionid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, relativestoploss_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, relativetakeprofit_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, isstopout_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, trailingstoploss_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, stoptriggermethod_),
  2,
  1,
  19,
  20,
  3,
  4,
  5,
  6,
  7,
  8,
  16,
  9,
  10,
  11,
  12,
  0,
  21,
  13,
  14,
  15,
  17,
  18,
  22,
  PROTOBUF_FIELD_OFFSET(::ProtoOABonusDepositWithdraw, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOABonusDepositWithdraw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOABonusDepositWithdraw, operationtype_),
  PROTOBUF_FIELD_OFFSET(::ProtoOABonusDepositWithdraw, bonushistoryid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOABonusDepositWithdraw, managerbonus_),
  PROTOBUF_FIELD_OFFSET(::ProtoOABonusDepositWithdraw, managerdelta_),
  PROTOBUF_FIELD_OFFSET(::ProtoOABonusDepositWithdraw, ibbonus_),
  PROTOBUF_FIELD_OFFSET(::ProtoOABonusDepositWithdraw, ibdelta_),
  PROTOBUF_FIELD_OFFSET(::ProtoOABonusDepositWithdraw, changebonustimestamp_),
  PROTOBUF_FIELD_OFFSET(::ProtoOABonusDepositWithdraw, externalnote_),
  PROTOBUF_FIELD_OFFSET(::ProtoOABonusDepositWithdraw, introducingbrokerid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOABonusDepositWithdraw, moneydigits_),
  5,
  1,
  2,
  3,
  4,
  7,
  8,
  0,
  9,
  6,
  PROTOBUF_FIELD_OFFSET(::ProtoOADepositWithdraw, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADepositWithdraw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOADepositWithdraw, operationtype_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADepositWithdraw, balancehistoryid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADepositWithdraw, balance_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADepositWithdraw, delta_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADepositWithdraw, changebalancetimestamp_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADepositWithdraw, externalnote_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADepositWithdraw, balanceversion_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADepositWithdraw, equity_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADepositWithdraw, moneydigits_),
  5,
  1,
  2,
  3,
  4,
  0,
  7,
  8,
  6,
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, dealid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, orderid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, positionid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, volume_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, filledvolume_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, symbolid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, createtimestamp_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, executiontimestamp_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, utclastupdatetimestamp_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, executionprice_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, tradeside_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, dealstatus_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, marginrate_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, commission_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, basetousdconversionrate_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, closepositiondetail_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, moneydigits_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  15,
  16,
  11,
  12,
  13,
  0,
  14,
  PROTOBUF_FIELD_OFFSET(::ProtoOAClosePositionDetail, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAClosePositionDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOAClosePositionDetail, entryprice_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAClosePositionDetail, grossprofit_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAClosePositionDetail, swap_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAClosePositionDetail, commission_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAClosePositionDetail, balance_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAClosePositionDetail, quotetodepositconversionrate_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAClosePositionDetail, closedvolume_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAClosePositionDetail, balanceversion_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAClosePositionDetail, moneydigits_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::ProtoOATrendbar, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrendbar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOATrendbar, volume_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrendbar, period_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrendbar, low_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrendbar, deltaopen_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrendbar, deltaclose_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrendbar, deltahigh_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrendbar, utctimestampinminutes_),
  0,
  6,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::ProtoOAExpectedMargin, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAExpectedMargin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOAExpectedMargin, volume_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAExpectedMargin, buymargin_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAExpectedMargin, sellmargin_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ProtoOATickData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATickData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOATickData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATickData, tick_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ProtoOACtidProfile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOACtidProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOACtidProfile, userid_),
  0,
  PROTOBUF_FIELD_OFFSET(::ProtoOACtidTraderAccount, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOACtidTraderAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOACtidTraderAccount, ctidtraderaccountid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOACtidTraderAccount, islive_),
  PROTOBUF_FIELD_OFFSET(::ProtoOACtidTraderAccount, traderlogin_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::ProtoOAAssetClass, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAAssetClass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOAAssetClass, id_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAAssetClass, name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ProtoOADepthQuote, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADepthQuote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOADepthQuote, id_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADepthQuote, size_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADepthQuote, bid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADepthQuote, ask_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ProtoOAMarginCall, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAMarginCall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOAMarginCall, margincalltype_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAMarginCall, marginlevelthreshold_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAMarginCall, utclastupdatetimestamp_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ProtoOAHoliday, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAHoliday, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOAHoliday, holidayid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAHoliday, name_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAHoliday, description_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAHoliday, scheduletimezone_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAHoliday, holidaydate_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAHoliday, isrecurring_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAHoliday, startsecond_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAHoliday, endsecond_),
  3,
  0,
  1,
  2,
  4,
  5,
  6,
  7,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::ProtoOAAsset)},
  { 13, 51, sizeof(::ProtoOASymbol)},
  { 84, 96, sizeof(::ProtoOALightSymbol)},
  { 103, 112, sizeof(::ProtoOAArchivedSymbol)},
  { 116, 124, sizeof(::ProtoOASymbolCategory)},
  { 127, 134, sizeof(::ProtoOAInterval)},
  { 136, 161, sizeof(::ProtoOATrader)},
  { 181, 201, sizeof(::ProtoOAPosition)},
  { 216, 228, sizeof(::ProtoOATradeData)},
  { 235, 263, sizeof(::ProtoOAOrder)},
  { 286, 301, sizeof(::ProtoOABonusDepositWithdraw)},
  { 311, 325, sizeof(::ProtoOADepositWithdraw)},
  { 334, 356, sizeof(::ProtoOADeal)},
  { 373, 387, sizeof(::ProtoOAClosePositionDetail)},
  { 396, 408, sizeof(::ProtoOATrendbar)},
  { 415, 423, sizeof(::ProtoOAExpectedMargin)},
  { 426, 433, sizeof(::ProtoOATickData)},
  { 435, 441, sizeof(::ProtoOACtidProfile)},
  { 442, 450, sizeof(::ProtoOACtidTraderAccount)},
  { 453, 460, sizeof(::ProtoOAAssetClass)},
  { 462, 471, sizeof(::ProtoOADepthQuote)},
  { 475, 483, sizeof(::ProtoOAMarginCall)},
  { 486, 499, sizeof(::ProtoOAHoliday)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOAAsset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOASymbol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOALightSymbol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOAArchivedSymbol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOASymbolCategory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOAInterval_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOATrader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOAPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOATradeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOAOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOABonusDepositWithdraw_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOADepositWithdraw_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOADeal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOAClosePositionDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOATrendbar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOAExpectedMargin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOATickData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOACtidProfile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOACtidTraderAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOAAssetClass_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOADepthQuote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOAMarginCall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOAHoliday_default_instance_),
};

static ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptorsTable assign_descriptors_table_OpenApiModelMessages_2eproto = {
  {}, AddDescriptors_OpenApiModelMessages_2eproto, "OpenApiModelMessages.proto", schemas,
  file_default_instances, TableStruct_OpenApiModelMessages_2eproto::offsets,
  file_level_metadata_OpenApiModelMessages_2eproto, 23, file_level_enum_descriptors_OpenApiModelMessages_2eproto, file_level_service_descriptors_OpenApiModelMessages_2eproto,
};

const char descriptor_table_protodef_OpenApiModelMessages_2eproto[] =
  "\n\032OpenApiModelMessages.proto\"R\n\014ProtoOAA"
  "sset\022\017\n\007assetId\030\001 \002(\003\022\014\n\004name\030\002 \002(\t\022\023\n\013d"
  "isplayName\030\003 \001(\t\022\016\n\006digits\030\004 \001(\005\"\271\010\n\rPro"
  "toOASymbol\022\020\n\010symbolId\030\001 \002(\003\022\016\n\006digits\030\002"
  " \002(\005\022\023\n\013pipPosition\030\003 \002(\005\022\032\n\022enableShort"
  "Selling\030\004 \001(\010\022\032\n\022guaranteedStopLoss\030\005 \001("
  "\010\0224\n\021swapRollover3Days\030\006 \001(\0162\021.ProtoOADa"
  "yOfWeek:\006MONDAY\022\020\n\010swapLong\030\007 \001(\001\022\021\n\tswa"
  "pShort\030\010 \001(\001\022\021\n\tmaxVolume\030\t \001(\003\022\021\n\tminVo"
  "lume\030\n \001(\003\022\022\n\nstepVolume\030\013 \001(\003\022\023\n\013maxExp"
  "osure\030\014 \001(\004\022\"\n\010schedule\030\r \003(\0132\020.ProtoOAI"
  "nterval\022\026\n\ncommission\030\016 \001(\003B\002\030\001\022C\n\016commi"
  "ssionType\030\017 \001(\0162\026.ProtoOACommissionType:"
  "\023USD_PER_MILLION_USD\022\022\n\nslDistance\030\020 \001(\r"
  "\022\022\n\ntpDistance\030\021 \001(\r\022\023\n\013gslDistance\030\022 \001("
  "\r\022\021\n\tgslCharge\030\023 \001(\003\022L\n\rdistanceSetIn\030\024 "
  "\001(\0162\032.ProtoOASymbolDistanceType:\031SYMBOL_"
  "DISTANCE_IN_POINTS\022\031\n\rminCommission\030\025 \001("
  "\003B\002\030\001\022>\n\021minCommissionType\030\026 \001(\0162\031.Proto"
  "OAMinCommissionType:\010CURRENCY\022\037\n\022minComm"
  "issionAsset\030\027 \001(\t:\003USD\022\032\n\022rolloverCommis"
  "sion\030\030 \001(\003\022\030\n\020skipRolloverDays\030\031 \001(\005\022\030\n\020"
  "scheduleTimeZone\030\032 \001(\t\0221\n\013tradingMode\030\033 "
  "\001(\0162\023.ProtoOATradingMode:\007ENABLED\022:\n\027rol"
  "loverCommission3Days\030\034 \001(\0162\021.ProtoOADayO"
  "fWeek:\006MONDAY\022>\n\023swapCalculationType\030\035 \001"
  "(\0162\033.ProtoOASwapCalculationType:\004PIPS\022\017\n"
  "\007lotSize\030\036 \001(\003\022$\n\034preciseTradingCommissi"
  "onRate\030\037 \001(\003\022\034\n\024preciseMinCommission\030  \001"
  "(\003\022 \n\007holiday\030! \003(\0132\017.ProtoOAHoliday\"\245\001\n"
  "\022ProtoOALightSymbol\022\020\n\010symbolId\030\001 \002(\003\022\022\n"
  "\nsymbolName\030\002 \001(\t\022\017\n\007enabled\030\003 \001(\010\022\023\n\013ba"
  "seAssetId\030\004 \001(\003\022\024\n\014quoteAssetId\030\005 \001(\003\022\030\n"
  "\020symbolCategoryId\030\006 \001(\003\022\023\n\013description\030\007"
  " \001(\t\"l\n\025ProtoOAArchivedSymbol\022\020\n\010symbolI"
  "d\030\001 \002(\003\022\014\n\004name\030\002 \002(\t\022\036\n\026utcLastUpdateTi"
  "mestamp\030\003 \002(\003\022\023\n\013description\030\004 \001(\t\"G\n\025Pr"
  "otoOASymbolCategory\022\n\n\002id\030\001 \002(\003\022\024\n\014asset"
  "ClassId\030\002 \002(\003\022\014\n\004name\030\003 \002(\t\"9\n\017ProtoOAIn"
  "terval\022\023\n\013startSecond\030\003 \002(\r\022\021\n\tendSecond"
  "\030\004 \002(\r\"\244\005\n\rProtoOATrader\022\033\n\023ctidTraderAc"
  "countId\030\001 \002(\003\022\017\n\007balance\030\002 \002(\003\022\026\n\016balanc"
  "eVersion\030\003 \001(\003\022\024\n\014managerBonus\030\004 \001(\003\022\017\n\007"
  "ibBonus\030\005 \001(\003\022\034\n\024nonWithdrawableBonus\030\006 "
  "\001(\003\0227\n\014accessRights\030\007 \001(\0162\024.ProtoOAAcces"
  "sRights:\013FULL_ACCESS\022\026\n\016depositAssetId\030\010"
  " \002(\003\022\020\n\010swapFree\030\t \001(\010\022\027\n\017leverageInCent"
  "s\030\n \001(\r\022F\n\032totalMarginCalculationType\030\013 "
  "\001(\0162\".ProtoOATotalMarginCalculationType\022"
  "\023\n\013maxLeverage\030\014 \001(\r\022\026\n\nfrenchRisk\030\r \001(\010"
  "B\002\030\001\022\023\n\013traderLogin\030\016 \001(\003\0220\n\013accountType"
  "\030\017 \001(\0162\023.ProtoOAAccountType:\006HEDGED\022\022\n\nb"
  "rokerName\030\020 \001(\t\022\035\n\025registrationTimestamp"
  "\030\021 \001(\003\022\025\n\risLimitedRisk\030\022 \001(\010\022q\n$limited"
  "RiskMarginCalculationStrategy\030\023 \001(\0162,.Pr"
  "otoOALimitedRiskMarginCalculationStrateg"
  "y:\025ACCORDING_TO_LEVERAGE\022\023\n\013moneyDigits\030"
  "\024 \001(\r\"\252\003\n\017ProtoOAPosition\022\022\n\npositionId\030"
  "\001 \002(\003\022$\n\ttradeData\030\002 \002(\0132\021.ProtoOATradeD"
  "ata\022.\n\016positionStatus\030\003 \002(\0162\026.ProtoOAPos"
  "itionStatus\022\014\n\004swap\030\004 \002(\003\022\r\n\005price\030\005 \001(\001"
  "\022\020\n\010stopLoss\030\006 \001(\001\022\022\n\ntakeProfit\030\007 \001(\001\022\036"
  "\n\026utcLastUpdateTimestamp\030\010 \001(\003\022\022\n\ncommis"
  "sion\030\t \001(\003\022\022\n\nmarginRate\030\n \001(\001\022\033\n\023mirror"
  "ingCommission\030\013 \001(\003\022\032\n\022guaranteedStopLos"
  "s\030\014 \001(\010\022\022\n\nusedMargin\030\r \001(\004\022@\n\025stopLossT"
  "riggerMethod\030\016 \001(\0162\032.ProtoOAOrderTrigger"
  "Method:\005TRADE\022\023\n\013moneyDigits\030\017 \001(\r\"\255\001\n\020P"
  "rotoOATradeData\022\020\n\010symbolId\030\001 \002(\003\022\016\n\006vol"
  "ume\030\002 \002(\003\022$\n\ttradeSide\030\003 \002(\0162\021.ProtoOATr"
  "adeSide\022\025\n\ropenTimestamp\030\004 \001(\003\022\r\n\005label\030"
  "\005 \001(\t\022\032\n\022guaranteedStopLoss\030\006 \001(\010\022\017\n\007com"
  "ment\030\007 \001(\t\"\245\005\n\014ProtoOAOrder\022\017\n\007orderId\030\001"
  " \002(\003\022$\n\ttradeData\030\002 \002(\0132\021.ProtoOATradeDa"
  "ta\022$\n\torderType\030\003 \002(\0162\021.ProtoOAOrderType"
  "\022(\n\013orderStatus\030\004 \002(\0162\023.ProtoOAOrderStat"
  "us\022\033\n\023expirationTimestamp\030\006 \001(\003\022\026\n\016execu"
  "tionPrice\030\007 \001(\001\022\026\n\016executedVolume\030\010 \001(\003\022"
  "\036\n\026utcLastUpdateTimestamp\030\t \001(\003\022\031\n\021baseS"
  "lippagePrice\030\n \001(\001\022\030\n\020slippageInPoints\030\013"
  " \001(\003\022\024\n\014closingOrder\030\014 \001(\010\022\022\n\nlimitPrice"
  "\030\r \001(\001\022\021\n\tstopPrice\030\016 \001(\001\022\020\n\010stopLoss\030\017 "
  "\001(\001\022\022\n\ntakeProfit\030\020 \001(\001\022\025\n\rclientOrderId"
  "\030\021 \001(\t\022=\n\013timeInForce\030\022 \001(\0162\023.ProtoOATim"
  "eInForce:\023IMMEDIATE_OR_CANCEL\022\022\n\npositio"
  "nId\030\023 \001(\003\022\030\n\020relativeStopLoss\030\024 \001(\003\022\032\n\022r"
  "elativeTakeProfit\030\025 \001(\003\022\021\n\tisStopOut\030\026 \001"
  "(\010\022\030\n\020trailingStopLoss\030\027 \001(\010\022<\n\021stopTrig"
  "gerMethod\030\030 \001(\0162\032.ProtoOAOrderTriggerMet"
  "hod:\005TRADE\"\231\002\n\033ProtoOABonusDepositWithdr"
  "aw\022.\n\roperationType\030\001 \002(\0162\027.ProtoOAChang"
  "eBonusType\022\026\n\016bonusHistoryId\030\002 \002(\003\022\024\n\014ma"
  "nagerBonus\030\003 \002(\003\022\024\n\014managerDelta\030\004 \002(\003\022\017"
  "\n\007ibBonus\030\005 \002(\003\022\017\n\007ibDelta\030\006 \002(\003\022\034\n\024chan"
  "geBonusTimestamp\030\007 \002(\003\022\024\n\014externalNote\030\010"
  " \001(\t\022\033\n\023introducingBrokerId\030\t \001(\003\022\023\n\013mon"
  "eyDigits\030\n \001(\r\"\367\001\n\026ProtoOADepositWithdra"
  "w\0220\n\roperationType\030\001 \002(\0162\031.ProtoOAChange"
  "BalanceType\022\030\n\020balanceHistoryId\030\002 \002(\003\022\017\n"
  "\007balance\030\003 \002(\003\022\r\n\005delta\030\004 \002(\003\022\036\n\026changeB"
  "alanceTimestamp\030\005 \002(\003\022\024\n\014externalNote\030\006 "
  "\001(\t\022\026\n\016balanceVersion\030\007 \001(\003\022\016\n\006equity\030\010 "
  "\001(\003\022\023\n\013moneyDigits\030\t \001(\r\"\315\003\n\013ProtoOADeal"
  "\022\016\n\006dealId\030\001 \002(\003\022\017\n\007orderId\030\002 \002(\003\022\022\n\npos"
  "itionId\030\003 \002(\003\022\016\n\006volume\030\004 \002(\003\022\024\n\014filledV"
  "olume\030\005 \002(\003\022\020\n\010symbolId\030\006 \002(\003\022\027\n\017createT"
  "imestamp\030\007 \002(\003\022\032\n\022executionTimestamp\030\010 \002"
  "(\003\022\036\n\026utcLastUpdateTimestamp\030\t \001(\003\022\026\n\016ex"
  "ecutionPrice\030\n \001(\001\022$\n\ttradeSide\030\013 \002(\0162\021."
  "ProtoOATradeSide\022&\n\ndealStatus\030\014 \002(\0162\022.P"
  "rotoOADealStatus\022\022\n\nmarginRate\030\r \001(\001\022\022\n\n"
  "commission\030\016 \001(\003\022\037\n\027baseToUsdConversionR"
  "ate\030\017 \001(\001\0228\n\023closePositionDetail\030\020 \001(\0132\033"
  ".ProtoOAClosePositionDetail\022\023\n\013moneyDigi"
  "ts\030\021 \001(\r\"\341\001\n\032ProtoOAClosePositionDetail\022"
  "\022\n\nentryPrice\030\001 \002(\001\022\023\n\013grossProfit\030\002 \002(\003"
  "\022\014\n\004swap\030\003 \002(\003\022\022\n\ncommission\030\004 \002(\003\022\017\n\007ba"
  "lance\030\005 \002(\003\022$\n\034quoteToDepositConversionR"
  "ate\030\006 \001(\001\022\024\n\014closedVolume\030\007 \001(\003\022\026\n\016balan"
  "ceVersion\030\010 \001(\003\022\023\n\013moneyDigits\030\t \001(\r\"\263\001\n"
  "\017ProtoOATrendbar\022\016\n\006volume\030\003 \002(\003\022*\n\006peri"
  "od\030\004 \001(\0162\026.ProtoOATrendbarPeriod:\002M1\022\013\n\003"
  "low\030\005 \001(\003\022\021\n\tdeltaOpen\030\006 \001(\004\022\022\n\ndeltaClo"
  "se\030\007 \001(\004\022\021\n\tdeltaHigh\030\010 \001(\004\022\035\n\025utcTimest"
  "ampInMinutes\030\t \001(\r\"N\n\025ProtoOAExpectedMar"
  "gin\022\016\n\006volume\030\001 \002(\003\022\021\n\tbuyMargin\030\002 \002(\003\022\022"
  "\n\nsellMargin\030\003 \002(\003\"2\n\017ProtoOATickData\022\021\n"
  "\ttimestamp\030\001 \002(\003\022\014\n\004tick\030\002 \002(\003\"$\n\022ProtoO"
  "ACtidProfile\022\016\n\006userId\030\001 \002(\003\"\\\n\030ProtoOAC"
  "tidTraderAccount\022\033\n\023ctidTraderAccountId\030"
  "\001 \002(\004\022\016\n\006isLive\030\002 \001(\010\022\023\n\013traderLogin\030\003 \001"
  "(\003\"-\n\021ProtoOAAssetClass\022\n\n\002id\030\001 \001(\003\022\014\n\004n"
  "ame\030\002 \001(\t\"G\n\021ProtoOADepthQuote\022\n\n\002id\030\001 \002"
  "(\004\022\014\n\004size\030\003 \002(\004\022\013\n\003bid\030\004 \001(\004\022\013\n\003ask\030\005 \001"
  "(\004\"\203\001\n\021ProtoOAMarginCall\0220\n\016marginCallTy"
  "pe\030\001 \002(\0162\030.ProtoOANotificationType\022\034\n\024ma"
  "rginLevelThreshold\030\002 \002(\001\022\036\n\026utcLastUpdat"
  "eTimestamp\030\003 \001(\003\"\262\001\n\016ProtoOAHoliday\022\021\n\th"
  "olidayId\030\001 \002(\003\022\014\n\004name\030\002 \002(\t\022\023\n\013descript"
  "ion\030\003 \001(\t\022\030\n\020scheduleTimeZone\030\004 \002(\t\022\023\n\013h"
  "olidayDate\030\005 \002(\003\022\023\n\013isRecurring\030\006 \002(\010\022\023\n"
  "\013startSecond\030\007 \001(\005\022\021\n\tendSecond\030\010 \001(\005*\213\025"
  "\n\022ProtoOAPayloadType\022\"\n\035PROTO_OA_APPLICA"
  "TION_AUTH_REQ\020\264\020\022\"\n\035PROTO_OA_APPLICATION"
  "_AUTH_RES\020\265\020\022\036\n\031PROTO_OA_ACCOUNT_AUTH_RE"
  "Q\020\266\020\022\036\n\031PROTO_OA_ACCOUNT_AUTH_RES\020\267\020\022\031\n\024"
  "PROTO_OA_VERSION_REQ\020\270\020\022\031\n\024PROTO_OA_VERS"
  "ION_RES\020\271\020\022\033\n\026PROTO_OA_NEW_ORDER_REQ\020\272\020\022"
  "\'\n\"PROTO_OA_TRAILING_SL_CHANGED_EVENT\020\273\020"
  "\022\036\n\031PROTO_OA_CANCEL_ORDER_REQ\020\274\020\022\035\n\030PROT"
  "O_OA_AMEND_ORDER_REQ\020\275\020\022%\n PROTO_OA_AMEN"
  "D_POSITION_SLTP_REQ\020\276\020\022 \n\033PROTO_OA_CLOSE"
  "_POSITION_REQ\020\277\020\022\034\n\027PROTO_OA_ASSET_LIST_"
  "REQ\020\300\020\022\034\n\027PROTO_OA_ASSET_LIST_RES\020\301\020\022\036\n\031"
  "PROTO_OA_SYMBOLS_LIST_REQ\020\302\020\022\036\n\031PROTO_OA"
  "_SYMBOLS_LIST_RES\020\303\020\022\036\n\031PROTO_OA_SYMBOL_"
  "BY_ID_REQ\020\304\020\022\036\n\031PROTO_OA_SYMBOL_BY_ID_RE"
  "S\020\305\020\022(\n#PROTO_OA_SYMBOLS_FOR_CONVERSION_"
  "REQ\020\306\020\022(\n#PROTO_OA_SYMBOLS_FOR_CONVERSIO"
  "N_RES\020\307\020\022\"\n\035PROTO_OA_SYMBOL_CHANGED_EVEN"
  "T\020\310\020\022\030\n\023PROTO_OA_TRADER_REQ\020\311\020\022\030\n\023PROTO_"
  "OA_TRADER_RES\020\312\020\022!\n\034PROTO_OA_TRADER_UPDA"
  "TE_EVENT\020\313\020\022\033\n\026PROTO_OA_RECONCILE_REQ\020\314\020"
  "\022\033\n\026PROTO_OA_RECONCILE_RES\020\315\020\022\035\n\030PROTO_O"
  "A_EXECUTION_EVENT\020\316\020\022!\n\034PROTO_OA_SUBSCRI"
  "BE_SPOTS_REQ\020\317\020\022!\n\034PROTO_OA_SUBSCRIBE_SP"
  "OTS_RES\020\320\020\022#\n\036PROTO_OA_UNSUBSCRIBE_SPOTS"
  "_REQ\020\321\020\022#\n\036PROTO_OA_UNSUBSCRIBE_SPOTS_RE"
  "S\020\322\020\022\030\n\023PROTO_OA_SPOT_EVENT\020\323\020\022\037\n\032PROTO_"
  "OA_ORDER_ERROR_EVENT\020\324\020\022\033\n\026PROTO_OA_DEAL"
  "_LIST_REQ\020\325\020\022\033\n\026PROTO_OA_DEAL_LIST_RES\020\326"
  "\020\022)\n$PROTO_OA_SUBSCRIBE_LIVE_TRENDBAR_RE"
  "Q\020\327\020\022+\n&PROTO_OA_UNSUBSCRIBE_LIVE_TRENDB"
  "AR_REQ\020\330\020\022\037\n\032PROTO_OA_GET_TRENDBARS_REQ\020"
  "\331\020\022\037\n\032PROTO_OA_GET_TRENDBARS_RES\020\332\020\022!\n\034P"
  "ROTO_OA_EXPECTED_MARGIN_REQ\020\333\020\022!\n\034PROTO_"
  "OA_EXPECTED_MARGIN_RES\020\334\020\022\"\n\035PROTO_OA_MA"
  "RGIN_CHANGED_EVENT\020\335\020\022\027\n\022PROTO_OA_ERROR_"
  "RES\020\336\020\022(\n#PROTO_OA_CASH_FLOW_HISTORY_LIS"
  "T_REQ\020\337\020\022(\n#PROTO_OA_CASH_FLOW_HISTORY_L"
  "IST_RES\020\340\020\022\036\n\031PROTO_OA_GET_TICKDATA_REQ\020"
  "\341\020\022\036\n\031PROTO_OA_GET_TICKDATA_RES\020\342\020\022.\n)PR"
  "OTO_OA_ACCOUNTS_TOKEN_INVALIDATED_EVENT\020"
  "\343\020\022%\n PROTO_OA_CLIENT_DISCONNECT_EVENT\020\344"
  "\020\022.\n)PROTO_OA_GET_ACCOUNTS_BY_ACCESS_TOK"
  "EN_REQ\020\345\020\022.\n)PROTO_OA_GET_ACCOUNTS_BY_AC"
  "CESS_TOKEN_RES\020\346\020\022+\n&PROTO_OA_GET_CTID_P"
  "ROFILE_BY_TOKEN_REQ\020\347\020\022+\n&PROTO_OA_GET_C"
  "TID_PROFILE_BY_TOKEN_RES\020\350\020\022\"\n\035PROTO_OA_"
  "ASSET_CLASS_LIST_REQ\020\351\020\022\"\n\035PROTO_OA_ASSE"
  "T_CLASS_LIST_RES\020\352\020\022\031\n\024PROTO_OA_DEPTH_EV"
  "ENT\020\353\020\022(\n#PROTO_OA_SUBSCRIBE_DEPTH_QUOTE"
  "S_REQ\020\354\020\022(\n#PROTO_OA_SUBSCRIBE_DEPTH_QUO"
  "TES_RES\020\355\020\022*\n%PROTO_OA_UNSUBSCRIBE_DEPTH"
  "_QUOTES_REQ\020\356\020\022*\n%PROTO_OA_UNSUBSCRIBE_D"
  "EPTH_QUOTES_RES\020\357\020\022!\n\034PROTO_OA_SYMBOL_CA"
  "TEGORY_REQ\020\360\020\022!\n\034PROTO_OA_SYMBOL_CATEGOR"
  "Y_RES\020\361\020\022 \n\033PROTO_OA_ACCOUNT_LOGOUT_REQ\020"
  "\362\020\022 \n\033PROTO_OA_ACCOUNT_LOGOUT_RES\020\363\020\022&\n!"
  "PROTO_OA_ACCOUNT_DISCONNECT_EVENT\020\364\020\022)\n$"
  "PROTO_OA_SUBSCRIBE_LIVE_TRENDBAR_RES\020\365\020\022"
  "+\n&PROTO_OA_UNSUBSCRIBE_LIVE_TRENDBAR_RE"
  "S\020\366\020\022\"\n\035PROTO_OA_MARGIN_CALL_LIST_REQ\020\367\020"
  "\022\"\n\035PROTO_OA_MARGIN_CALL_LIST_RES\020\370\020\022$\n\037"
  "PROTO_OA_MARGIN_CALL_UPDATE_REQ\020\371\020\022$\n\037PR"
  "OTO_OA_MARGIN_CALL_UPDATE_RES\020\372\020\022&\n!PROT"
  "O_OA_MARGIN_CALL_UPDATE_EVENT\020\373\020\022\'\n\"PROT"
  "O_OA_MARGIN_CALL_TRIGGER_EVENT\020\374\020\022\037\n\032PRO"
  "TO_OA_REFRESH_TOKEN_REQ\020\375\020\022\037\n\032PROTO_OA_R"
  "EFRESH_TOKEN_RES\020\376\020*x\n\020ProtoOADayOfWeek\022"
  "\010\n\004NONE\020\000\022\n\n\006MONDAY\020\001\022\013\n\007TUESDAY\020\002\022\r\n\tWE"
  "DNESDAY\020\003\022\014\n\010THURSDAY\020\004\022\n\n\006FRIDAY\020\005\022\014\n\010S"
  "ATURDAY\020\006\022\n\n\006SUNDAY\020\007*q\n\025ProtoOACommissi"
  "onType\022\027\n\023USD_PER_MILLION_USD\020\001\022\017\n\013USD_P"
  "ER_LOT\020\002\022\027\n\023PERCENTAGE_OF_VALUE\020\003\022\025\n\021QUO"
  "TE_CCY_PER_LOT\020\004*]\n\031ProtoOASymbolDistanc"
  "eType\022\035\n\031SYMBOL_DISTANCE_IN_POINTS\020\001\022!\n\035"
  "SYMBOL_DISTANCE_IN_PERCENTAGE\020\002*<\n\030Proto"
  "OAMinCommissionType\022\014\n\010CURRENCY\020\001\022\022\n\016QUO"
  "TE_CURRENCY\020\002*\205\001\n\022ProtoOATradingMode\022\013\n\007"
  "ENABLED\020\000\022\'\n#DISABLED_WITHOUT_PENDINGS_E"
  "XECUTION\020\001\022$\n DISABLED_WITH_PENDINGS_EXE"
  "CUTION\020\002\022\023\n\017CLOSE_ONLY_MODE\020\003*6\n\032ProtoOA"
  "SwapCalculationType\022\010\n\004PIPS\020\000\022\016\n\nPERCENT"
  "AGE\020\001*T\n\023ProtoOAAccessRights\022\017\n\013FULL_ACC"
  "ESS\020\000\022\016\n\nCLOSE_ONLY\020\001\022\016\n\nNO_TRADING\020\002\022\014\n"
  "\010NO_LOGIN\020\003*>\n!ProtoOATotalMarginCalcula"
  "tionType\022\007\n\003MAX\020\000\022\007\n\003SUM\020\001\022\007\n\003NET\020\002*@\n\022P"
  "rotoOAAccountType\022\n\n\006HEDGED\020\000\022\n\n\006NETTED\020"
  "\001\022\022\n\016SPREAD_BETTING\020\002*\205\001\n\025ProtoOAPositio"
  "nStatus\022\030\n\024POSITION_STATUS_OPEN\020\001\022\032\n\026POS"
  "ITION_STATUS_CLOSED\020\002\022\033\n\027POSITION_STATUS"
  "_CREATED\020\003\022\031\n\025POSITION_STATUS_ERROR\020\004*%\n"
  "\020ProtoOATradeSide\022\007\n\003BUY\020\001\022\010\n\004SELL\020\002*p\n\020"
  "ProtoOAOrderType\022\n\n\006MARKET\020\001\022\t\n\005LIMIT\020\002\022"
  "\010\n\004STOP\020\003\022\031\n\025STOP_LOSS_TAKE_PROFIT\020\004\022\020\n\014"
  "MARKET_RANGE\020\005\022\016\n\nSTOP_LIMIT\020\006*}\n\022ProtoO"
  "ATimeInForce\022\022\n\016GOOD_TILL_DATE\020\001\022\024\n\020GOOD"
  "_TILL_CANCEL\020\002\022\027\n\023IMMEDIATE_OR_CANCEL\020\003\022"
  "\020\n\014FILL_OR_KILL\020\004\022\022\n\016MARKET_ON_OPEN\020\005*\231\001"
  "\n\022ProtoOAOrderStatus\022\031\n\025ORDER_STATUS_ACC"
  "EPTED\020\001\022\027\n\023ORDER_STATUS_FILLED\020\002\022\031\n\025ORDE"
  "R_STATUS_REJECTED\020\003\022\030\n\024ORDER_STATUS_EXPI"
  "RED\020\004\022\032\n\026ORDER_STATUS_CANCELLED\020\005*[\n\031Pro"
  "toOAOrderTriggerMethod\022\t\n\005TRADE\020\001\022\014\n\010OPP"
  "OSITE\020\002\022\020\n\014DOUBLE_TRADE\020\003\022\023\n\017DOUBLE_OPPO"
  "SITE\020\004*\373\001\n\024ProtoOAExecutionType\022\022\n\016ORDER"
  "_ACCEPTED\020\002\022\020\n\014ORDER_FILLED\020\003\022\022\n\016ORDER_R"
  "EPLACED\020\004\022\023\n\017ORDER_CANCELLED\020\005\022\021\n\rORDER_"
  "EXPIRED\020\006\022\022\n\016ORDER_REJECTED\020\007\022\031\n\025ORDER_C"
  "ANCEL_REJECTED\020\010\022\010\n\004SWAP\020\t\022\024\n\020DEPOSIT_WI"
  "THDRAW\020\n\022\026\n\022ORDER_PARTIAL_FILL\020\013\022\032\n\026BONU"
  "S_DEPOSIT_WITHDRAW\020\014*\?\n\026ProtoOAChangeBon"
  "usType\022\021\n\rBONUS_DEPOSIT\020\000\022\022\n\016BONUS_WITHD"
  "RAW\020\001*\207\n\n\030ProtoOAChangeBalanceType\022\023\n\017BA"
  "LANCE_DEPOSIT\020\000\022\024\n\020BALANCE_WITHDRAW\020\001\022-\n"
  ")BALANCE_DEPOSIT_STRATEGY_COMMISSION_INN"
  "ER\020\003\022.\n*BALANCE_WITHDRAW_STRATEGY_COMMIS"
  "SION_INNER\020\004\022\"\n\036BALANCE_DEPOSIT_IB_COMMI"
  "SSIONS\020\005\022)\n%BALANCE_WITHDRAW_IB_SHARED_P"
  "ERCENTAGE\020\006\0224\n0BALANCE_DEPOSIT_IB_SHARED"
  "_PERCENTAGE_FROM_SUB_IB\020\007\0224\n0BALANCE_DEP"
  "OSIT_IB_SHARED_PERCENTAGE_FROM_BROKER\020\010\022"
  "\032\n\026BALANCE_DEPOSIT_REBATE\020\t\022\033\n\027BALANCE_W"
  "ITHDRAW_REBATE\020\n\022-\n)BALANCE_DEPOSIT_STRA"
  "TEGY_COMMISSION_OUTER\020\013\022.\n*BALANCE_WITHD"
  "RAW_STRATEGY_COMMISSION_OUTER\020\014\022\'\n#BALAN"
  "CE_WITHDRAW_BONUS_COMPENSATION\020\r\0223\n/BALA"
  "NCE_WITHDRAW_IB_SHARED_PERCENTAGE_TO_BRO"
  "KER\020\016\022\035\n\031BALANCE_DEPOSIT_DIVIDENDS\020\017\022\036\n\032"
  "BALANCE_WITHDRAW_DIVIDENDS\020\020\022\037\n\033BALANCE_"
  "WITHDRAW_GSL_CHARGE\020\021\022\035\n\031BALANCE_WITHDRA"
  "W_ROLLOVER\020\022\022)\n%BALANCE_DEPOSIT_NONWITHD"
  "RAWABLE_BONUS\020\023\022*\n&BALANCE_WITHDRAW_NONW"
  "ITHDRAWABLE_BONUS\020\024\022\030\n\024BALANCE_DEPOSIT_S"
  "WAP\020\025\022\031\n\025BALANCE_WITHDRAW_SWAP\020\026\022\"\n\036BALA"
  "NCE_DEPOSIT_MANAGEMENT_FEE\020\033\022#\n\037BALANCE_"
  "WITHDRAW_MANAGEMENT_FEE\020\034\022#\n\037BALANCE_DEP"
  "OSIT_PERFORMANCE_FEE\020\035\022#\n\037BALANCE_WITHDR"
  "AW_FOR_SUBACCOUNT\020\036\022!\n\035BALANCE_DEPOSIT_T"
  "O_SUBACCOUNT\020\037\022$\n BALANCE_WITHDRAW_FROM_"
  "SUBACCOUNT\020 \022#\n\037BALANCE_DEPOSIT_FROM_SUB"
  "ACCOUNT\020!\022\035\n\031BALANCE_WITHDRAW_COPY_FEE\020\""
  "\022#\n\037BALANCE_WITHDRAW_INACTIVITY_FEE\020#\022\034\n"
  "\030BALANCE_DEPOSIT_TRANSFER\020$\022\035\n\031BALANCE_W"
  "ITHDRAW_TRANSFER\020%\022#\n\037BALANCE_DEPOSIT_CO"
  "NVERTED_BONUS\020&*s\n\021ProtoOADealStatus\022\n\n\006"
  "FILLED\020\002\022\024\n\020PARTIALLY_FILLED\020\003\022\014\n\010REJECT"
  "ED\020\004\022\027\n\023INTERNALLY_REJECTED\020\005\022\t\n\005ERROR\020\006"
  "\022\n\n\006MISSED\020\007*\214\001\n\025ProtoOATrendbarPeriod\022\006"
  "\n\002M1\020\001\022\006\n\002M2\020\002\022\006\n\002M3\020\003\022\006\n\002M4\020\004\022\006\n\002M5\020\005\022\007"
  "\n\003M10\020\006\022\007\n\003M15\020\007\022\007\n\003M30\020\010\022\006\n\002H1\020\t\022\006\n\002H4\020"
  "\n\022\007\n\003H12\020\013\022\006\n\002D1\020\014\022\006\n\002W1\020\r\022\007\n\003MN1\020\016*$\n\020P"
  "rotoOAQuoteType\022\007\n\003BID\020\001\022\007\n\003ASK\020\002*\?\n\034Pro"
  "toOAClientPermissionScope\022\016\n\nSCOPE_VIEW\020"
  "\000\022\017\n\013SCOPE_TRADE\020\001*s\n\027ProtoOANotificatio"
  "nType\022\034\n\030MARGIN_LEVEL_THRESHOLD_1\020=\022\034\n\030M"
  "ARGIN_LEVEL_THRESHOLD_2\020>\022\034\n\030MARGIN_LEVE"
  "L_THRESHOLD_3\020\?*\336\010\n\020ProtoOAErrorCode\022\031\n\025"
  "OA_AUTH_TOKEN_EXPIRED\020\001\022\032\n\026ACCOUNT_NOT_A"
  "UTHORIZED\020\002\022\025\n\021ALREADY_LOGGED_IN\020\016\022\032\n\026CH"
  "_CLIENT_AUTH_FAILURE\020e\022\037\n\033CH_CLIENT_NOT_"
  "AUTHENTICATED\020f\022#\n\037CH_CLIENT_ALREADY_AUT"
  "HENTICATED\020g\022\033\n\027CH_ACCESS_TOKEN_INVALID\020"
  "h\022\033\n\027CH_SERVER_NOT_REACHABLE\020i\022$\n CH_CTI"
  "D_TRADER_ACCOUNT_NOT_FOUND\020j\022\032\n\026CH_OA_CL"
  "IENT_NOT_FOUND\020k\022\036\n\032REQUEST_FREQUENCY_EX"
  "CEEDED\020l\022\037\n\033SERVER_IS_UNDER_MAINTENANCE\020"
  "m\022\026\n\022CHANNEL_IS_BLOCKED\020n\022\036\n\032CONNECTIONS"
  "_LIMIT_EXCEEDED\020C\022\031\n\025WORSE_GSL_NOT_ALLOW"
  "ED\020D\022\026\n\022SYMBOL_HAS_HOLIDAY\020E\022\033\n\027NOT_SUBS"
  "CRIBED_TO_SPOTS\020p\022\026\n\022ALREADY_SUBSCRIBED\020"
  "q\022\024\n\020SYMBOL_NOT_FOUND\020r\022\022\n\016UNKNOWN_SYMBO"
  "L\020s\022\030\n\024INCORRECT_BOUNDARIES\020#\022\r\n\tNO_QUOT"
  "ES\020u\022\024\n\020NOT_ENOUGH_MONEY\020v\022\030\n\024MAX_EXPOSU"
  "RE_REACHED\020w\022\026\n\022POSITION_NOT_FOUND\020x\022\023\n\017"
  "ORDER_NOT_FOUND\020y\022\025\n\021POSITION_NOT_OPEN\020z"
  "\022\023\n\017POSITION_LOCKED\020{\022\026\n\022TOO_MANY_POSITI"
  "ONS\020|\022\026\n\022TRADING_BAD_VOLUME\020}\022\025\n\021TRADING"
  "_BAD_STOPS\020~\022\026\n\022TRADING_BAD_PRICES\020\177\022\026\n\021"
  "TRADING_BAD_STAKE\020\200\001\022&\n!PROTECTION_IS_TO"
  "O_CLOSE_TO_MARKET\020\201\001\022 \n\033TRADING_BAD_EXPI"
  "RATION_DATE\020\202\001\022\026\n\021PENDING_EXECUTION\020\203\001\022\025"
  "\n\020TRADING_DISABLED\020\204\001\022\030\n\023TRADING_NOT_ALL"
  "OWED\020\205\001\022\033\n\026UNABLE_TO_CANCEL_ORDER\020\206\001\022\032\n\025"
  "UNABLE_TO_AMEND_ORDER\020\207\001\022\036\n\031SHORT_SELLIN"
  "G_NOT_ALLOWED\020\210\001*\201\001\n+ProtoOALimitedRiskM"
  "arginCalculationStrategy\022\031\n\025ACCORDING_TO"
  "_LEVERAGE\020\000\022\024\n\020ACCORDING_TO_GSL\020\001\022!\n\035ACC"
  "ORDING_TO_GSL_AND_LEVERAGE\020\002BM\n%com.xtra"
  "der.protocol.openapi.v2.modelB\037Container"
  "OpenApiV2ModelMessagesP\001\240\001\001"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_OpenApiModelMessages_2eproto = {
  false, InitDefaults_OpenApiModelMessages_2eproto, 
  descriptor_table_protodef_OpenApiModelMessages_2eproto,
  "OpenApiModelMessages.proto", &assign_descriptors_table_OpenApiModelMessages_2eproto, 13267,
};

void AddDescriptors_OpenApiModelMessages_2eproto() {
  static constexpr ::PROTOBUF_NAMESPACE_ID::internal::InitFunc deps[1] =
  {
  };
 ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_OpenApiModelMessages_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_OpenApiModelMessages_2eproto = []() { AddDescriptors_OpenApiModelMessages_2eproto(); return true; }();
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOAPayloadType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&assign_descriptors_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[0];
}
bool ProtoOAPayloadType_IsValid(int value) {
  switch (value) {
    case 2100:
    case 2101:
    case 2102:
    case 2103:
    case 2104:
    case 2105:
    case 2106:
    case 2107:
    case 2108:
    case 2109:
    case 2110:
    case 2111:
    case 2112:
    case 2113:
    case 2114:
    case 2115:
    case 2116:
    case 2117:
    case 2118:
    case 2119:
    case 2120:
    case 2121:
    case 2122:
    case 2123:
    case 2124:
    case 2125:
    case 2126:
    case 2127:
    case 2128:
    case 2129:
    case 2130:
    case 2131:
    case 2132:
    case 2133:
    case 2134:
    case 2135:
    case 2136:
    case 2137:
    case 2138:
    case 2139:
    case 2140:
    case 2141:
    case 2142:
    case 2143:
    case 2144:
    case 2145:
    case 2146:
    case 2147:
    case 2148:
    case 2149:
    case 2150:
    case 2151:
    case 2152:
    case 2153:
    case 2154:
    case 2155:
    case 2156:
    case 2157:
    case 2158:
    case 2159:
    case 2160:
    case 2161:
    case 2162:
    case 2163:
    case 2164:
    case 2165:
    case 2166:
    case 2167:
    case 2168:
    case 2169:
    case 2170:
    case 2171:
    case 2172:
    case 2173:
    case 2174:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOADayOfWeek_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&assign_descriptors_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[1];
}
bool ProtoOADayOfWeek_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOACommissionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&assign_descriptors_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[2];
}
bool ProtoOACommissionType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOASymbolDistanceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&assign_descriptors_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[3];
}
bool ProtoOASymbolDistanceType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOAMinCommissionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&assign_descriptors_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[4];
}
bool ProtoOAMinCommissionType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOATradingMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&assign_descriptors_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[5];
}
bool ProtoOATradingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOASwapCalculationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&assign_descriptors_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[6];
}
bool ProtoOASwapCalculationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOAAccessRights_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&assign_descriptors_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[7];
}
bool ProtoOAAccessRights_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOATotalMarginCalculationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&assign_descriptors_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[8];
}
bool ProtoOATotalMarginCalculationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOAAccountType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&assign_descriptors_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[9];
}
bool ProtoOAAccountType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOAPositionStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&assign_descriptors_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[10];
}
bool ProtoOAPositionStatus_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOATradeSide_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&assign_descriptors_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[11];
}
bool ProtoOATradeSide_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOAOrderType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&assign_descriptors_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[12];
}
bool ProtoOAOrderType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOATimeInForce_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&assign_descriptors_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[13];
}
bool ProtoOATimeInForce_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOAOrderStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&assign_descriptors_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[14];
}
bool ProtoOAOrderStatus_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOAOrderTriggerMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&assign_descriptors_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[15];
}
bool ProtoOAOrderTriggerMethod_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOAExecutionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&assign_descriptors_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[16];
}
bool ProtoOAExecutionType_IsValid(int value) {
  switch (value) {
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOAChangeBonusType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&assign_descriptors_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[17];
}
bool ProtoOAChangeBonusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOAChangeBalanceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&assign_descriptors_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[18];
}
bool ProtoOAChangeBalanceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOADealStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&assign_descriptors_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[19];
}
bool ProtoOADealStatus_IsValid(int value) {
  switch (value) {
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOATrendbarPeriod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&assign_descriptors_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[20];
}
bool ProtoOATrendbarPeriod_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOAQuoteType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&assign_descriptors_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[21];
}
bool ProtoOAQuoteType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOAClientPermissionScope_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&assign_descriptors_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[22];
}
bool ProtoOAClientPermissionScope_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOANotificationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&assign_descriptors_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[23];
}
bool ProtoOANotificationType_IsValid(int value) {
  switch (value) {
    case 61:
    case 62:
    case 63:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOAErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&assign_descriptors_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[24];
}
bool ProtoOAErrorCode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 14:
    case 35:
    case 67:
    case 68:
    case 69:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 112:
    case 113:
    case 114:
    case 115:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOALimitedRiskMarginCalculationStrategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&assign_descriptors_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[25];
}
bool ProtoOALimitedRiskMarginCalculationStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ProtoOAAsset::InitAsDefaultInstance() {
}
class ProtoOAAsset::HasBitSetters {
 public:
  static void set_has_assetid(ProtoOAAsset* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_name(ProtoOAAsset* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_displayname(ProtoOAAsset* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_digits(ProtoOAAsset* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoOAAsset::kAssetIdFieldNumber;
const int ProtoOAAsset::kNameFieldNumber;
const int ProtoOAAsset::kDisplayNameFieldNumber;
const int ProtoOAAsset::kDigitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoOAAsset::ProtoOAAsset()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOAAsset)
}
ProtoOAAsset::ProtoOAAsset(const ProtoOAAsset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  displayname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_displayname()) {
    displayname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.displayname_);
  }
  ::memcpy(&assetid_, &from.assetid_,
    static_cast<size_t>(reinterpret_cast<char*>(&digits_) -
    reinterpret_cast<char*>(&assetid_)) + sizeof(digits_));
  // @@protoc_insertion_point(copy_constructor:ProtoOAAsset)
}

void ProtoOAAsset::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ProtoOAAsset_OpenApiModelMessages_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  displayname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&assetid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&digits_) -
      reinterpret_cast<char*>(&assetid_)) + sizeof(digits_));
}

ProtoOAAsset::~ProtoOAAsset() {
  // @@protoc_insertion_point(destructor:ProtoOAAsset)
  SharedDtor();
}

void ProtoOAAsset::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  displayname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProtoOAAsset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOAAsset& ProtoOAAsset::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOAAsset_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOAAsset::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOAAsset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      displayname_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&assetid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&digits_) -
        reinterpret_cast<char*>(&assetid_)) + sizeof(digits_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProtoOAAsset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int64 assetId = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        set_assetid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required string name = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "ProtoOAAsset.name");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string displayName = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_displayname(), ptr, ctx, "ProtoOAAsset.displayName");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 digits = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 32) goto handle_unusual;
        set_digits(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProtoOAAsset::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOAAsset)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 assetId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_assetid(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &assetid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "ProtoOAAsset.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string displayName = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_displayname()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->displayname().data(), static_cast<int>(this->displayname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "ProtoOAAsset.displayName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 digits = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_digits(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &digits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOAAsset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOAAsset)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProtoOAAsset::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOAAsset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 assetId = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->assetid(), output);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOAAsset.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string displayName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->displayname().data(), static_cast<int>(this->displayname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOAAsset.displayName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->displayname(), output);
  }

  // optional int32 digits = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->digits(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOAAsset)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOAAsset::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOAAsset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 assetId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->assetid(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOAAsset.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string displayName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->displayname().data(), static_cast<int>(this->displayname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOAAsset.displayName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->displayname(), target);
  }

  // optional int32 digits = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->digits(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOAAsset)
  return target;
}

size_t ProtoOAAsset::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoOAAsset)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_assetid()) {
    // required int64 assetId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->assetid());
  }

  return total_size;
}
size_t ProtoOAAsset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOAAsset)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());

    // required int64 assetId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->assetid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string displayName = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->displayname());
  }

  // optional int32 digits = 4;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->digits());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOAAsset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOAAsset)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOAAsset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOAAsset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOAAsset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOAAsset)
    MergeFrom(*source);
  }
}

void ProtoOAAsset::MergeFrom(const ProtoOAAsset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOAAsset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      displayname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.displayname_);
    }
    if (cached_has_bits & 0x00000004u) {
      assetid_ = from.assetid_;
    }
    if (cached_has_bits & 0x00000008u) {
      digits_ = from.digits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOAAsset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOAAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOAAsset::CopyFrom(const ProtoOAAsset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOAAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOAAsset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void ProtoOAAsset::Swap(ProtoOAAsset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoOAAsset::InternalSwap(ProtoOAAsset* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  displayname_.Swap(&other->displayname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(assetid_, other->assetid_);
  swap(digits_, other->digits_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOAAsset::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_OpenApiModelMessages_2eproto);
  return ::file_level_metadata_OpenApiModelMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProtoOASymbol::InitAsDefaultInstance() {
}
class ProtoOASymbol::HasBitSetters {
 public:
  static void set_has_symbolid(ProtoOASymbol* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_digits(ProtoOASymbol* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_pipposition(ProtoOASymbol* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_enableshortselling(ProtoOASymbol* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_guaranteedstoploss(ProtoOASymbol* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_swaprollover3days(ProtoOASymbol* msg) {
    msg->_has_bits_[0] |= 0x08000000u;
  }
  static void set_has_swaplong(ProtoOASymbol* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_swapshort(ProtoOASymbol* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_maxvolume(ProtoOASymbol* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_minvolume(ProtoOASymbol* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_stepvolume(ProtoOASymbol* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_maxexposure(ProtoOASymbol* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_commission(ProtoOASymbol* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_commissiontype(ProtoOASymbol* msg) {
    msg->_has_bits_[0] |= 0x10000000u;
  }
  static void set_has_sldistance(ProtoOASymbol* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_tpdistance(ProtoOASymbol* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_gsldistance(ProtoOASymbol* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_gslcharge(ProtoOASymbol* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_distancesetin(ProtoOASymbol* msg) {
    msg->_has_bits_[0] |= 0x20000000u;
  }
  static void set_has_mincommission(ProtoOASymbol* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_mincommissiontype(ProtoOASymbol* msg) {
    msg->_has_bits_[0] |= 0x40000000u;
  }
  static void set_has_mincommissionasset(ProtoOASymbol* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_rollovercommission(ProtoOASymbol* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static void set_has_skiprolloverdays(ProtoOASymbol* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static void set_has_scheduletimezone(ProtoOASymbol* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_tradingmode(ProtoOASymbol* msg) {
    msg->_has_bits_[0] |= 0x00200000u;
  }
  static void set_has_rollovercommission3days(ProtoOASymbol* msg) {
    msg->_has_bits_[0] |= 0x04000000u;
  }
  static void set_has_swapcalculationtype(ProtoOASymbol* msg) {
    msg->_has_bits_[0] |= 0x02000000u;
  }
  static void set_has_lotsize(ProtoOASymbol* msg) {
    msg->_has_bits_[0] |= 0x00400000u;
  }
  static void set_has_precisetradingcommissionrate(ProtoOASymbol* msg) {
    msg->_has_bits_[0] |= 0x00800000u;
  }
  static void set_has_precisemincommission(ProtoOASymbol* msg) {
    msg->_has_bits_[0] |= 0x01000000u;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ProtoOASymbol::_i_give_permission_to_break_this_code_default_mincommissionasset_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoOASymbol::kSymbolIdFieldNumber;
const int ProtoOASymbol::kDigitsFieldNumber;
const int ProtoOASymbol::kPipPositionFieldNumber;
const int ProtoOASymbol::kEnableShortSellingFieldNumber;
const int ProtoOASymbol::kGuaranteedStopLossFieldNumber;
const int ProtoOASymbol::kSwapRollover3DaysFieldNumber;
const int ProtoOASymbol::kSwapLongFieldNumber;
const int ProtoOASymbol::kSwapShortFieldNumber;
const int ProtoOASymbol::kMaxVolumeFieldNumber;
const int ProtoOASymbol::kMinVolumeFieldNumber;
const int ProtoOASymbol::kStepVolumeFieldNumber;
const int ProtoOASymbol::kMaxExposureFieldNumber;
const int ProtoOASymbol::kScheduleFieldNumber;
const int ProtoOASymbol::kCommissionFieldNumber;
const int ProtoOASymbol::kCommissionTypeFieldNumber;
const int ProtoOASymbol::kSlDistanceFieldNumber;
const int ProtoOASymbol::kTpDistanceFieldNumber;
const int ProtoOASymbol::kGslDistanceFieldNumber;
const int ProtoOASymbol::kGslChargeFieldNumber;
const int ProtoOASymbol::kDistanceSetInFieldNumber;
const int ProtoOASymbol::kMinCommissionFieldNumber;
const int ProtoOASymbol::kMinCommissionTypeFieldNumber;
const int ProtoOASymbol::kMinCommissionAssetFieldNumber;
const int ProtoOASymbol::kRolloverCommissionFieldNumber;
const int ProtoOASymbol::kSkipRolloverDaysFieldNumber;
const int ProtoOASymbol::kScheduleTimeZoneFieldNumber;
const int ProtoOASymbol::kTradingModeFieldNumber;
const int ProtoOASymbol::kRolloverCommission3DaysFieldNumber;
const int ProtoOASymbol::kSwapCalculationTypeFieldNumber;
const int ProtoOASymbol::kLotSizeFieldNumber;
const int ProtoOASymbol::kPreciseTradingCommissionRateFieldNumber;
const int ProtoOASymbol::kPreciseMinCommissionFieldNumber;
const int ProtoOASymbol::kHolidayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoOASymbol::ProtoOASymbol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOASymbol)
}
ProtoOASymbol::ProtoOASymbol(const ProtoOASymbol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      schedule_(from.schedule_),
      holiday_(from.holiday_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mincommissionasset_.UnsafeSetDefault(&::ProtoOASymbol::_i_give_permission_to_break_this_code_default_mincommissionasset_.get());
  if (from.has_mincommissionasset()) {
    mincommissionasset_.AssignWithDefault(&::ProtoOASymbol::_i_give_permission_to_break_this_code_default_mincommissionasset_.get(), from.mincommissionasset_);
  }
  scheduletimezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_scheduletimezone()) {
    scheduletimezone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scheduletimezone_);
  }
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mincommissiontype_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(mincommissiontype_));
  // @@protoc_insertion_point(copy_constructor:ProtoOASymbol)
}

void ProtoOASymbol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ProtoOASymbol_OpenApiModelMessages_2eproto.base);
  mincommissionasset_.UnsafeSetDefault(&::ProtoOASymbol::_i_give_permission_to_break_this_code_default_mincommissionasset_.get());
  scheduletimezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&swapcalculationtype_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(swapcalculationtype_));
  rollovercommission3days_ = 1;
  swaprollover3days_ = 1;
  commissiontype_ = 1;
  distancesetin_ = 1;
  mincommissiontype_ = 1;
}

ProtoOASymbol::~ProtoOASymbol() {
  // @@protoc_insertion_point(destructor:ProtoOASymbol)
  SharedDtor();
}

void ProtoOASymbol::SharedDtor() {
  mincommissionasset_.DestroyNoArena(&::ProtoOASymbol::_i_give_permission_to_break_this_code_default_mincommissionasset_.get());
  scheduletimezone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProtoOASymbol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOASymbol& ProtoOASymbol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOASymbol_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOASymbol::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOASymbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  schedule_.Clear();
  holiday_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mincommissionasset_.UnsafeMutablePointer()->assign(*&::ProtoOASymbol::_i_give_permission_to_break_this_code_default_mincommissionasset_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      scheduletimezone_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&symbolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enableshortselling_) -
        reinterpret_cast<char*>(&symbolid_)) + sizeof(enableshortselling_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&guaranteedstoploss_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tpdistance_) -
        reinterpret_cast<char*>(&guaranteedstoploss_)) + sizeof(tpdistance_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&gsldistance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&precisetradingcommissionrate_) -
        reinterpret_cast<char*>(&gsldistance_)) + sizeof(precisetradingcommissionrate_));
  }
  if (cached_has_bits & 0x7f000000u) {
    ::memset(&precisemincommission_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&swapcalculationtype_) -
        reinterpret_cast<char*>(&precisemincommission_)) + sizeof(swapcalculationtype_));
    rollovercommission3days_ = 1;
    swaprollover3days_ = 1;
    commissiontype_ = 1;
    distancesetin_ = 1;
    mincommissiontype_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProtoOASymbol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int64 symbolId = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        set_symbolid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 digits = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 16) goto handle_unusual;
        set_digits(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 pipPosition = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 24) goto handle_unusual;
        set_pipposition(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool enableShortSelling = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 32) goto handle_unusual;
        set_enableshortselling(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool guaranteedStopLoss = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 40) goto handle_unusual;
        set_guaranteedstoploss(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .ProtoOADayOfWeek swapRollover3Days = 6 [default = MONDAY];
      case 6: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 48) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        if (!::ProtoOADayOfWeek_IsValid(val)) {
          ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          break;
        }
        set_swaprollover3days(static_cast<::ProtoOADayOfWeek>(val));
        break;
      }
      // optional double swapLong = 7;
      case 7: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 57) goto handle_unusual;
        set_swaplong(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double swapShort = 8;
      case 8: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 65) goto handle_unusual;
        set_swapshort(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional int64 maxVolume = 9;
      case 9: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 72) goto handle_unusual;
        set_maxvolume(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int64 minVolume = 10;
      case 10: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 80) goto handle_unusual;
        set_minvolume(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int64 stepVolume = 11;
      case 11: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 88) goto handle_unusual;
        set_stepvolume(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 maxExposure = 12;
      case 12: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 96) goto handle_unusual;
        set_maxexposure(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .ProtoOAInterval schedule = 13;
      case 13: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 106) goto handle_unusual;
        do {
          ptr = ctx->ParseMessage(add_schedule(), ptr);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ctx->Done(&ptr)) return ptr;
        } while ((::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr) & 255) == 106 && (ptr += 1));
        break;
      }
      // optional int64 commission = 14 [deprecated = true];
      case 14: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 112) goto handle_unusual;
        set_commission(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .ProtoOACommissionType commissionType = 15 [default = USD_PER_MILLION_USD];
      case 15: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 120) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        if (!::ProtoOACommissionType_IsValid(val)) {
          ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
          break;
        }
        set_commissiontype(static_cast<::ProtoOACommissionType>(val));
        break;
      }
      // optional uint32 slDistance = 16;
      case 16: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 128) goto handle_unusual;
        set_sldistance(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 tpDistance = 17;
      case 17: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 136) goto handle_unusual;
        set_tpdistance(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 gslDistance = 18;
      case 18: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 144) goto handle_unusual;
        set_gsldistance(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int64 gslCharge = 19;
      case 19: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 152) goto handle_unusual;
        set_gslcharge(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .ProtoOASymbolDistanceType distanceSetIn = 20 [default = SYMBOL_DISTANCE_IN_POINTS];
      case 20: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 160) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        if (!::ProtoOASymbolDistanceType_IsValid(val)) {
          ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(20, val, mutable_unknown_fields());
          break;
        }
        set_distancesetin(static_cast<::ProtoOASymbolDistanceType>(val));
        break;
      }
      // optional int64 minCommission = 21 [deprecated = true];
      case 21: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 168) goto handle_unusual;
        set_mincommission(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .ProtoOAMinCommissionType minCommissionType = 22 [default = CURRENCY];
      case 22: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 176) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        if (!::ProtoOAMinCommissionType_IsValid(val)) {
          ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(22, val, mutable_unknown_fields());
          break;
        }
        set_mincommissiontype(static_cast<::ProtoOAMinCommissionType>(val));
        break;
      }
      // optional string minCommissionAsset = 23 [default = "USD"];
      case 23: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 186) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_mincommissionasset(), ptr, ctx, "ProtoOASymbol.minCommissionAsset");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int64 rolloverCommission = 24;
      case 24: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 192) goto handle_unusual;
        set_rollovercommission(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 skipRolloverDays = 25;
      case 25: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 200) goto handle_unusual;
        set_skiprolloverdays(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string scheduleTimeZone = 26;
      case 26: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 210) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_scheduletimezone(), ptr, ctx, "ProtoOASymbol.scheduleTimeZone");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .ProtoOATradingMode tradingMode = 27 [default = ENABLED];
      case 27: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 216) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        if (!::ProtoOATradingMode_IsValid(val)) {
          ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(27, val, mutable_unknown_fields());
          break;
        }
        set_tradingmode(static_cast<::ProtoOATradingMode>(val));
        break;
      }
      // optional .ProtoOADayOfWeek rolloverCommission3Days = 28 [default = MONDAY];
      case 28: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 224) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        if (!::ProtoOADayOfWeek_IsValid(val)) {
          ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(28, val, mutable_unknown_fields());
          break;
        }
        set_rollovercommission3days(static_cast<::ProtoOADayOfWeek>(val));
        break;
      }
      // optional .ProtoOASwapCalculationType swapCalculationType = 29 [default = PIPS];
      case 29: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 232) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        if (!::ProtoOASwapCalculationType_IsValid(val)) {
          ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(29, val, mutable_unknown_fields());
          break;
        }
        set_swapcalculationtype(static_cast<::ProtoOASwapCalculationType>(val));
        break;
      }
      // optional int64 lotSize = 30;
      case 30: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 240) goto handle_unusual;
        set_lotsize(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int64 preciseTradingCommissionRate = 31;
      case 31: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 248) goto handle_unusual;
        set_precisetradingcommissionrate(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int64 preciseMinCommission = 32;
      case 32: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 0) goto handle_unusual;
        set_precisemincommission(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .ProtoOAHoliday holiday = 33;
      case 33: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ctx->ParseMessage(add_holiday(), ptr);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ctx->Done(&ptr)) return ptr;
        } while ((::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr) & 65535) == 650 && (ptr += 2));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProtoOASymbol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOASymbol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 symbolId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_symbolid(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 digits = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_digits(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &digits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 pipPosition = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_pipposition(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pipposition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enableShortSelling = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_enableshortselling(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enableshortselling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool guaranteedStopLoss = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_guaranteedstoploss(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &guaranteedstoploss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ProtoOADayOfWeek swapRollover3Days = 6 [default = MONDAY];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOADayOfWeek_IsValid(value)) {
            set_swaprollover3days(static_cast< ::ProtoOADayOfWeek >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double swapLong = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {
          HasBitSetters::set_has_swaplong(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &swaplong_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double swapShort = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (65 & 0xFF)) {
          HasBitSetters::set_has_swapshort(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &swapshort_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 maxVolume = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_maxvolume(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxvolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 minVolume = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_minvolume(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &minvolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 stepVolume = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_stepvolume(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &stepvolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 maxExposure = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_maxexposure(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxexposure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ProtoOAInterval schedule = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_schedule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 commission = 14 [deprecated = true];
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_commission(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &commission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ProtoOACommissionType commissionType = 15 [default = USD_PER_MILLION_USD];
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOACommissionType_IsValid(value)) {
            set_commissiontype(static_cast< ::ProtoOACommissionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                15, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slDistance = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_sldistance(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sldistance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tpDistance = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_tpdistance(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpdistance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gslDistance = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          HasBitSetters::set_has_gsldistance(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gsldistance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 gslCharge = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          HasBitSetters::set_has_gslcharge(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &gslcharge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ProtoOASymbolDistanceType distanceSetIn = 20 [default = SYMBOL_DISTANCE_IN_POINTS];
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOASymbolDistanceType_IsValid(value)) {
            set_distancesetin(static_cast< ::ProtoOASymbolDistanceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                20, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 minCommission = 21 [deprecated = true];
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {
          HasBitSetters::set_has_mincommission(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &mincommission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ProtoOAMinCommissionType minCommissionType = 22 [default = CURRENCY];
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOAMinCommissionType_IsValid(value)) {
            set_mincommissiontype(static_cast< ::ProtoOAMinCommissionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                22, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string minCommissionAsset = 23 [default = "USD"];
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_mincommissionasset()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mincommissionasset().data(), static_cast<int>(this->mincommissionasset().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "ProtoOASymbol.minCommissionAsset");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 rolloverCommission = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {
          HasBitSetters::set_has_rollovercommission(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &rollovercommission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 skipRolloverDays = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (200 & 0xFF)) {
          HasBitSetters::set_has_skiprolloverdays(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &skiprolloverdays_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string scheduleTimeZone = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_scheduletimezone()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scheduletimezone().data(), static_cast<int>(this->scheduletimezone().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "ProtoOASymbol.scheduleTimeZone");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ProtoOATradingMode tradingMode = 27 [default = ENABLED];
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (216 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOATradingMode_IsValid(value)) {
            set_tradingmode(static_cast< ::ProtoOATradingMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                27, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ProtoOADayOfWeek rolloverCommission3Days = 28 [default = MONDAY];
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (224 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOADayOfWeek_IsValid(value)) {
            set_rollovercommission3days(static_cast< ::ProtoOADayOfWeek >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                28, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ProtoOASwapCalculationType swapCalculationType = 29 [default = PIPS];
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (232 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOASwapCalculationType_IsValid(value)) {
            set_swapcalculationtype(static_cast< ::ProtoOASwapCalculationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                29, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 lotSize = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (240 & 0xFF)) {
          HasBitSetters::set_has_lotsize(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lotsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 preciseTradingCommissionRate = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (248 & 0xFF)) {
          HasBitSetters::set_has_precisetradingcommissionrate(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &precisetradingcommissionrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 preciseMinCommission = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (256 & 0xFF)) {
          HasBitSetters::set_has_precisemincommission(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &precisemincommission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ProtoOAHoliday holiday = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (266 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_holiday()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOASymbol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOASymbol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProtoOASymbol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOASymbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 symbolId = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->symbolid(), output);
  }

  // required int32 digits = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->digits(), output);
  }

  // required int32 pipPosition = 3;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->pipposition(), output);
  }

  // optional bool enableShortSelling = 4;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->enableshortselling(), output);
  }

  // optional bool guaranteedStopLoss = 5;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->guaranteedstoploss(), output);
  }

  // optional .ProtoOADayOfWeek swapRollover3Days = 6 [default = MONDAY];
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->swaprollover3days(), output);
  }

  // optional double swapLong = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->swaplong(), output);
  }

  // optional double swapShort = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(8, this->swapshort(), output);
  }

  // optional int64 maxVolume = 9;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(9, this->maxvolume(), output);
  }

  // optional int64 minVolume = 10;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(10, this->minvolume(), output);
  }

  // optional int64 stepVolume = 11;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(11, this->stepvolume(), output);
  }

  // optional uint64 maxExposure = 12;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(12, this->maxexposure(), output);
  }

  // repeated .ProtoOAInterval schedule = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->schedule_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->schedule(static_cast<int>(i)),
      output);
  }

  // optional int64 commission = 14 [deprecated = true];
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(14, this->commission(), output);
  }

  // optional .ProtoOACommissionType commissionType = 15 [default = USD_PER_MILLION_USD];
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      15, this->commissiontype(), output);
  }

  // optional uint32 slDistance = 16;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(16, this->sldistance(), output);
  }

  // optional uint32 tpDistance = 17;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(17, this->tpdistance(), output);
  }

  // optional uint32 gslDistance = 18;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(18, this->gsldistance(), output);
  }

  // optional int64 gslCharge = 19;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(19, this->gslcharge(), output);
  }

  // optional .ProtoOASymbolDistanceType distanceSetIn = 20 [default = SYMBOL_DISTANCE_IN_POINTS];
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      20, this->distancesetin(), output);
  }

  // optional int64 minCommission = 21 [deprecated = true];
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(21, this->mincommission(), output);
  }

  // optional .ProtoOAMinCommissionType minCommissionType = 22 [default = CURRENCY];
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      22, this->mincommissiontype(), output);
  }

  // optional string minCommissionAsset = 23 [default = "USD"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mincommissionasset().data(), static_cast<int>(this->mincommissionasset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOASymbol.minCommissionAsset");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->mincommissionasset(), output);
  }

  // optional int64 rolloverCommission = 24;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(24, this->rollovercommission(), output);
  }

  // optional int32 skipRolloverDays = 25;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(25, this->skiprolloverdays(), output);
  }

  // optional string scheduleTimeZone = 26;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scheduletimezone().data(), static_cast<int>(this->scheduletimezone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOASymbol.scheduleTimeZone");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->scheduletimezone(), output);
  }

  // optional .ProtoOATradingMode tradingMode = 27 [default = ENABLED];
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      27, this->tradingmode(), output);
  }

  // optional .ProtoOADayOfWeek rolloverCommission3Days = 28 [default = MONDAY];
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      28, this->rollovercommission3days(), output);
  }

  // optional .ProtoOASwapCalculationType swapCalculationType = 29 [default = PIPS];
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      29, this->swapcalculationtype(), output);
  }

  // optional int64 lotSize = 30;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(30, this->lotsize(), output);
  }

  // optional int64 preciseTradingCommissionRate = 31;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(31, this->precisetradingcommissionrate(), output);
  }

  // optional int64 preciseMinCommission = 32;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(32, this->precisemincommission(), output);
  }

  // repeated .ProtoOAHoliday holiday = 33;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->holiday_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      33,
      this->holiday(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOASymbol)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOASymbol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOASymbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 symbolId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->symbolid(), target);
  }

  // required int32 digits = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->digits(), target);
  }

  // required int32 pipPosition = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->pipposition(), target);
  }

  // optional bool enableShortSelling = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->enableshortselling(), target);
  }

  // optional bool guaranteedStopLoss = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->guaranteedstoploss(), target);
  }

  // optional .ProtoOADayOfWeek swapRollover3Days = 6 [default = MONDAY];
  if (cached_has_bits & 0x08000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->swaprollover3days(), target);
  }

  // optional double swapLong = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->swaplong(), target);
  }

  // optional double swapShort = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->swapshort(), target);
  }

  // optional int64 maxVolume = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->maxvolume(), target);
  }

  // optional int64 minVolume = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->minvolume(), target);
  }

  // optional int64 stepVolume = 11;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->stepvolume(), target);
  }

  // optional uint64 maxExposure = 12;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->maxexposure(), target);
  }

  // repeated .ProtoOAInterval schedule = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->schedule_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->schedule(static_cast<int>(i)), target);
  }

  // optional int64 commission = 14 [deprecated = true];
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->commission(), target);
  }

  // optional .ProtoOACommissionType commissionType = 15 [default = USD_PER_MILLION_USD];
  if (cached_has_bits & 0x10000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      15, this->commissiontype(), target);
  }

  // optional uint32 slDistance = 16;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->sldistance(), target);
  }

  // optional uint32 tpDistance = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->tpdistance(), target);
  }

  // optional uint32 gslDistance = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->gsldistance(), target);
  }

  // optional int64 gslCharge = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(19, this->gslcharge(), target);
  }

  // optional .ProtoOASymbolDistanceType distanceSetIn = 20 [default = SYMBOL_DISTANCE_IN_POINTS];
  if (cached_has_bits & 0x20000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      20, this->distancesetin(), target);
  }

  // optional int64 minCommission = 21 [deprecated = true];
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(21, this->mincommission(), target);
  }

  // optional .ProtoOAMinCommissionType minCommissionType = 22 [default = CURRENCY];
  if (cached_has_bits & 0x40000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      22, this->mincommissiontype(), target);
  }

  // optional string minCommissionAsset = 23 [default = "USD"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mincommissionasset().data(), static_cast<int>(this->mincommissionasset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOASymbol.minCommissionAsset");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        23, this->mincommissionasset(), target);
  }

  // optional int64 rolloverCommission = 24;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(24, this->rollovercommission(), target);
  }

  // optional int32 skipRolloverDays = 25;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->skiprolloverdays(), target);
  }

  // optional string scheduleTimeZone = 26;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scheduletimezone().data(), static_cast<int>(this->scheduletimezone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOASymbol.scheduleTimeZone");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        26, this->scheduletimezone(), target);
  }

  // optional .ProtoOATradingMode tradingMode = 27 [default = ENABLED];
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      27, this->tradingmode(), target);
  }

  // optional .ProtoOADayOfWeek rolloverCommission3Days = 28 [default = MONDAY];
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      28, this->rollovercommission3days(), target);
  }

  // optional .ProtoOASwapCalculationType swapCalculationType = 29 [default = PIPS];
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      29, this->swapcalculationtype(), target);
  }

  // optional int64 lotSize = 30;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(30, this->lotsize(), target);
  }

  // optional int64 preciseTradingCommissionRate = 31;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(31, this->precisetradingcommissionrate(), target);
  }

  // optional int64 preciseMinCommission = 32;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(32, this->precisemincommission(), target);
  }

  // repeated .ProtoOAHoliday holiday = 33;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->holiday_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        33, this->holiday(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOASymbol)
  return target;
}

size_t ProtoOASymbol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoOASymbol)
  size_t total_size = 0;

  if (has_symbolid()) {
    // required int64 symbolId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->symbolid());
  }

  if (has_digits()) {
    // required int32 digits = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->digits());
  }

  if (has_pipposition()) {
    // required int32 pipPosition = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->pipposition());
  }

  return total_size;
}
size_t ProtoOASymbol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOASymbol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001c) ^ 0x0000001c) == 0) {  // All required fields are present.
    // required int64 symbolId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->symbolid());

    // required int32 digits = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->digits());

    // required int32 pipPosition = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->pipposition());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProtoOAInterval schedule = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->schedule_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->schedule(static_cast<int>(i)));
    }
  }

  // repeated .ProtoOAHoliday holiday = 33;
  {
    unsigned int count = static_cast<unsigned int>(this->holiday_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->holiday(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string minCommissionAsset = 23 [default = "USD"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->mincommissionasset());
    }

    // optional string scheduleTimeZone = 26;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->scheduletimezone());
    }

  }
  if (cached_has_bits & 0x000000e0u) {
    // optional double swapLong = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double swapShort = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional bool enableShortSelling = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool guaranteedStopLoss = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional uint32 slDistance = 16;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->sldistance());
    }

    // optional int64 maxVolume = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->maxvolume());
    }

    // optional int64 minVolume = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->minvolume());
    }

    // optional int64 stepVolume = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->stepvolume());
    }

    // optional uint64 maxExposure = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->maxexposure());
    }

    // optional int64 commission = 14 [deprecated = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->commission());
    }

    // optional uint32 tpDistance = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->tpdistance());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 gslDistance = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->gsldistance());
    }

    // optional int64 gslCharge = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->gslcharge());
    }

    // optional int64 minCommission = 21 [deprecated = true];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->mincommission());
    }

    // optional int64 rolloverCommission = 24;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->rollovercommission());
    }

    // optional int32 skipRolloverDays = 25;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->skiprolloverdays());
    }

    // optional .ProtoOATradingMode tradingMode = 27 [default = ENABLED];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->tradingmode());
    }

    // optional int64 lotSize = 30;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->lotsize());
    }

    // optional int64 preciseTradingCommissionRate = 31;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->precisetradingcommissionrate());
    }

  }
  if (cached_has_bits & 0x7f000000u) {
    // optional int64 preciseMinCommission = 32;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->precisemincommission());
    }

    // optional .ProtoOASwapCalculationType swapCalculationType = 29 [default = PIPS];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->swapcalculationtype());
    }

    // optional .ProtoOADayOfWeek rolloverCommission3Days = 28 [default = MONDAY];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->rollovercommission3days());
    }

    // optional .ProtoOADayOfWeek swapRollover3Days = 6 [default = MONDAY];
    if (cached_has_bits & 0x08000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->swaprollover3days());
    }

    // optional .ProtoOACommissionType commissionType = 15 [default = USD_PER_MILLION_USD];
    if (cached_has_bits & 0x10000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->commissiontype());
    }

    // optional .ProtoOASymbolDistanceType distanceSetIn = 20 [default = SYMBOL_DISTANCE_IN_POINTS];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->distancesetin());
    }

    // optional .ProtoOAMinCommissionType minCommissionType = 22 [default = CURRENCY];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->mincommissiontype());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOASymbol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOASymbol)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOASymbol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOASymbol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOASymbol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOASymbol)
    MergeFrom(*source);
  }
}

void ProtoOASymbol::MergeFrom(const ProtoOASymbol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOASymbol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  schedule_.MergeFrom(from.schedule_);
  holiday_.MergeFrom(from.holiday_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      mincommissionasset_.AssignWithDefault(&::ProtoOASymbol::_i_give_permission_to_break_this_code_default_mincommissionasset_.get(), from.mincommissionasset_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      scheduletimezone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scheduletimezone_);
    }
    if (cached_has_bits & 0x00000004u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000008u) {
      digits_ = from.digits_;
    }
    if (cached_has_bits & 0x00000010u) {
      pipposition_ = from.pipposition_;
    }
    if (cached_has_bits & 0x00000020u) {
      swaplong_ = from.swaplong_;
    }
    if (cached_has_bits & 0x00000040u) {
      swapshort_ = from.swapshort_;
    }
    if (cached_has_bits & 0x00000080u) {
      enableshortselling_ = from.enableshortselling_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      guaranteedstoploss_ = from.guaranteedstoploss_;
    }
    if (cached_has_bits & 0x00000200u) {
      sldistance_ = from.sldistance_;
    }
    if (cached_has_bits & 0x00000400u) {
      maxvolume_ = from.maxvolume_;
    }
    if (cached_has_bits & 0x00000800u) {
      minvolume_ = from.minvolume_;
    }
    if (cached_has_bits & 0x00001000u) {
      stepvolume_ = from.stepvolume_;
    }
    if (cached_has_bits & 0x00002000u) {
      maxexposure_ = from.maxexposure_;
    }
    if (cached_has_bits & 0x00004000u) {
      commission_ = from.commission_;
    }
    if (cached_has_bits & 0x00008000u) {
      tpdistance_ = from.tpdistance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      gsldistance_ = from.gsldistance_;
    }
    if (cached_has_bits & 0x00020000u) {
      gslcharge_ = from.gslcharge_;
    }
    if (cached_has_bits & 0x00040000u) {
      mincommission_ = from.mincommission_;
    }
    if (cached_has_bits & 0x00080000u) {
      rollovercommission_ = from.rollovercommission_;
    }
    if (cached_has_bits & 0x00100000u) {
      skiprolloverdays_ = from.skiprolloverdays_;
    }
    if (cached_has_bits & 0x00200000u) {
      tradingmode_ = from.tradingmode_;
    }
    if (cached_has_bits & 0x00400000u) {
      lotsize_ = from.lotsize_;
    }
    if (cached_has_bits & 0x00800000u) {
      precisetradingcommissionrate_ = from.precisetradingcommissionrate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x7f000000u) {
    if (cached_has_bits & 0x01000000u) {
      precisemincommission_ = from.precisemincommission_;
    }
    if (cached_has_bits & 0x02000000u) {
      swapcalculationtype_ = from.swapcalculationtype_;
    }
    if (cached_has_bits & 0x04000000u) {
      rollovercommission3days_ = from.rollovercommission3days_;
    }
    if (cached_has_bits & 0x08000000u) {
      swaprollover3days_ = from.swaprollover3days_;
    }
    if (cached_has_bits & 0x10000000u) {
      commissiontype_ = from.commissiontype_;
    }
    if (cached_has_bits & 0x20000000u) {
      distancesetin_ = from.distancesetin_;
    }
    if (cached_has_bits & 0x40000000u) {
      mincommissiontype_ = from.mincommissiontype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOASymbol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOASymbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOASymbol::CopyFrom(const ProtoOASymbol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOASymbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOASymbol::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->schedule())) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->holiday())) return false;
  return true;
}

void ProtoOASymbol::Swap(ProtoOASymbol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoOASymbol::InternalSwap(ProtoOASymbol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&schedule_)->InternalSwap(CastToBase(&other->schedule_));
  CastToBase(&holiday_)->InternalSwap(CastToBase(&other->holiday_));
  mincommissionasset_.Swap(&other->mincommissionasset_, &::ProtoOASymbol::_i_give_permission_to_break_this_code_default_mincommissionasset_.get(),
    GetArenaNoVirtual());
  scheduletimezone_.Swap(&other->scheduletimezone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(symbolid_, other->symbolid_);
  swap(digits_, other->digits_);
  swap(pipposition_, other->pipposition_);
  swap(swaplong_, other->swaplong_);
  swap(swapshort_, other->swapshort_);
  swap(enableshortselling_, other->enableshortselling_);
  swap(guaranteedstoploss_, other->guaranteedstoploss_);
  swap(sldistance_, other->sldistance_);
  swap(maxvolume_, other->maxvolume_);
  swap(minvolume_, other->minvolume_);
  swap(stepvolume_, other->stepvolume_);
  swap(maxexposure_, other->maxexposure_);
  swap(commission_, other->commission_);
  swap(tpdistance_, other->tpdistance_);
  swap(gsldistance_, other->gsldistance_);
  swap(gslcharge_, other->gslcharge_);
  swap(mincommission_, other->mincommission_);
  swap(rollovercommission_, other->rollovercommission_);
  swap(skiprolloverdays_, other->skiprolloverdays_);
  swap(tradingmode_, other->tradingmode_);
  swap(lotsize_, other->lotsize_);
  swap(precisetradingcommissionrate_, other->precisetradingcommissionrate_);
  swap(precisemincommission_, other->precisemincommission_);
  swap(swapcalculationtype_, other->swapcalculationtype_);
  swap(rollovercommission3days_, other->rollovercommission3days_);
  swap(swaprollover3days_, other->swaprollover3days_);
  swap(commissiontype_, other->commissiontype_);
  swap(distancesetin_, other->distancesetin_);
  swap(mincommissiontype_, other->mincommissiontype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOASymbol::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_OpenApiModelMessages_2eproto);
  return ::file_level_metadata_OpenApiModelMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProtoOALightSymbol::InitAsDefaultInstance() {
}
class ProtoOALightSymbol::HasBitSetters {
 public:
  static void set_has_symbolid(ProtoOALightSymbol* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_symbolname(ProtoOALightSymbol* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_enabled(ProtoOALightSymbol* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_baseassetid(ProtoOALightSymbol* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_quoteassetid(ProtoOALightSymbol* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_symbolcategoryid(ProtoOALightSymbol* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_description(ProtoOALightSymbol* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoOALightSymbol::kSymbolIdFieldNumber;
const int ProtoOALightSymbol::kSymbolNameFieldNumber;
const int ProtoOALightSymbol::kEnabledFieldNumber;
const int ProtoOALightSymbol::kBaseAssetIdFieldNumber;
const int ProtoOALightSymbol::kQuoteAssetIdFieldNumber;
const int ProtoOALightSymbol::kSymbolCategoryIdFieldNumber;
const int ProtoOALightSymbol::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoOALightSymbol::ProtoOALightSymbol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOALightSymbol)
}
ProtoOALightSymbol::ProtoOALightSymbol(const ProtoOALightSymbol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbolname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_symbolname()) {
    symbolname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.symbolname_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(enabled_));
  // @@protoc_insertion_point(copy_constructor:ProtoOALightSymbol)
}

void ProtoOALightSymbol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ProtoOALightSymbol_OpenApiModelMessages_2eproto.base);
  symbolname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(enabled_));
}

ProtoOALightSymbol::~ProtoOALightSymbol() {
  // @@protoc_insertion_point(destructor:ProtoOALightSymbol)
  SharedDtor();
}

void ProtoOALightSymbol::SharedDtor() {
  symbolname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProtoOALightSymbol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOALightSymbol& ProtoOALightSymbol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOALightSymbol_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOALightSymbol::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOALightSymbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      symbolname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&symbolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enabled_) -
        reinterpret_cast<char*>(&symbolid_)) + sizeof(enabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProtoOALightSymbol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int64 symbolId = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        set_symbolid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string symbolName = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_symbolname(), ptr, ctx, "ProtoOALightSymbol.symbolName");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool enabled = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 24) goto handle_unusual;
        set_enabled(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int64 baseAssetId = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 32) goto handle_unusual;
        set_baseassetid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int64 quoteAssetId = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 40) goto handle_unusual;
        set_quoteassetid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int64 symbolCategoryId = 6;
      case 6: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 48) goto handle_unusual;
        set_symbolcategoryid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string description = 7;
      case 7: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_description(), ptr, ctx, "ProtoOALightSymbol.description");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProtoOALightSymbol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOALightSymbol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 symbolId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_symbolid(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string symbolName = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_symbolname()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbolname().data(), static_cast<int>(this->symbolname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "ProtoOALightSymbol.symbolName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enabled = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_enabled(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 baseAssetId = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_baseassetid(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &baseassetid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 quoteAssetId = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_quoteassetid(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &quoteassetid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 symbolCategoryId = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_symbolcategoryid(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &symbolcategoryid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "ProtoOALightSymbol.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOALightSymbol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOALightSymbol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProtoOALightSymbol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOALightSymbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 symbolId = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->symbolid(), output);
  }

  // optional string symbolName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbolname().data(), static_cast<int>(this->symbolname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOALightSymbol.symbolName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->symbolname(), output);
  }

  // optional bool enabled = 3;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->enabled(), output);
  }

  // optional int64 baseAssetId = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->baseassetid(), output);
  }

  // optional int64 quoteAssetId = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->quoteassetid(), output);
  }

  // optional int64 symbolCategoryId = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->symbolcategoryid(), output);
  }

  // optional string description = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOALightSymbol.description");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->description(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOALightSymbol)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOALightSymbol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOALightSymbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 symbolId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->symbolid(), target);
  }

  // optional string symbolName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbolname().data(), static_cast<int>(this->symbolname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOALightSymbol.symbolName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->symbolname(), target);
  }

  // optional bool enabled = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->enabled(), target);
  }

  // optional int64 baseAssetId = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->baseassetid(), target);
  }

  // optional int64 quoteAssetId = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->quoteassetid(), target);
  }

  // optional int64 symbolCategoryId = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->symbolcategoryid(), target);
  }

  // optional string description = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOALightSymbol.description");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->description(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOALightSymbol)
  return target;
}

size_t ProtoOALightSymbol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOALightSymbol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 symbolId = 1;
  if (has_symbolid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->symbolid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string symbolName = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->symbolname());
    }

    // optional string description = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  if (cached_has_bits & 0x00000078u) {
    // optional int64 baseAssetId = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->baseassetid());
    }

    // optional int64 quoteAssetId = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->quoteassetid());
    }

    // optional int64 symbolCategoryId = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->symbolcategoryid());
    }

    // optional bool enabled = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOALightSymbol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOALightSymbol)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOALightSymbol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOALightSymbol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOALightSymbol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOALightSymbol)
    MergeFrom(*source);
  }
}

void ProtoOALightSymbol::MergeFrom(const ProtoOALightSymbol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOALightSymbol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      symbolname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.symbolname_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000008u) {
      baseassetid_ = from.baseassetid_;
    }
    if (cached_has_bits & 0x00000010u) {
      quoteassetid_ = from.quoteassetid_;
    }
    if (cached_has_bits & 0x00000020u) {
      symbolcategoryid_ = from.symbolcategoryid_;
    }
    if (cached_has_bits & 0x00000040u) {
      enabled_ = from.enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOALightSymbol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOALightSymbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOALightSymbol::CopyFrom(const ProtoOALightSymbol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOALightSymbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOALightSymbol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void ProtoOALightSymbol::Swap(ProtoOALightSymbol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoOALightSymbol::InternalSwap(ProtoOALightSymbol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  symbolname_.Swap(&other->symbolname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(symbolid_, other->symbolid_);
  swap(baseassetid_, other->baseassetid_);
  swap(quoteassetid_, other->quoteassetid_);
  swap(symbolcategoryid_, other->symbolcategoryid_);
  swap(enabled_, other->enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOALightSymbol::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_OpenApiModelMessages_2eproto);
  return ::file_level_metadata_OpenApiModelMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProtoOAArchivedSymbol::InitAsDefaultInstance() {
}
class ProtoOAArchivedSymbol::HasBitSetters {
 public:
  static void set_has_symbolid(ProtoOAArchivedSymbol* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_name(ProtoOAArchivedSymbol* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_utclastupdatetimestamp(ProtoOAArchivedSymbol* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_description(ProtoOAArchivedSymbol* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoOAArchivedSymbol::kSymbolIdFieldNumber;
const int ProtoOAArchivedSymbol::kNameFieldNumber;
const int ProtoOAArchivedSymbol::kUtcLastUpdateTimestampFieldNumber;
const int ProtoOAArchivedSymbol::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoOAArchivedSymbol::ProtoOAArchivedSymbol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOAArchivedSymbol)
}
ProtoOAArchivedSymbol::ProtoOAArchivedSymbol(const ProtoOAArchivedSymbol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&utclastupdatetimestamp_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(utclastupdatetimestamp_));
  // @@protoc_insertion_point(copy_constructor:ProtoOAArchivedSymbol)
}

void ProtoOAArchivedSymbol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ProtoOAArchivedSymbol_OpenApiModelMessages_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&utclastupdatetimestamp_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(utclastupdatetimestamp_));
}

ProtoOAArchivedSymbol::~ProtoOAArchivedSymbol() {
  // @@protoc_insertion_point(destructor:ProtoOAArchivedSymbol)
  SharedDtor();
}

void ProtoOAArchivedSymbol::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProtoOAArchivedSymbol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOAArchivedSymbol& ProtoOAArchivedSymbol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOAArchivedSymbol_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOAArchivedSymbol::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOAArchivedSymbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&symbolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&utclastupdatetimestamp_) -
        reinterpret_cast<char*>(&symbolid_)) + sizeof(utclastupdatetimestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProtoOAArchivedSymbol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int64 symbolId = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        set_symbolid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required string name = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "ProtoOAArchivedSymbol.name");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 utcLastUpdateTimestamp = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 24) goto handle_unusual;
        set_utclastupdatetimestamp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string description = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_description(), ptr, ctx, "ProtoOAArchivedSymbol.description");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProtoOAArchivedSymbol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOAArchivedSymbol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 symbolId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_symbolid(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "ProtoOAArchivedSymbol.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 utcLastUpdateTimestamp = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_utclastupdatetimestamp(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &utclastupdatetimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "ProtoOAArchivedSymbol.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOAArchivedSymbol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOAArchivedSymbol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProtoOAArchivedSymbol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOAArchivedSymbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 symbolId = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->symbolid(), output);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOAArchivedSymbol.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required int64 utcLastUpdateTimestamp = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->utclastupdatetimestamp(), output);
  }

  // optional string description = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOAArchivedSymbol.description");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOAArchivedSymbol)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOAArchivedSymbol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOAArchivedSymbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 symbolId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->symbolid(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOAArchivedSymbol.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int64 utcLastUpdateTimestamp = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->utclastupdatetimestamp(), target);
  }

  // optional string description = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOAArchivedSymbol.description");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOAArchivedSymbol)
  return target;
}

size_t ProtoOAArchivedSymbol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoOAArchivedSymbol)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_symbolid()) {
    // required int64 symbolId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->symbolid());
  }

  if (has_utclastupdatetimestamp()) {
    // required int64 utcLastUpdateTimestamp = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->utclastupdatetimestamp());
  }

  return total_size;
}
size_t ProtoOAArchivedSymbol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOAArchivedSymbol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());

    // required int64 symbolId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->symbolid());

    // required int64 utcLastUpdateTimestamp = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->utclastupdatetimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string description = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->description());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOAArchivedSymbol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOAArchivedSymbol)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOAArchivedSymbol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOAArchivedSymbol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOAArchivedSymbol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOAArchivedSymbol)
    MergeFrom(*source);
  }
}

void ProtoOAArchivedSymbol::MergeFrom(const ProtoOAArchivedSymbol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOAArchivedSymbol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000008u) {
      utclastupdatetimestamp_ = from.utclastupdatetimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOAArchivedSymbol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOAArchivedSymbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOAArchivedSymbol::CopyFrom(const ProtoOAArchivedSymbol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOAArchivedSymbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOAArchivedSymbol::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  return true;
}

void ProtoOAArchivedSymbol::Swap(ProtoOAArchivedSymbol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoOAArchivedSymbol::InternalSwap(ProtoOAArchivedSymbol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(symbolid_, other->symbolid_);
  swap(utclastupdatetimestamp_, other->utclastupdatetimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOAArchivedSymbol::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_OpenApiModelMessages_2eproto);
  return ::file_level_metadata_OpenApiModelMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProtoOASymbolCategory::InitAsDefaultInstance() {
}
class ProtoOASymbolCategory::HasBitSetters {
 public:
  static void set_has_id(ProtoOASymbolCategory* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_assetclassid(ProtoOASymbolCategory* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_name(ProtoOASymbolCategory* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoOASymbolCategory::kIdFieldNumber;
const int ProtoOASymbolCategory::kAssetClassIdFieldNumber;
const int ProtoOASymbolCategory::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoOASymbolCategory::ProtoOASymbolCategory()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOASymbolCategory)
}
ProtoOASymbolCategory::ProtoOASymbolCategory(const ProtoOASymbolCategory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&assetclassid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(assetclassid_));
  // @@protoc_insertion_point(copy_constructor:ProtoOASymbolCategory)
}

void ProtoOASymbolCategory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ProtoOASymbolCategory_OpenApiModelMessages_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&assetclassid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(assetclassid_));
}

ProtoOASymbolCategory::~ProtoOASymbolCategory() {
  // @@protoc_insertion_point(destructor:ProtoOASymbolCategory)
  SharedDtor();
}

void ProtoOASymbolCategory::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProtoOASymbolCategory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOASymbolCategory& ProtoOASymbolCategory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOASymbolCategory_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOASymbolCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOASymbolCategory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&assetclassid_) -
        reinterpret_cast<char*>(&id_)) + sizeof(assetclassid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProtoOASymbolCategory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int64 id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        set_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 assetClassId = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 16) goto handle_unusual;
        set_assetclassid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required string name = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "ProtoOASymbolCategory.name");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProtoOASymbolCategory::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOASymbolCategory)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 assetClassId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_assetclassid(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &assetclassid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "ProtoOASymbolCategory.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOASymbolCategory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOASymbolCategory)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProtoOASymbolCategory::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOASymbolCategory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required int64 assetClassId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->assetclassid(), output);
  }

  // required string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOASymbolCategory.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOASymbolCategory)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOASymbolCategory::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOASymbolCategory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required int64 assetClassId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->assetclassid(), target);
  }

  // required string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOASymbolCategory.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOASymbolCategory)
  return target;
}

size_t ProtoOASymbolCategory::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoOASymbolCategory)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_id()) {
    // required int64 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->id());
  }

  if (has_assetclassid()) {
    // required int64 assetClassId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->assetclassid());
  }

  return total_size;
}
size_t ProtoOASymbolCategory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOASymbolCategory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());

    // required int64 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->id());

    // required int64 assetClassId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->assetclassid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOASymbolCategory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOASymbolCategory)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOASymbolCategory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOASymbolCategory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOASymbolCategory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOASymbolCategory)
    MergeFrom(*source);
  }
}

void ProtoOASymbolCategory::MergeFrom(const ProtoOASymbolCategory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOASymbolCategory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      assetclassid_ = from.assetclassid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOASymbolCategory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOASymbolCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOASymbolCategory::CopyFrom(const ProtoOASymbolCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOASymbolCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOASymbolCategory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ProtoOASymbolCategory::Swap(ProtoOASymbolCategory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoOASymbolCategory::InternalSwap(ProtoOASymbolCategory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(assetclassid_, other->assetclassid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOASymbolCategory::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_OpenApiModelMessages_2eproto);
  return ::file_level_metadata_OpenApiModelMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProtoOAInterval::InitAsDefaultInstance() {
}
class ProtoOAInterval::HasBitSetters {
 public:
  static void set_has_startsecond(ProtoOAInterval* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_endsecond(ProtoOAInterval* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoOAInterval::kStartSecondFieldNumber;
const int ProtoOAInterval::kEndSecondFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoOAInterval::ProtoOAInterval()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOAInterval)
}
ProtoOAInterval::ProtoOAInterval(const ProtoOAInterval& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&startsecond_, &from.startsecond_,
    static_cast<size_t>(reinterpret_cast<char*>(&endsecond_) -
    reinterpret_cast<char*>(&startsecond_)) + sizeof(endsecond_));
  // @@protoc_insertion_point(copy_constructor:ProtoOAInterval)
}

void ProtoOAInterval::SharedCtor() {
  ::memset(&startsecond_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endsecond_) -
      reinterpret_cast<char*>(&startsecond_)) + sizeof(endsecond_));
}

ProtoOAInterval::~ProtoOAInterval() {
  // @@protoc_insertion_point(destructor:ProtoOAInterval)
  SharedDtor();
}

void ProtoOAInterval::SharedDtor() {
}

void ProtoOAInterval::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOAInterval& ProtoOAInterval::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOAInterval_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOAInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOAInterval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&startsecond_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&endsecond_) -
        reinterpret_cast<char*>(&startsecond_)) + sizeof(endsecond_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProtoOAInterval::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 startSecond = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 24) goto handle_unusual;
        set_startsecond(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 endSecond = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 32) goto handle_unusual;
        set_endsecond(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProtoOAInterval::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOAInterval)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 startSecond = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_startsecond(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startsecond_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 endSecond = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_endsecond(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endsecond_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOAInterval)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOAInterval)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProtoOAInterval::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOAInterval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 startSecond = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->startsecond(), output);
  }

  // required uint32 endSecond = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->endsecond(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOAInterval)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOAInterval::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOAInterval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 startSecond = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->startsecond(), target);
  }

  // required uint32 endSecond = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->endsecond(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOAInterval)
  return target;
}

size_t ProtoOAInterval::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoOAInterval)
  size_t total_size = 0;

  if (has_startsecond()) {
    // required uint32 startSecond = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->startsecond());
  }

  if (has_endsecond()) {
    // required uint32 endSecond = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->endsecond());
  }

  return total_size;
}
size_t ProtoOAInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOAInterval)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 startSecond = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->startsecond());

    // required uint32 endSecond = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->endsecond());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOAInterval::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOAInterval)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOAInterval* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOAInterval>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOAInterval)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOAInterval)
    MergeFrom(*source);
  }
}

void ProtoOAInterval::MergeFrom(const ProtoOAInterval& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOAInterval)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      startsecond_ = from.startsecond_;
    }
    if (cached_has_bits & 0x00000002u) {
      endsecond_ = from.endsecond_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOAInterval::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOAInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOAInterval::CopyFrom(const ProtoOAInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOAInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOAInterval::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ProtoOAInterval::Swap(ProtoOAInterval* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoOAInterval::InternalSwap(ProtoOAInterval* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(startsecond_, other->startsecond_);
  swap(endsecond_, other->endsecond_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOAInterval::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_OpenApiModelMessages_2eproto);
  return ::file_level_metadata_OpenApiModelMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProtoOATrader::InitAsDefaultInstance() {
}
class ProtoOATrader::HasBitSetters {
 public:
  static void set_has_ctidtraderaccountid(ProtoOATrader* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_balance(ProtoOATrader* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_balanceversion(ProtoOATrader* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_managerbonus(ProtoOATrader* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_ibbonus(ProtoOATrader* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_nonwithdrawablebonus(ProtoOATrader* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_accessrights(ProtoOATrader* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_depositassetid(ProtoOATrader* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_swapfree(ProtoOATrader* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_leverageincents(ProtoOATrader* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_totalmargincalculationtype(ProtoOATrader* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_maxleverage(ProtoOATrader* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_frenchrisk(ProtoOATrader* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_traderlogin(ProtoOATrader* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_accounttype(ProtoOATrader* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_brokername(ProtoOATrader* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_registrationtimestamp(ProtoOATrader* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_islimitedrisk(ProtoOATrader* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_limitedriskmargincalculationstrategy(ProtoOATrader* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_moneydigits(ProtoOATrader* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoOATrader::kCtidTraderAccountIdFieldNumber;
const int ProtoOATrader::kBalanceFieldNumber;
const int ProtoOATrader::kBalanceVersionFieldNumber;
const int ProtoOATrader::kManagerBonusFieldNumber;
const int ProtoOATrader::kIbBonusFieldNumber;
const int ProtoOATrader::kNonWithdrawableBonusFieldNumber;
const int ProtoOATrader::kAccessRightsFieldNumber;
const int ProtoOATrader::kDepositAssetIdFieldNumber;
const int ProtoOATrader::kSwapFreeFieldNumber;
const int ProtoOATrader::kLeverageInCentsFieldNumber;
const int ProtoOATrader::kTotalMarginCalculationTypeFieldNumber;
const int ProtoOATrader::kMaxLeverageFieldNumber;
const int ProtoOATrader::kFrenchRiskFieldNumber;
const int ProtoOATrader::kTraderLoginFieldNumber;
const int ProtoOATrader::kAccountTypeFieldNumber;
const int ProtoOATrader::kBrokerNameFieldNumber;
const int ProtoOATrader::kRegistrationTimestampFieldNumber;
const int ProtoOATrader::kIsLimitedRiskFieldNumber;
const int ProtoOATrader::kLimitedRiskMarginCalculationStrategyFieldNumber;
const int ProtoOATrader::kMoneyDigitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoOATrader::ProtoOATrader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOATrader)
}
ProtoOATrader::ProtoOATrader(const ProtoOATrader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  brokername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_brokername()) {
    brokername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.brokername_);
  }
  ::memcpy(&ctidtraderaccountid_, &from.ctidtraderaccountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&moneydigits_) -
    reinterpret_cast<char*>(&ctidtraderaccountid_)) + sizeof(moneydigits_));
  // @@protoc_insertion_point(copy_constructor:ProtoOATrader)
}

void ProtoOATrader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ProtoOATrader_OpenApiModelMessages_2eproto.base);
  brokername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ctidtraderaccountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&moneydigits_) -
      reinterpret_cast<char*>(&ctidtraderaccountid_)) + sizeof(moneydigits_));
}

ProtoOATrader::~ProtoOATrader() {
  // @@protoc_insertion_point(destructor:ProtoOATrader)
  SharedDtor();
}

void ProtoOATrader::SharedDtor() {
  brokername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProtoOATrader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOATrader& ProtoOATrader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOATrader_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOATrader::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOATrader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    brokername_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&ctidtraderaccountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&depositassetid_) -
        reinterpret_cast<char*>(&ctidtraderaccountid_)) + sizeof(depositassetid_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&accessrights_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&accounttype_) -
        reinterpret_cast<char*>(&accessrights_)) + sizeof(accounttype_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&traderlogin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&moneydigits_) -
        reinterpret_cast<char*>(&traderlogin_)) + sizeof(moneydigits_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProtoOATrader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int64 ctidTraderAccountId = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        set_ctidtraderaccountid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 balance = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 16) goto handle_unusual;
        set_balance(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int64 balanceVersion = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 24) goto handle_unusual;
        set_balanceversion(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int64 managerBonus = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 32) goto handle_unusual;
        set_managerbonus(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int64 ibBonus = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 40) goto handle_unusual;
        set_ibbonus(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int64 nonWithdrawableBonus = 6;
      case 6: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 48) goto handle_unusual;
        set_nonwithdrawablebonus(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .ProtoOAAccessRights accessRights = 7 [default = FULL_ACCESS];
      case 7: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 56) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        if (!::ProtoOAAccessRights_IsValid(val)) {
          ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          break;
        }
        set_accessrights(static_cast<::ProtoOAAccessRights>(val));
        break;
      }
      // required int64 depositAssetId = 8;
      case 8: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 64) goto handle_unusual;
        set_depositassetid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool swapFree = 9;
      case 9: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 72) goto handle_unusual;
        set_swapfree(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 leverageInCents = 10;
      case 10: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 80) goto handle_unusual;
        set_leverageincents(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .ProtoOATotalMarginCalculationType totalMarginCalculationType = 11;
      case 11: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 88) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        if (!::ProtoOATotalMarginCalculationType_IsValid(val)) {
          ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          break;
        }
        set_totalmargincalculationtype(static_cast<::ProtoOATotalMarginCalculationType>(val));
        break;
      }
      // optional uint32 maxLeverage = 12;
      case 12: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 96) goto handle_unusual;
        set_maxleverage(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool frenchRisk = 13 [deprecated = true];
      case 13: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 104) goto handle_unusual;
        set_frenchrisk(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int64 traderLogin = 14;
      case 14: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 112) goto handle_unusual;
        set_traderlogin(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .ProtoOAAccountType accountType = 15 [default = HEDGED];
      case 15: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 120) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        if (!::ProtoOAAccountType_IsValid(val)) {
          ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
          break;
        }
        set_accounttype(static_cast<::ProtoOAAccountType>(val));
        break;
      }
      // optional string brokerName = 16;
      case 16: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_brokername(), ptr, ctx, "ProtoOATrader.brokerName");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int64 registrationTimestamp = 17;
      case 17: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 136) goto handle_unusual;
        set_registrationtimestamp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool isLimitedRisk = 18;
      case 18: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 144) goto handle_unusual;
        set_islimitedrisk(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .ProtoOALimitedRiskMarginCalculationStrategy limitedRiskMarginCalculationStrategy = 19 [default = ACCORDING_TO_LEVERAGE];
      case 19: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 152) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        if (!::ProtoOALimitedRiskMarginCalculationStrategy_IsValid(val)) {
          ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(19, val, mutable_unknown_fields());
          break;
        }
        set_limitedriskmargincalculationstrategy(static_cast<::ProtoOALimitedRiskMarginCalculationStrategy>(val));
        break;
      }
      // optional uint32 moneyDigits = 20;
      case 20: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 160) goto handle_unusual;
        set_moneydigits(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProtoOATrader::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOATrader)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 ctidTraderAccountId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_ctidtraderaccountid(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &ctidtraderaccountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 balance = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_balance(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 balanceVersion = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_balanceversion(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &balanceversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 managerBonus = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_managerbonus(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &managerbonus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ibBonus = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_ibbonus(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &ibbonus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 nonWithdrawableBonus = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_nonwithdrawablebonus(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &nonwithdrawablebonus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ProtoOAAccessRights accessRights = 7 [default = FULL_ACCESS];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOAAccessRights_IsValid(value)) {
            set_accessrights(static_cast< ::ProtoOAAccessRights >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 depositAssetId = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_depositassetid(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &depositassetid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool swapFree = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_swapfree(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &swapfree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 leverageInCents = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_leverageincents(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leverageincents_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ProtoOATotalMarginCalculationType totalMarginCalculationType = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOATotalMarginCalculationType_IsValid(value)) {
            set_totalmargincalculationtype(static_cast< ::ProtoOATotalMarginCalculationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                11, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 maxLeverage = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_maxleverage(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxleverage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool frenchRisk = 13 [deprecated = true];
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_frenchrisk(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &frenchrisk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 traderLogin = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_traderlogin(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &traderlogin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ProtoOAAccountType accountType = 15 [default = HEDGED];
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOAAccountType_IsValid(value)) {
            set_accounttype(static_cast< ::ProtoOAAccountType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                15, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string brokerName = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_brokername()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->brokername().data(), static_cast<int>(this->brokername().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "ProtoOATrader.brokerName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 registrationTimestamp = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_registrationtimestamp(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &registrationtimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isLimitedRisk = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          HasBitSetters::set_has_islimitedrisk(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islimitedrisk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ProtoOALimitedRiskMarginCalculationStrategy limitedRiskMarginCalculationStrategy = 19 [default = ACCORDING_TO_LEVERAGE];
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOALimitedRiskMarginCalculationStrategy_IsValid(value)) {
            set_limitedriskmargincalculationstrategy(static_cast< ::ProtoOALimitedRiskMarginCalculationStrategy >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                19, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 moneyDigits = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          HasBitSetters::set_has_moneydigits(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moneydigits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOATrader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOATrader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProtoOATrader::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOATrader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 ctidTraderAccountId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->ctidtraderaccountid(), output);
  }

  // required int64 balance = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->balance(), output);
  }

  // optional int64 balanceVersion = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->balanceversion(), output);
  }

  // optional int64 managerBonus = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->managerbonus(), output);
  }

  // optional int64 ibBonus = 5;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->ibbonus(), output);
  }

  // optional int64 nonWithdrawableBonus = 6;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->nonwithdrawablebonus(), output);
  }

  // optional .ProtoOAAccessRights accessRights = 7 [default = FULL_ACCESS];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->accessrights(), output);
  }

  // required int64 depositAssetId = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->depositassetid(), output);
  }

  // optional bool swapFree = 9;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->swapfree(), output);
  }

  // optional uint32 leverageInCents = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(10, this->leverageincents(), output);
  }

  // optional .ProtoOATotalMarginCalculationType totalMarginCalculationType = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      11, this->totalmargincalculationtype(), output);
  }

  // optional uint32 maxLeverage = 12;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(12, this->maxleverage(), output);
  }

  // optional bool frenchRisk = 13 [deprecated = true];
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(13, this->frenchrisk(), output);
  }

  // optional int64 traderLogin = 14;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(14, this->traderlogin(), output);
  }

  // optional .ProtoOAAccountType accountType = 15 [default = HEDGED];
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      15, this->accounttype(), output);
  }

  // optional string brokerName = 16;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brokername().data(), static_cast<int>(this->brokername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOATrader.brokerName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->brokername(), output);
  }

  // optional int64 registrationTimestamp = 17;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(17, this->registrationtimestamp(), output);
  }

  // optional bool isLimitedRisk = 18;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(18, this->islimitedrisk(), output);
  }

  // optional .ProtoOALimitedRiskMarginCalculationStrategy limitedRiskMarginCalculationStrategy = 19 [default = ACCORDING_TO_LEVERAGE];
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      19, this->limitedriskmargincalculationstrategy(), output);
  }

  // optional uint32 moneyDigits = 20;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(20, this->moneydigits(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOATrader)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOATrader::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOATrader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 ctidTraderAccountId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->ctidtraderaccountid(), target);
  }

  // required int64 balance = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->balance(), target);
  }

  // optional int64 balanceVersion = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->balanceversion(), target);
  }

  // optional int64 managerBonus = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->managerbonus(), target);
  }

  // optional int64 ibBonus = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->ibbonus(), target);
  }

  // optional int64 nonWithdrawableBonus = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->nonwithdrawablebonus(), target);
  }

  // optional .ProtoOAAccessRights accessRights = 7 [default = FULL_ACCESS];
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->accessrights(), target);
  }

  // required int64 depositAssetId = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->depositassetid(), target);
  }

  // optional bool swapFree = 9;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->swapfree(), target);
  }

  // optional uint32 leverageInCents = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->leverageincents(), target);
  }

  // optional .ProtoOATotalMarginCalculationType totalMarginCalculationType = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->totalmargincalculationtype(), target);
  }

  // optional uint32 maxLeverage = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->maxleverage(), target);
  }

  // optional bool frenchRisk = 13 [deprecated = true];
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->frenchrisk(), target);
  }

  // optional int64 traderLogin = 14;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->traderlogin(), target);
  }

  // optional .ProtoOAAccountType accountType = 15 [default = HEDGED];
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      15, this->accounttype(), target);
  }

  // optional string brokerName = 16;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brokername().data(), static_cast<int>(this->brokername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOATrader.brokerName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        16, this->brokername(), target);
  }

  // optional int64 registrationTimestamp = 17;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->registrationtimestamp(), target);
  }

  // optional bool isLimitedRisk = 18;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->islimitedrisk(), target);
  }

  // optional .ProtoOALimitedRiskMarginCalculationStrategy limitedRiskMarginCalculationStrategy = 19 [default = ACCORDING_TO_LEVERAGE];
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->limitedriskmargincalculationstrategy(), target);
  }

  // optional uint32 moneyDigits = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->moneydigits(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOATrader)
  return target;
}

size_t ProtoOATrader::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoOATrader)
  size_t total_size = 0;

  if (has_ctidtraderaccountid()) {
    // required int64 ctidTraderAccountId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->ctidtraderaccountid());
  }

  if (has_balance()) {
    // required int64 balance = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->balance());
  }

  if (has_depositassetid()) {
    // required int64 depositAssetId = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->depositassetid());
  }

  return total_size;
}
size_t ProtoOATrader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOATrader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000086) ^ 0x00000086) == 0) {  // All required fields are present.
    // required int64 ctidTraderAccountId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->ctidtraderaccountid());

    // required int64 balance = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->balance());

    // required int64 depositAssetId = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->depositassetid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string brokerName = 16;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->brokername());
  }

  if (cached_has_bits & 0x00000078u) {
    // optional int64 balanceVersion = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->balanceversion());
    }

    // optional int64 managerBonus = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->managerbonus());
    }

    // optional int64 ibBonus = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->ibbonus());
    }

    // optional int64 nonWithdrawableBonus = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->nonwithdrawablebonus());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .ProtoOAAccessRights accessRights = 7 [default = FULL_ACCESS];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->accessrights());
    }

    // optional uint32 leverageInCents = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->leverageincents());
    }

    // optional .ProtoOATotalMarginCalculationType totalMarginCalculationType = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->totalmargincalculationtype());
    }

    // optional uint32 maxLeverage = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->maxleverage());
    }

    // optional bool swapFree = 9;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool frenchRisk = 13 [deprecated = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool isLimitedRisk = 18;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional .ProtoOAAccountType accountType = 15 [default = HEDGED];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->accounttype());
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional int64 traderLogin = 14;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->traderlogin());
    }

    // optional int64 registrationTimestamp = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->registrationtimestamp());
    }

    // optional .ProtoOALimitedRiskMarginCalculationStrategy limitedRiskMarginCalculationStrategy = 19 [default = ACCORDING_TO_LEVERAGE];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->limitedriskmargincalculationstrategy());
    }

    // optional uint32 moneyDigits = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->moneydigits());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOATrader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOATrader)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOATrader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOATrader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOATrader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOATrader)
    MergeFrom(*source);
  }
}

void ProtoOATrader::MergeFrom(const ProtoOATrader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOATrader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      brokername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.brokername_);
    }
    if (cached_has_bits & 0x00000002u) {
      ctidtraderaccountid_ = from.ctidtraderaccountid_;
    }
    if (cached_has_bits & 0x00000004u) {
      balance_ = from.balance_;
    }
    if (cached_has_bits & 0x00000008u) {
      balanceversion_ = from.balanceversion_;
    }
    if (cached_has_bits & 0x00000010u) {
      managerbonus_ = from.managerbonus_;
    }
    if (cached_has_bits & 0x00000020u) {
      ibbonus_ = from.ibbonus_;
    }
    if (cached_has_bits & 0x00000040u) {
      nonwithdrawablebonus_ = from.nonwithdrawablebonus_;
    }
    if (cached_has_bits & 0x00000080u) {
      depositassetid_ = from.depositassetid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      accessrights_ = from.accessrights_;
    }
    if (cached_has_bits & 0x00000200u) {
      leverageincents_ = from.leverageincents_;
    }
    if (cached_has_bits & 0x00000400u) {
      totalmargincalculationtype_ = from.totalmargincalculationtype_;
    }
    if (cached_has_bits & 0x00000800u) {
      maxleverage_ = from.maxleverage_;
    }
    if (cached_has_bits & 0x00001000u) {
      swapfree_ = from.swapfree_;
    }
    if (cached_has_bits & 0x00002000u) {
      frenchrisk_ = from.frenchrisk_;
    }
    if (cached_has_bits & 0x00004000u) {
      islimitedrisk_ = from.islimitedrisk_;
    }
    if (cached_has_bits & 0x00008000u) {
      accounttype_ = from.accounttype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      traderlogin_ = from.traderlogin_;
    }
    if (cached_has_bits & 0x00020000u) {
      registrationtimestamp_ = from.registrationtimestamp_;
    }
    if (cached_has_bits & 0x00040000u) {
      limitedriskmargincalculationstrategy_ = from.limitedriskmargincalculationstrategy_;
    }
    if (cached_has_bits & 0x00080000u) {
      moneydigits_ = from.moneydigits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOATrader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOATrader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOATrader::CopyFrom(const ProtoOATrader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOATrader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOATrader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000086) != 0x00000086) return false;
  return true;
}

void ProtoOATrader::Swap(ProtoOATrader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoOATrader::InternalSwap(ProtoOATrader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  brokername_.Swap(&other->brokername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ctidtraderaccountid_, other->ctidtraderaccountid_);
  swap(balance_, other->balance_);
  swap(balanceversion_, other->balanceversion_);
  swap(managerbonus_, other->managerbonus_);
  swap(ibbonus_, other->ibbonus_);
  swap(nonwithdrawablebonus_, other->nonwithdrawablebonus_);
  swap(depositassetid_, other->depositassetid_);
  swap(accessrights_, other->accessrights_);
  swap(leverageincents_, other->leverageincents_);
  swap(totalmargincalculationtype_, other->totalmargincalculationtype_);
  swap(maxleverage_, other->maxleverage_);
  swap(swapfree_, other->swapfree_);
  swap(frenchrisk_, other->frenchrisk_);
  swap(islimitedrisk_, other->islimitedrisk_);
  swap(accounttype_, other->accounttype_);
  swap(traderlogin_, other->traderlogin_);
  swap(registrationtimestamp_, other->registrationtimestamp_);
  swap(limitedriskmargincalculationstrategy_, other->limitedriskmargincalculationstrategy_);
  swap(moneydigits_, other->moneydigits_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOATrader::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_OpenApiModelMessages_2eproto);
  return ::file_level_metadata_OpenApiModelMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProtoOAPosition::InitAsDefaultInstance() {
  ::_ProtoOAPosition_default_instance_._instance.get_mutable()->tradedata_ = const_cast< ::ProtoOATradeData*>(
      ::ProtoOATradeData::internal_default_instance());
}
class ProtoOAPosition::HasBitSetters {
 public:
  static void set_has_positionid(ProtoOAPosition* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::ProtoOATradeData& tradedata(const ProtoOAPosition* msg);
  static void set_has_tradedata(ProtoOAPosition* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_positionstatus(ProtoOAPosition* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_swap(ProtoOAPosition* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_price(ProtoOAPosition* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_stoploss(ProtoOAPosition* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_takeprofit(ProtoOAPosition* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_utclastupdatetimestamp(ProtoOAPosition* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_commission(ProtoOAPosition* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_marginrate(ProtoOAPosition* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_mirroringcommission(ProtoOAPosition* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_guaranteedstoploss(ProtoOAPosition* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_usedmargin(ProtoOAPosition* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_stoplosstriggermethod(ProtoOAPosition* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_moneydigits(ProtoOAPosition* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
};

const ::ProtoOATradeData&
ProtoOAPosition::HasBitSetters::tradedata(const ProtoOAPosition* msg) {
  return *msg->tradedata_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoOAPosition::kPositionIdFieldNumber;
const int ProtoOAPosition::kTradeDataFieldNumber;
const int ProtoOAPosition::kPositionStatusFieldNumber;
const int ProtoOAPosition::kSwapFieldNumber;
const int ProtoOAPosition::kPriceFieldNumber;
const int ProtoOAPosition::kStopLossFieldNumber;
const int ProtoOAPosition::kTakeProfitFieldNumber;
const int ProtoOAPosition::kUtcLastUpdateTimestampFieldNumber;
const int ProtoOAPosition::kCommissionFieldNumber;
const int ProtoOAPosition::kMarginRateFieldNumber;
const int ProtoOAPosition::kMirroringCommissionFieldNumber;
const int ProtoOAPosition::kGuaranteedStopLossFieldNumber;
const int ProtoOAPosition::kUsedMarginFieldNumber;
const int ProtoOAPosition::kStopLossTriggerMethodFieldNumber;
const int ProtoOAPosition::kMoneyDigitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoOAPosition::ProtoOAPosition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOAPosition)
}
ProtoOAPosition::ProtoOAPosition(const ProtoOAPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tradedata()) {
    tradedata_ = new ::ProtoOATradeData(*from.tradedata_);
  } else {
    tradedata_ = nullptr;
  }
  ::memcpy(&positionid_, &from.positionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&stoplosstriggermethod_) -
    reinterpret_cast<char*>(&positionid_)) + sizeof(stoplosstriggermethod_));
  // @@protoc_insertion_point(copy_constructor:ProtoOAPosition)
}

void ProtoOAPosition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ProtoOAPosition_OpenApiModelMessages_2eproto.base);
  ::memset(&tradedata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&moneydigits_) -
      reinterpret_cast<char*>(&tradedata_)) + sizeof(moneydigits_));
  positionstatus_ = 1;
  stoplosstriggermethod_ = 1;
}

ProtoOAPosition::~ProtoOAPosition() {
  // @@protoc_insertion_point(destructor:ProtoOAPosition)
  SharedDtor();
}

void ProtoOAPosition::SharedDtor() {
  if (this != internal_default_instance()) delete tradedata_;
}

void ProtoOAPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOAPosition& ProtoOAPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOAPosition_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOAPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOAPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(tradedata_ != nullptr);
    tradedata_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&positionid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&commission_) -
        reinterpret_cast<char*>(&positionid_)) + sizeof(commission_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&marginrate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&moneydigits_) -
        reinterpret_cast<char*>(&marginrate_)) + sizeof(moneydigits_));
    positionstatus_ = 1;
    stoplosstriggermethod_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProtoOAPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int64 positionId = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        set_positionid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .ProtoOATradeData tradeData = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_tradedata(), ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .ProtoOAPositionStatus positionStatus = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 24) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        if (!::ProtoOAPositionStatus_IsValid(val)) {
          ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          break;
        }
        set_positionstatus(static_cast<::ProtoOAPositionStatus>(val));
        break;
      }
      // required int64 swap = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 32) goto handle_unusual;
        set_swap(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double price = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 41) goto handle_unusual;
        set_price(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double stopLoss = 6;
      case 6: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 49) goto handle_unusual;
        set_stoploss(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double takeProfit = 7;
      case 7: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 57) goto handle_unusual;
        set_takeprofit(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional int64 utcLastUpdateTimestamp = 8;
      case 8: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 64) goto handle_unusual;
        set_utclastupdatetimestamp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int64 commission = 9;
      case 9: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 72) goto handle_unusual;
        set_commission(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double marginRate = 10;
      case 10: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 81) goto handle_unusual;
        set_marginrate(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional int64 mirroringCommission = 11;
      case 11: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 88) goto handle_unusual;
        set_mirroringcommission(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool guaranteedStopLoss = 12;
      case 12: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 96) goto handle_unusual;
        set_guaranteedstoploss(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 usedMargin = 13;
      case 13: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 104) goto handle_unusual;
        set_usedmargin(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .ProtoOAOrderTriggerMethod stopLossTriggerMethod = 14 [default = TRADE];
      case 14: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 112) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        if (!::ProtoOAOrderTriggerMethod_IsValid(val)) {
          ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          break;
        }
        set_stoplosstriggermethod(static_cast<::ProtoOAOrderTriggerMethod>(val));
        break;
      }
      // optional uint32 moneyDigits = 15;
      case 15: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 120) goto handle_unusual;
        set_moneydigits(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProtoOAPosition::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOAPosition)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 positionId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_positionid(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &positionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ProtoOATradeData tradeData = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tradedata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ProtoOAPositionStatus positionStatus = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOAPositionStatus_IsValid(value)) {
            set_positionstatus(static_cast< ::ProtoOAPositionStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 swap = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_swap(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &swap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double price = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {
          HasBitSetters::set_has_price(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double stopLoss = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {
          HasBitSetters::set_has_stoploss(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stoploss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double takeProfit = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {
          HasBitSetters::set_has_takeprofit(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &takeprofit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 utcLastUpdateTimestamp = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_utclastupdatetimestamp(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &utclastupdatetimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 commission = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_commission(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &commission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double marginRate = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (81 & 0xFF)) {
          HasBitSetters::set_has_marginrate(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &marginrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 mirroringCommission = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_mirroringcommission(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &mirroringcommission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool guaranteedStopLoss = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_guaranteedstoploss(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &guaranteedstoploss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 usedMargin = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_usedmargin(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &usedmargin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ProtoOAOrderTriggerMethod stopLossTriggerMethod = 14 [default = TRADE];
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOAOrderTriggerMethod_IsValid(value)) {
            set_stoplosstriggermethod(static_cast< ::ProtoOAOrderTriggerMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                14, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 moneyDigits = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_moneydigits(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moneydigits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOAPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOAPosition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProtoOAPosition::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOAPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 positionId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->positionid(), output);
  }

  // required .ProtoOATradeData tradeData = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::tradedata(this), output);
  }

  // required .ProtoOAPositionStatus positionStatus = 3;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->positionstatus(), output);
  }

  // required int64 swap = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->swap(), output);
  }

  // optional double price = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->price(), output);
  }

  // optional double stopLoss = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->stoploss(), output);
  }

  // optional double takeProfit = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->takeprofit(), output);
  }

  // optional int64 utcLastUpdateTimestamp = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->utclastupdatetimestamp(), output);
  }

  // optional int64 commission = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(9, this->commission(), output);
  }

  // optional double marginRate = 10;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(10, this->marginrate(), output);
  }

  // optional int64 mirroringCommission = 11;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(11, this->mirroringcommission(), output);
  }

  // optional bool guaranteedStopLoss = 12;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(12, this->guaranteedstoploss(), output);
  }

  // optional uint64 usedMargin = 13;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(13, this->usedmargin(), output);
  }

  // optional .ProtoOAOrderTriggerMethod stopLossTriggerMethod = 14 [default = TRADE];
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      14, this->stoplosstriggermethod(), output);
  }

  // optional uint32 moneyDigits = 15;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(15, this->moneydigits(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOAPosition)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOAPosition::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOAPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 positionId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->positionid(), target);
  }

  // required .ProtoOATradeData tradeData = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::tradedata(this), target);
  }

  // required .ProtoOAPositionStatus positionStatus = 3;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->positionstatus(), target);
  }

  // required int64 swap = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->swap(), target);
  }

  // optional double price = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->price(), target);
  }

  // optional double stopLoss = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->stoploss(), target);
  }

  // optional double takeProfit = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->takeprofit(), target);
  }

  // optional int64 utcLastUpdateTimestamp = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->utclastupdatetimestamp(), target);
  }

  // optional int64 commission = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->commission(), target);
  }

  // optional double marginRate = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->marginrate(), target);
  }

  // optional int64 mirroringCommission = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->mirroringcommission(), target);
  }

  // optional bool guaranteedStopLoss = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->guaranteedstoploss(), target);
  }

  // optional uint64 usedMargin = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->usedmargin(), target);
  }

  // optional .ProtoOAOrderTriggerMethod stopLossTriggerMethod = 14 [default = TRADE];
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->stoplosstriggermethod(), target);
  }

  // optional uint32 moneyDigits = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->moneydigits(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOAPosition)
  return target;
}

size_t ProtoOAPosition::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoOAPosition)
  size_t total_size = 0;

  if (has_tradedata()) {
    // required .ProtoOATradeData tradeData = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tradedata_);
  }

  if (has_positionid()) {
    // required int64 positionId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->positionid());
  }

  if (has_swap()) {
    // required int64 swap = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->swap());
  }

  if (has_positionstatus()) {
    // required .ProtoOAPositionStatus positionStatus = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->positionstatus());
  }

  return total_size;
}
size_t ProtoOAPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOAPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00002007) ^ 0x00002007) == 0) {  // All required fields are present.
    // required .ProtoOATradeData tradeData = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tradedata_);

    // required int64 positionId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->positionid());

    // required int64 swap = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->swap());

    // required .ProtoOAPositionStatus positionStatus = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->positionstatus());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000f8u) {
    // optional double price = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double stopLoss = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double takeProfit = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional int64 utcLastUpdateTimestamp = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->utclastupdatetimestamp());
    }

    // optional int64 commission = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->commission());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional double marginRate = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional int64 mirroringCommission = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->mirroringcommission());
    }

    // optional uint64 usedMargin = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->usedmargin());
    }

    // optional bool guaranteedStopLoss = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional uint32 moneyDigits = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->moneydigits());
    }

  }
  // optional .ProtoOAOrderTriggerMethod stopLossTriggerMethod = 14 [default = TRADE];
  if (cached_has_bits & 0x00004000u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->stoplosstriggermethod());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOAPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOAPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOAPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOAPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOAPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOAPosition)
    MergeFrom(*source);
  }
}

void ProtoOAPosition::MergeFrom(const ProtoOAPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOAPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_tradedata()->::ProtoOATradeData::MergeFrom(from.tradedata());
    }
    if (cached_has_bits & 0x00000002u) {
      positionid_ = from.positionid_;
    }
    if (cached_has_bits & 0x00000004u) {
      swap_ = from.swap_;
    }
    if (cached_has_bits & 0x00000008u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000010u) {
      stoploss_ = from.stoploss_;
    }
    if (cached_has_bits & 0x00000020u) {
      takeprofit_ = from.takeprofit_;
    }
    if (cached_has_bits & 0x00000040u) {
      utclastupdatetimestamp_ = from.utclastupdatetimestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      commission_ = from.commission_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      marginrate_ = from.marginrate_;
    }
    if (cached_has_bits & 0x00000200u) {
      mirroringcommission_ = from.mirroringcommission_;
    }
    if (cached_has_bits & 0x00000400u) {
      usedmargin_ = from.usedmargin_;
    }
    if (cached_has_bits & 0x00000800u) {
      guaranteedstoploss_ = from.guaranteedstoploss_;
    }
    if (cached_has_bits & 0x00001000u) {
      moneydigits_ = from.moneydigits_;
    }
    if (cached_has_bits & 0x00002000u) {
      positionstatus_ = from.positionstatus_;
    }
    if (cached_has_bits & 0x00004000u) {
      stoplosstriggermethod_ = from.stoplosstriggermethod_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOAPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOAPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOAPosition::CopyFrom(const ProtoOAPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOAPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOAPosition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00002007) != 0x00002007) return false;
  if (has_tradedata()) {
    if (!this->tradedata_->IsInitialized()) return false;
  }
  return true;
}

void ProtoOAPosition::Swap(ProtoOAPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoOAPosition::InternalSwap(ProtoOAPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tradedata_, other->tradedata_);
  swap(positionid_, other->positionid_);
  swap(swap_, other->swap_);
  swap(price_, other->price_);
  swap(stoploss_, other->stoploss_);
  swap(takeprofit_, other->takeprofit_);
  swap(utclastupdatetimestamp_, other->utclastupdatetimestamp_);
  swap(commission_, other->commission_);
  swap(marginrate_, other->marginrate_);
  swap(mirroringcommission_, other->mirroringcommission_);
  swap(usedmargin_, other->usedmargin_);
  swap(guaranteedstoploss_, other->guaranteedstoploss_);
  swap(moneydigits_, other->moneydigits_);
  swap(positionstatus_, other->positionstatus_);
  swap(stoplosstriggermethod_, other->stoplosstriggermethod_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOAPosition::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_OpenApiModelMessages_2eproto);
  return ::file_level_metadata_OpenApiModelMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProtoOATradeData::InitAsDefaultInstance() {
}
class ProtoOATradeData::HasBitSetters {
 public:
  static void set_has_symbolid(ProtoOATradeData* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_volume(ProtoOATradeData* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_tradeside(ProtoOATradeData* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_opentimestamp(ProtoOATradeData* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_label(ProtoOATradeData* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_guaranteedstoploss(ProtoOATradeData* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_comment(ProtoOATradeData* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoOATradeData::kSymbolIdFieldNumber;
const int ProtoOATradeData::kVolumeFieldNumber;
const int ProtoOATradeData::kTradeSideFieldNumber;
const int ProtoOATradeData::kOpenTimestampFieldNumber;
const int ProtoOATradeData::kLabelFieldNumber;
const int ProtoOATradeData::kGuaranteedStopLossFieldNumber;
const int ProtoOATradeData::kCommentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoOATradeData::ProtoOATradeData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOATradeData)
}
ProtoOATradeData::ProtoOATradeData(const ProtoOATradeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_label()) {
    label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_comment()) {
    comment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tradeside_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(tradeside_));
  // @@protoc_insertion_point(copy_constructor:ProtoOATradeData)
}

void ProtoOATradeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ProtoOATradeData_OpenApiModelMessages_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&symbolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&guaranteedstoploss_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(guaranteedstoploss_));
  tradeside_ = 1;
}

ProtoOATradeData::~ProtoOATradeData() {
  // @@protoc_insertion_point(destructor:ProtoOATradeData)
  SharedDtor();
}

void ProtoOATradeData::SharedDtor() {
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProtoOATradeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOATradeData& ProtoOATradeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOATradeData_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOATradeData::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOATradeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      label_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      comment_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&symbolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&guaranteedstoploss_) -
        reinterpret_cast<char*>(&symbolid_)) + sizeof(guaranteedstoploss_));
    tradeside_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProtoOATradeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int64 symbolId = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        set_symbolid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 volume = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 16) goto handle_unusual;
        set_volume(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .ProtoOATradeSide tradeSide = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 24) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        if (!::ProtoOATradeSide_IsValid(val)) {
          ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          break;
        }
        set_tradeside(static_cast<::ProtoOATradeSide>(val));
        break;
      }
      // optional int64 openTimestamp = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 32) goto handle_unusual;
        set_opentimestamp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string label = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_label(), ptr, ctx, "ProtoOATradeData.label");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool guaranteedStopLoss = 6;
      case 6: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 48) goto handle_unusual;
        set_guaranteedstoploss(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string comment = 7;
      case 7: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_comment(), ptr, ctx, "ProtoOATradeData.comment");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProtoOATradeData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOATradeData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 symbolId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_symbolid(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 volume = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_volume(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ProtoOATradeSide tradeSide = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOATradeSide_IsValid(value)) {
            set_tradeside(static_cast< ::ProtoOATradeSide >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 openTimestamp = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_opentimestamp(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &opentimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string label = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), static_cast<int>(this->label().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "ProtoOATradeData.label");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool guaranteedStopLoss = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_guaranteedstoploss(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &guaranteedstoploss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string comment = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "ProtoOATradeData.comment");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOATradeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOATradeData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProtoOATradeData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOATradeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 symbolId = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->symbolid(), output);
  }

  // required int64 volume = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->volume(), output);
  }

  // required .ProtoOATradeSide tradeSide = 3;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->tradeside(), output);
  }

  // optional int64 openTimestamp = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->opentimestamp(), output);
  }

  // optional string label = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), static_cast<int>(this->label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOATradeData.label");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->label(), output);
  }

  // optional bool guaranteedStopLoss = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->guaranteedstoploss(), output);
  }

  // optional string comment = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOATradeData.comment");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->comment(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOATradeData)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOATradeData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOATradeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 symbolId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->symbolid(), target);
  }

  // required int64 volume = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->volume(), target);
  }

  // required .ProtoOATradeSide tradeSide = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->tradeside(), target);
  }

  // optional int64 openTimestamp = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->opentimestamp(), target);
  }

  // optional string label = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), static_cast<int>(this->label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOATradeData.label");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->label(), target);
  }

  // optional bool guaranteedStopLoss = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->guaranteedstoploss(), target);
  }

  // optional string comment = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOATradeData.comment");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->comment(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOATradeData)
  return target;
}

size_t ProtoOATradeData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoOATradeData)
  size_t total_size = 0;

  if (has_symbolid()) {
    // required int64 symbolId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->symbolid());
  }

  if (has_volume()) {
    // required int64 volume = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->volume());
  }

  if (has_tradeside()) {
    // required .ProtoOATradeSide tradeSide = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->tradeside());
  }

  return total_size;
}
size_t ProtoOATradeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOATradeData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000004c) ^ 0x0000004c) == 0) {  // All required fields are present.
    // required int64 symbolId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->symbolid());

    // required int64 volume = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->volume());

    // required .ProtoOATradeSide tradeSide = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->tradeside());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string label = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional string comment = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->comment());
    }

  }
  if (cached_has_bits & 0x00000030u) {
    // optional int64 openTimestamp = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->opentimestamp());
    }

    // optional bool guaranteedStopLoss = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOATradeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOATradeData)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOATradeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOATradeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOATradeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOATradeData)
    MergeFrom(*source);
  }
}

void ProtoOATradeData::MergeFrom(const ProtoOATradeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOATradeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      comment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comment_);
    }
    if (cached_has_bits & 0x00000004u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000008u) {
      volume_ = from.volume_;
    }
    if (cached_has_bits & 0x00000010u) {
      opentimestamp_ = from.opentimestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      guaranteedstoploss_ = from.guaranteedstoploss_;
    }
    if (cached_has_bits & 0x00000040u) {
      tradeside_ = from.tradeside_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOATradeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOATradeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOATradeData::CopyFrom(const ProtoOATradeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOATradeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOATradeData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000004c) != 0x0000004c) return false;
  return true;
}

void ProtoOATradeData::Swap(ProtoOATradeData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoOATradeData::InternalSwap(ProtoOATradeData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  comment_.Swap(&other->comment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(symbolid_, other->symbolid_);
  swap(volume_, other->volume_);
  swap(opentimestamp_, other->opentimestamp_);
  swap(guaranteedstoploss_, other->guaranteedstoploss_);
  swap(tradeside_, other->tradeside_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOATradeData::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_OpenApiModelMessages_2eproto);
  return ::file_level_metadata_OpenApiModelMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProtoOAOrder::InitAsDefaultInstance() {
  ::_ProtoOAOrder_default_instance_._instance.get_mutable()->tradedata_ = const_cast< ::ProtoOATradeData*>(
      ::ProtoOATradeData::internal_default_instance());
}
class ProtoOAOrder::HasBitSetters {
 public:
  static void set_has_orderid(ProtoOAOrder* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::ProtoOATradeData& tradedata(const ProtoOAOrder* msg);
  static void set_has_tradedata(ProtoOAOrder* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_ordertype(ProtoOAOrder* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static void set_has_orderstatus(ProtoOAOrder* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static void set_has_expirationtimestamp(ProtoOAOrder* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_executionprice(ProtoOAOrder* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_executedvolume(ProtoOAOrder* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_utclastupdatetimestamp(ProtoOAOrder* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_baseslippageprice(ProtoOAOrder* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_slippageinpoints(ProtoOAOrder* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_closingorder(ProtoOAOrder* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_limitprice(ProtoOAOrder* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_stopprice(ProtoOAOrder* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_stoploss(ProtoOAOrder* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_takeprofit(ProtoOAOrder* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_clientorderid(ProtoOAOrder* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_timeinforce(ProtoOAOrder* msg) {
    msg->_has_bits_[0] |= 0x00200000u;
  }
  static void set_has_positionid(ProtoOAOrder* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_relativestoploss(ProtoOAOrder* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_relativetakeprofit(ProtoOAOrder* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_isstopout(ProtoOAOrder* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_trailingstoploss(ProtoOAOrder* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_stoptriggermethod(ProtoOAOrder* msg) {
    msg->_has_bits_[0] |= 0x00400000u;
  }
};

const ::ProtoOATradeData&
ProtoOAOrder::HasBitSetters::tradedata(const ProtoOAOrder* msg) {
  return *msg->tradedata_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoOAOrder::kOrderIdFieldNumber;
const int ProtoOAOrder::kTradeDataFieldNumber;
const int ProtoOAOrder::kOrderTypeFieldNumber;
const int ProtoOAOrder::kOrderStatusFieldNumber;
const int ProtoOAOrder::kExpirationTimestampFieldNumber;
const int ProtoOAOrder::kExecutionPriceFieldNumber;
const int ProtoOAOrder::kExecutedVolumeFieldNumber;
const int ProtoOAOrder::kUtcLastUpdateTimestampFieldNumber;
const int ProtoOAOrder::kBaseSlippagePriceFieldNumber;
const int ProtoOAOrder::kSlippageInPointsFieldNumber;
const int ProtoOAOrder::kClosingOrderFieldNumber;
const int ProtoOAOrder::kLimitPriceFieldNumber;
const int ProtoOAOrder::kStopPriceFieldNumber;
const int ProtoOAOrder::kStopLossFieldNumber;
const int ProtoOAOrder::kTakeProfitFieldNumber;
const int ProtoOAOrder::kClientOrderIdFieldNumber;
const int ProtoOAOrder::kTimeInForceFieldNumber;
const int ProtoOAOrder::kPositionIdFieldNumber;
const int ProtoOAOrder::kRelativeStopLossFieldNumber;
const int ProtoOAOrder::kRelativeTakeProfitFieldNumber;
const int ProtoOAOrder::kIsStopOutFieldNumber;
const int ProtoOAOrder::kTrailingStopLossFieldNumber;
const int ProtoOAOrder::kStopTriggerMethodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoOAOrder::ProtoOAOrder()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOAOrder)
}
ProtoOAOrder::ProtoOAOrder(const ProtoOAOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientorderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientorderid()) {
    clientorderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clientorderid_);
  }
  if (from.has_tradedata()) {
    tradedata_ = new ::ProtoOATradeData(*from.tradedata_);
  } else {
    tradedata_ = nullptr;
  }
  ::memcpy(&orderid_, &from.orderid_,
    static_cast<size_t>(reinterpret_cast<char*>(&stoptriggermethod_) -
    reinterpret_cast<char*>(&orderid_)) + sizeof(stoptriggermethod_));
  // @@protoc_insertion_point(copy_constructor:ProtoOAOrder)
}

void ProtoOAOrder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ProtoOAOrder_OpenApiModelMessages_2eproto.base);
  clientorderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tradedata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trailingstoploss_) -
      reinterpret_cast<char*>(&tradedata_)) + sizeof(trailingstoploss_));
  ordertype_ = 1;
  orderstatus_ = 1;
  timeinforce_ = 3;
  stoptriggermethod_ = 1;
}

ProtoOAOrder::~ProtoOAOrder() {
  // @@protoc_insertion_point(destructor:ProtoOAOrder)
  SharedDtor();
}

void ProtoOAOrder::SharedDtor() {
  clientorderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tradedata_;
}

void ProtoOAOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOAOrder& ProtoOAOrder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOAOrder_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOAOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOAOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      clientorderid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tradedata_ != nullptr);
      tradedata_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&orderid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&baseslippageprice_) -
        reinterpret_cast<char*>(&orderid_)) + sizeof(baseslippageprice_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&slippageinpoints_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&relativetakeprofit_) -
        reinterpret_cast<char*>(&slippageinpoints_)) + sizeof(relativetakeprofit_));
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&closingorder_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trailingstoploss_) -
        reinterpret_cast<char*>(&closingorder_)) + sizeof(trailingstoploss_));
    ordertype_ = 1;
    orderstatus_ = 1;
    timeinforce_ = 3;
    stoptriggermethod_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProtoOAOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int64 orderId = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        set_orderid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .ProtoOATradeData tradeData = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_tradedata(), ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .ProtoOAOrderType orderType = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 24) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        if (!::ProtoOAOrderType_IsValid(val)) {
          ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          break;
        }
        set_ordertype(static_cast<::ProtoOAOrderType>(val));
        break;
      }
      // required .ProtoOAOrderStatus orderStatus = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 32) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        if (!::ProtoOAOrderStatus_IsValid(val)) {
          ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          break;
        }
        set_orderstatus(static_cast<::ProtoOAOrderStatus>(val));
        break;
      }
      // optional int64 expirationTimestamp = 6;
      case 6: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 48) goto handle_unusual;
        set_expirationtimestamp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double executionPrice = 7;
      case 7: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 57) goto handle_unusual;
        set_executionprice(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional int64 executedVolume = 8;
      case 8: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 64) goto handle_unusual;
        set_executedvolume(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int64 utcLastUpdateTimestamp = 9;
      case 9: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 72) goto handle_unusual;
        set_utclastupdatetimestamp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double baseSlippagePrice = 10;
      case 10: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 81) goto handle_unusual;
        set_baseslippageprice(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional int64 slippageInPoints = 11;
      case 11: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 88) goto handle_unusual;
        set_slippageinpoints(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool closingOrder = 12;
      case 12: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 96) goto handle_unusual;
        set_closingorder(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double limitPrice = 13;
      case 13: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 105) goto handle_unusual;
        set_limitprice(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double stopPrice = 14;
      case 14: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 113) goto handle_unusual;
        set_stopprice(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double stopLoss = 15;
      case 15: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 121) goto handle_unusual;
        set_stoploss(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional double takeProfit = 16;
      case 16: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 129) goto handle_unusual;
        set_takeprofit(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional string clientOrderId = 17;
      case 17: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_clientorderid(), ptr, ctx, "ProtoOAOrder.clientOrderId");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .ProtoOATimeInForce timeInForce = 18 [default = IMMEDIATE_OR_CANCEL];
      case 18: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 144) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        if (!::ProtoOATimeInForce_IsValid(val)) {
          ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(18, val, mutable_unknown_fields());
          break;
        }
        set_timeinforce(static_cast<::ProtoOATimeInForce>(val));
        break;
      }
      // optional int64 positionId = 19;
      case 19: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 152) goto handle_unusual;
        set_positionid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int64 relativeStopLoss = 20;
      case 20: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 160) goto handle_unusual;
        set_relativestoploss(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int64 relativeTakeProfit = 21;
      case 21: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 168) goto handle_unusual;
        set_relativetakeprofit(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool isStopOut = 22;
      case 22: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 176) goto handle_unusual;
        set_isstopout(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool trailingStopLoss = 23;
      case 23: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 184) goto handle_unusual;
        set_trailingstoploss(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .ProtoOAOrderTriggerMethod stopTriggerMethod = 24 [default = TRADE];
      case 24: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 192) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        if (!::ProtoOAOrderTriggerMethod_IsValid(val)) {
          ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(24, val, mutable_unknown_fields());
          break;
        }
        set_stoptriggermethod(static_cast<::ProtoOAOrderTriggerMethod>(val));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProtoOAOrder::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOAOrder)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 orderId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_orderid(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ProtoOATradeData tradeData = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tradedata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ProtoOAOrderType orderType = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOAOrderType_IsValid(value)) {
            set_ordertype(static_cast< ::ProtoOAOrderType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ProtoOAOrderStatus orderStatus = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOAOrderStatus_IsValid(value)) {
            set_orderstatus(static_cast< ::ProtoOAOrderStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 expirationTimestamp = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_expirationtimestamp(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &expirationtimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double executionPrice = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {
          HasBitSetters::set_has_executionprice(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &executionprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 executedVolume = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_executedvolume(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &executedvolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 utcLastUpdateTimestamp = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_utclastupdatetimestamp(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &utclastupdatetimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double baseSlippagePrice = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (81 & 0xFF)) {
          HasBitSetters::set_has_baseslippageprice(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &baseslippageprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 slippageInPoints = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_slippageinpoints(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &slippageinpoints_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool closingOrder = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_closingorder(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &closingorder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double limitPrice = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (105 & 0xFF)) {
          HasBitSetters::set_has_limitprice(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &limitprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double stopPrice = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (113 & 0xFF)) {
          HasBitSetters::set_has_stopprice(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stopprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double stopLoss = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (121 & 0xFF)) {
          HasBitSetters::set_has_stoploss(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stoploss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double takeProfit = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (129 & 0xFF)) {
          HasBitSetters::set_has_takeprofit(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &takeprofit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string clientOrderId = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_clientorderid()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "ProtoOAOrder.clientOrderId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ProtoOATimeInForce timeInForce = 18 [default = IMMEDIATE_OR_CANCEL];
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOATimeInForce_IsValid(value)) {
            set_timeinforce(static_cast< ::ProtoOATimeInForce >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                18, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 positionId = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          HasBitSetters::set_has_positionid(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &positionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 relativeStopLoss = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          HasBitSetters::set_has_relativestoploss(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &relativestoploss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 relativeTakeProfit = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {
          HasBitSetters::set_has_relativetakeprofit(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &relativetakeprofit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isStopOut = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {
          HasBitSetters::set_has_isstopout(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isstopout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool trailingStopLoss = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {
          HasBitSetters::set_has_trailingstoploss(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trailingstoploss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ProtoOAOrderTriggerMethod stopTriggerMethod = 24 [default = TRADE];
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOAOrderTriggerMethod_IsValid(value)) {
            set_stoptriggermethod(static_cast< ::ProtoOAOrderTriggerMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                24, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOAOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOAOrder)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProtoOAOrder::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOAOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 orderId = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->orderid(), output);
  }

  // required .ProtoOATradeData tradeData = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::tradedata(this), output);
  }

  // required .ProtoOAOrderType orderType = 3;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->ordertype(), output);
  }

  // required .ProtoOAOrderStatus orderStatus = 4;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->orderstatus(), output);
  }

  // optional int64 expirationTimestamp = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->expirationtimestamp(), output);
  }

  // optional double executionPrice = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->executionprice(), output);
  }

  // optional int64 executedVolume = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->executedvolume(), output);
  }

  // optional int64 utcLastUpdateTimestamp = 9;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(9, this->utclastupdatetimestamp(), output);
  }

  // optional double baseSlippagePrice = 10;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(10, this->baseslippageprice(), output);
  }

  // optional int64 slippageInPoints = 11;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(11, this->slippageinpoints(), output);
  }

  // optional bool closingOrder = 12;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(12, this->closingorder(), output);
  }

  // optional double limitPrice = 13;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(13, this->limitprice(), output);
  }

  // optional double stopPrice = 14;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(14, this->stopprice(), output);
  }

  // optional double stopLoss = 15;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(15, this->stoploss(), output);
  }

  // optional double takeProfit = 16;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(16, this->takeprofit(), output);
  }

  // optional string clientOrderId = 17;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOAOrder.clientOrderId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->clientorderid(), output);
  }

  // optional .ProtoOATimeInForce timeInForce = 18 [default = IMMEDIATE_OR_CANCEL];
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      18, this->timeinforce(), output);
  }

  // optional int64 positionId = 19;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(19, this->positionid(), output);
  }

  // optional int64 relativeStopLoss = 20;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(20, this->relativestoploss(), output);
  }

  // optional int64 relativeTakeProfit = 21;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(21, this->relativetakeprofit(), output);
  }

  // optional bool isStopOut = 22;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(22, this->isstopout(), output);
  }

  // optional bool trailingStopLoss = 23;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(23, this->trailingstoploss(), output);
  }

  // optional .ProtoOAOrderTriggerMethod stopTriggerMethod = 24 [default = TRADE];
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      24, this->stoptriggermethod(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOAOrder)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOAOrder::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOAOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 orderId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->orderid(), target);
  }

  // required .ProtoOATradeData tradeData = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::tradedata(this), target);
  }

  // required .ProtoOAOrderType orderType = 3;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->ordertype(), target);
  }

  // required .ProtoOAOrderStatus orderStatus = 4;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->orderstatus(), target);
  }

  // optional int64 expirationTimestamp = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->expirationtimestamp(), target);
  }

  // optional double executionPrice = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->executionprice(), target);
  }

  // optional int64 executedVolume = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->executedvolume(), target);
  }

  // optional int64 utcLastUpdateTimestamp = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->utclastupdatetimestamp(), target);
  }

  // optional double baseSlippagePrice = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->baseslippageprice(), target);
  }

  // optional int64 slippageInPoints = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->slippageinpoints(), target);
  }

  // optional bool closingOrder = 12;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->closingorder(), target);
  }

  // optional double limitPrice = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->limitprice(), target);
  }

  // optional double stopPrice = 14;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->stopprice(), target);
  }

  // optional double stopLoss = 15;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->stoploss(), target);
  }

  // optional double takeProfit = 16;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->takeprofit(), target);
  }

  // optional string clientOrderId = 17;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientorderid().data(), static_cast<int>(this->clientorderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOAOrder.clientOrderId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        17, this->clientorderid(), target);
  }

  // optional .ProtoOATimeInForce timeInForce = 18 [default = IMMEDIATE_OR_CANCEL];
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      18, this->timeinforce(), target);
  }

  // optional int64 positionId = 19;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(19, this->positionid(), target);
  }

  // optional int64 relativeStopLoss = 20;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(20, this->relativestoploss(), target);
  }

  // optional int64 relativeTakeProfit = 21;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(21, this->relativetakeprofit(), target);
  }

  // optional bool isStopOut = 22;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->isstopout(), target);
  }

  // optional bool trailingStopLoss = 23;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->trailingstoploss(), target);
  }

  // optional .ProtoOAOrderTriggerMethod stopTriggerMethod = 24 [default = TRADE];
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      24, this->stoptriggermethod(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOAOrder)
  return target;
}

size_t ProtoOAOrder::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoOAOrder)
  size_t total_size = 0;

  if (has_tradedata()) {
    // required .ProtoOATradeData tradeData = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tradedata_);
  }

  if (has_orderid()) {
    // required int64 orderId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->orderid());
  }

  if (has_ordertype()) {
    // required .ProtoOAOrderType orderType = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ordertype());
  }

  if (has_orderstatus()) {
    // required .ProtoOAOrderStatus orderStatus = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->orderstatus());
  }

  return total_size;
}
size_t ProtoOAOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOAOrder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00180006) ^ 0x00180006) == 0) {  // All required fields are present.
    // required .ProtoOATradeData tradeData = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tradedata_);

    // required int64 orderId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->orderid());

    // required .ProtoOAOrderType orderType = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ordertype());

    // required .ProtoOAOrderStatus orderStatus = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->orderstatus());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string clientOrderId = 17;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->clientorderid());
  }

  if (cached_has_bits & 0x000000f8u) {
    // optional int64 expirationTimestamp = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->expirationtimestamp());
    }

    // optional double executionPrice = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional int64 executedVolume = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->executedvolume());
    }

    // optional int64 utcLastUpdateTimestamp = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->utclastupdatetimestamp());
    }

    // optional double baseSlippagePrice = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int64 slippageInPoints = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->slippageinpoints());
    }

    // optional double limitPrice = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double stopPrice = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double stopLoss = 15;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double takeProfit = 16;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

    // optional int64 positionId = 19;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->positionid());
    }

    // optional int64 relativeStopLoss = 20;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->relativestoploss());
    }

    // optional int64 relativeTakeProfit = 21;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->relativetakeprofit());
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional bool closingOrder = 12;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional bool isStopOut = 22;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool trailingStopLoss = 23;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00600000u) {
    // optional .ProtoOATimeInForce timeInForce = 18 [default = IMMEDIATE_OR_CANCEL];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->timeinforce());
    }

    // optional .ProtoOAOrderTriggerMethod stopTriggerMethod = 24 [default = TRADE];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->stoptriggermethod());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOAOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOAOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOAOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOAOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOAOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOAOrder)
    MergeFrom(*source);
  }
}

void ProtoOAOrder::MergeFrom(const ProtoOAOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOAOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      clientorderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clientorderid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_tradedata()->::ProtoOATradeData::MergeFrom(from.tradedata());
    }
    if (cached_has_bits & 0x00000004u) {
      orderid_ = from.orderid_;
    }
    if (cached_has_bits & 0x00000008u) {
      expirationtimestamp_ = from.expirationtimestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      executionprice_ = from.executionprice_;
    }
    if (cached_has_bits & 0x00000020u) {
      executedvolume_ = from.executedvolume_;
    }
    if (cached_has_bits & 0x00000040u) {
      utclastupdatetimestamp_ = from.utclastupdatetimestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      baseslippageprice_ = from.baseslippageprice_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      slippageinpoints_ = from.slippageinpoints_;
    }
    if (cached_has_bits & 0x00000200u) {
      limitprice_ = from.limitprice_;
    }
    if (cached_has_bits & 0x00000400u) {
      stopprice_ = from.stopprice_;
    }
    if (cached_has_bits & 0x00000800u) {
      stoploss_ = from.stoploss_;
    }
    if (cached_has_bits & 0x00001000u) {
      takeprofit_ = from.takeprofit_;
    }
    if (cached_has_bits & 0x00002000u) {
      positionid_ = from.positionid_;
    }
    if (cached_has_bits & 0x00004000u) {
      relativestoploss_ = from.relativestoploss_;
    }
    if (cached_has_bits & 0x00008000u) {
      relativetakeprofit_ = from.relativetakeprofit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      closingorder_ = from.closingorder_;
    }
    if (cached_has_bits & 0x00020000u) {
      isstopout_ = from.isstopout_;
    }
    if (cached_has_bits & 0x00040000u) {
      trailingstoploss_ = from.trailingstoploss_;
    }
    if (cached_has_bits & 0x00080000u) {
      ordertype_ = from.ordertype_;
    }
    if (cached_has_bits & 0x00100000u) {
      orderstatus_ = from.orderstatus_;
    }
    if (cached_has_bits & 0x00200000u) {
      timeinforce_ = from.timeinforce_;
    }
    if (cached_has_bits & 0x00400000u) {
      stoptriggermethod_ = from.stoptriggermethod_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOAOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOAOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOAOrder::CopyFrom(const ProtoOAOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOAOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOAOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x00180006) != 0x00180006) return false;
  if (has_tradedata()) {
    if (!this->tradedata_->IsInitialized()) return false;
  }
  return true;
}

void ProtoOAOrder::Swap(ProtoOAOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoOAOrder::InternalSwap(ProtoOAOrder* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  clientorderid_.Swap(&other->clientorderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tradedata_, other->tradedata_);
  swap(orderid_, other->orderid_);
  swap(expirationtimestamp_, other->expirationtimestamp_);
  swap(executionprice_, other->executionprice_);
  swap(executedvolume_, other->executedvolume_);
  swap(utclastupdatetimestamp_, other->utclastupdatetimestamp_);
  swap(baseslippageprice_, other->baseslippageprice_);
  swap(slippageinpoints_, other->slippageinpoints_);
  swap(limitprice_, other->limitprice_);
  swap(stopprice_, other->stopprice_);
  swap(stoploss_, other->stoploss_);
  swap(takeprofit_, other->takeprofit_);
  swap(positionid_, other->positionid_);
  swap(relativestoploss_, other->relativestoploss_);
  swap(relativetakeprofit_, other->relativetakeprofit_);
  swap(closingorder_, other->closingorder_);
  swap(isstopout_, other->isstopout_);
  swap(trailingstoploss_, other->trailingstoploss_);
  swap(ordertype_, other->ordertype_);
  swap(orderstatus_, other->orderstatus_);
  swap(timeinforce_, other->timeinforce_);
  swap(stoptriggermethod_, other->stoptriggermethod_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOAOrder::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_OpenApiModelMessages_2eproto);
  return ::file_level_metadata_OpenApiModelMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProtoOABonusDepositWithdraw::InitAsDefaultInstance() {
}
class ProtoOABonusDepositWithdraw::HasBitSetters {
 public:
  static void set_has_operationtype(ProtoOABonusDepositWithdraw* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_bonushistoryid(ProtoOABonusDepositWithdraw* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_managerbonus(ProtoOABonusDepositWithdraw* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_managerdelta(ProtoOABonusDepositWithdraw* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_ibbonus(ProtoOABonusDepositWithdraw* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_ibdelta(ProtoOABonusDepositWithdraw* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_changebonustimestamp(ProtoOABonusDepositWithdraw* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_externalnote(ProtoOABonusDepositWithdraw* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_introducingbrokerid(ProtoOABonusDepositWithdraw* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_moneydigits(ProtoOABonusDepositWithdraw* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoOABonusDepositWithdraw::kOperationTypeFieldNumber;
const int ProtoOABonusDepositWithdraw::kBonusHistoryIdFieldNumber;
const int ProtoOABonusDepositWithdraw::kManagerBonusFieldNumber;
const int ProtoOABonusDepositWithdraw::kManagerDeltaFieldNumber;
const int ProtoOABonusDepositWithdraw::kIbBonusFieldNumber;
const int ProtoOABonusDepositWithdraw::kIbDeltaFieldNumber;
const int ProtoOABonusDepositWithdraw::kChangeBonusTimestampFieldNumber;
const int ProtoOABonusDepositWithdraw::kExternalNoteFieldNumber;
const int ProtoOABonusDepositWithdraw::kIntroducingBrokerIdFieldNumber;
const int ProtoOABonusDepositWithdraw::kMoneyDigitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoOABonusDepositWithdraw::ProtoOABonusDepositWithdraw()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOABonusDepositWithdraw)
}
ProtoOABonusDepositWithdraw::ProtoOABonusDepositWithdraw(const ProtoOABonusDepositWithdraw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  externalnote_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_externalnote()) {
    externalnote_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.externalnote_);
  }
  ::memcpy(&bonushistoryid_, &from.bonushistoryid_,
    static_cast<size_t>(reinterpret_cast<char*>(&introducingbrokerid_) -
    reinterpret_cast<char*>(&bonushistoryid_)) + sizeof(introducingbrokerid_));
  // @@protoc_insertion_point(copy_constructor:ProtoOABonusDepositWithdraw)
}

void ProtoOABonusDepositWithdraw::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ProtoOABonusDepositWithdraw_OpenApiModelMessages_2eproto.base);
  externalnote_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&bonushistoryid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&introducingbrokerid_) -
      reinterpret_cast<char*>(&bonushistoryid_)) + sizeof(introducingbrokerid_));
}

ProtoOABonusDepositWithdraw::~ProtoOABonusDepositWithdraw() {
  // @@protoc_insertion_point(destructor:ProtoOABonusDepositWithdraw)
  SharedDtor();
}

void ProtoOABonusDepositWithdraw::SharedDtor() {
  externalnote_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProtoOABonusDepositWithdraw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOABonusDepositWithdraw& ProtoOABonusDepositWithdraw::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOABonusDepositWithdraw_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOABonusDepositWithdraw::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOABonusDepositWithdraw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    externalnote_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&bonushistoryid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ibdelta_) -
        reinterpret_cast<char*>(&bonushistoryid_)) + sizeof(ibdelta_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&changebonustimestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&introducingbrokerid_) -
        reinterpret_cast<char*>(&changebonustimestamp_)) + sizeof(introducingbrokerid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProtoOABonusDepositWithdraw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required .ProtoOAChangeBonusType operationType = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        if (!::ProtoOAChangeBonusType_IsValid(val)) {
          ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          break;
        }
        set_operationtype(static_cast<::ProtoOAChangeBonusType>(val));
        break;
      }
      // required int64 bonusHistoryId = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 16) goto handle_unusual;
        set_bonushistoryid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 managerBonus = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 24) goto handle_unusual;
        set_managerbonus(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 managerDelta = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 32) goto handle_unusual;
        set_managerdelta(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 ibBonus = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 40) goto handle_unusual;
        set_ibbonus(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 ibDelta = 6;
      case 6: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 48) goto handle_unusual;
        set_ibdelta(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 changeBonusTimestamp = 7;
      case 7: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 56) goto handle_unusual;
        set_changebonustimestamp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string externalNote = 8;
      case 8: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_externalnote(), ptr, ctx, "ProtoOABonusDepositWithdraw.externalNote");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int64 introducingBrokerId = 9;
      case 9: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 72) goto handle_unusual;
        set_introducingbrokerid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 moneyDigits = 10;
      case 10: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 80) goto handle_unusual;
        set_moneydigits(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProtoOABonusDepositWithdraw::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOABonusDepositWithdraw)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoOAChangeBonusType operationType = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOAChangeBonusType_IsValid(value)) {
            set_operationtype(static_cast< ::ProtoOAChangeBonusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 bonusHistoryId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_bonushistoryid(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &bonushistoryid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 managerBonus = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_managerbonus(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &managerbonus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 managerDelta = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_managerdelta(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &managerdelta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 ibBonus = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_ibbonus(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &ibbonus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 ibDelta = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_ibdelta(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &ibdelta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 changeBonusTimestamp = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_changebonustimestamp(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &changebonustimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string externalNote = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_externalnote()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->externalnote().data(), static_cast<int>(this->externalnote().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "ProtoOABonusDepositWithdraw.externalNote");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 introducingBrokerId = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_introducingbrokerid(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &introducingbrokerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 moneyDigits = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_moneydigits(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moneydigits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOABonusDepositWithdraw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOABonusDepositWithdraw)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProtoOABonusDepositWithdraw::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOABonusDepositWithdraw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ProtoOAChangeBonusType operationType = 1;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->operationtype(), output);
  }

  // required int64 bonusHistoryId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->bonushistoryid(), output);
  }

  // required int64 managerBonus = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->managerbonus(), output);
  }

  // required int64 managerDelta = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->managerdelta(), output);
  }

  // required int64 ibBonus = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->ibbonus(), output);
  }

  // required int64 ibDelta = 6;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->ibdelta(), output);
  }

  // required int64 changeBonusTimestamp = 7;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->changebonustimestamp(), output);
  }

  // optional string externalNote = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->externalnote().data(), static_cast<int>(this->externalnote().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOABonusDepositWithdraw.externalNote");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->externalnote(), output);
  }

  // optional int64 introducingBrokerId = 9;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(9, this->introducingbrokerid(), output);
  }

  // optional uint32 moneyDigits = 10;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(10, this->moneydigits(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOABonusDepositWithdraw)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOABonusDepositWithdraw::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOABonusDepositWithdraw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ProtoOAChangeBonusType operationType = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->operationtype(), target);
  }

  // required int64 bonusHistoryId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->bonushistoryid(), target);
  }

  // required int64 managerBonus = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->managerbonus(), target);
  }

  // required int64 managerDelta = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->managerdelta(), target);
  }

  // required int64 ibBonus = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->ibbonus(), target);
  }

  // required int64 ibDelta = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->ibdelta(), target);
  }

  // required int64 changeBonusTimestamp = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->changebonustimestamp(), target);
  }

  // optional string externalNote = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->externalnote().data(), static_cast<int>(this->externalnote().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOABonusDepositWithdraw.externalNote");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->externalnote(), target);
  }

  // optional int64 introducingBrokerId = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->introducingbrokerid(), target);
  }

  // optional uint32 moneyDigits = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->moneydigits(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOABonusDepositWithdraw)
  return target;
}

size_t ProtoOABonusDepositWithdraw::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoOABonusDepositWithdraw)
  size_t total_size = 0;

  if (has_bonushistoryid()) {
    // required int64 bonusHistoryId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->bonushistoryid());
  }

  if (has_managerbonus()) {
    // required int64 managerBonus = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->managerbonus());
  }

  if (has_managerdelta()) {
    // required int64 managerDelta = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->managerdelta());
  }

  if (has_ibbonus()) {
    // required int64 ibBonus = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->ibbonus());
  }

  if (has_operationtype()) {
    // required .ProtoOAChangeBonusType operationType = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->operationtype());
  }

  if (has_ibdelta()) {
    // required int64 ibDelta = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->ibdelta());
  }

  if (has_changebonustimestamp()) {
    // required int64 changeBonusTimestamp = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->changebonustimestamp());
  }

  return total_size;
}
size_t ProtoOABonusDepositWithdraw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOABonusDepositWithdraw)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001be) ^ 0x000001be) == 0) {  // All required fields are present.
    // required int64 bonusHistoryId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->bonushistoryid());

    // required int64 managerBonus = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->managerbonus());

    // required int64 managerDelta = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->managerdelta());

    // required int64 ibBonus = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->ibbonus());

    // required .ProtoOAChangeBonusType operationType = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->operationtype());

    // required int64 ibDelta = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->ibdelta());

    // required int64 changeBonusTimestamp = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->changebonustimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string externalNote = 8;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->externalnote());
  }

  // optional uint32 moneyDigits = 10;
  if (cached_has_bits & 0x00000040u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->moneydigits());
  }

  // optional int64 introducingBrokerId = 9;
  if (cached_has_bits & 0x00000200u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->introducingbrokerid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOABonusDepositWithdraw::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOABonusDepositWithdraw)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOABonusDepositWithdraw* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOABonusDepositWithdraw>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOABonusDepositWithdraw)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOABonusDepositWithdraw)
    MergeFrom(*source);
  }
}

void ProtoOABonusDepositWithdraw::MergeFrom(const ProtoOABonusDepositWithdraw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOABonusDepositWithdraw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      externalnote_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.externalnote_);
    }
    if (cached_has_bits & 0x00000002u) {
      bonushistoryid_ = from.bonushistoryid_;
    }
    if (cached_has_bits & 0x00000004u) {
      managerbonus_ = from.managerbonus_;
    }
    if (cached_has_bits & 0x00000008u) {
      managerdelta_ = from.managerdelta_;
    }
    if (cached_has_bits & 0x00000010u) {
      ibbonus_ = from.ibbonus_;
    }
    if (cached_has_bits & 0x00000020u) {
      operationtype_ = from.operationtype_;
    }
    if (cached_has_bits & 0x00000040u) {
      moneydigits_ = from.moneydigits_;
    }
    if (cached_has_bits & 0x00000080u) {
      ibdelta_ = from.ibdelta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      changebonustimestamp_ = from.changebonustimestamp_;
    }
    if (cached_has_bits & 0x00000200u) {
      introducingbrokerid_ = from.introducingbrokerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOABonusDepositWithdraw::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOABonusDepositWithdraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOABonusDepositWithdraw::CopyFrom(const ProtoOABonusDepositWithdraw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOABonusDepositWithdraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOABonusDepositWithdraw::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001be) != 0x000001be) return false;
  return true;
}

void ProtoOABonusDepositWithdraw::Swap(ProtoOABonusDepositWithdraw* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoOABonusDepositWithdraw::InternalSwap(ProtoOABonusDepositWithdraw* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  externalnote_.Swap(&other->externalnote_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bonushistoryid_, other->bonushistoryid_);
  swap(managerbonus_, other->managerbonus_);
  swap(managerdelta_, other->managerdelta_);
  swap(ibbonus_, other->ibbonus_);
  swap(operationtype_, other->operationtype_);
  swap(moneydigits_, other->moneydigits_);
  swap(ibdelta_, other->ibdelta_);
  swap(changebonustimestamp_, other->changebonustimestamp_);
  swap(introducingbrokerid_, other->introducingbrokerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOABonusDepositWithdraw::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_OpenApiModelMessages_2eproto);
  return ::file_level_metadata_OpenApiModelMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProtoOADepositWithdraw::InitAsDefaultInstance() {
}
class ProtoOADepositWithdraw::HasBitSetters {
 public:
  static void set_has_operationtype(ProtoOADepositWithdraw* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_balancehistoryid(ProtoOADepositWithdraw* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_balance(ProtoOADepositWithdraw* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_delta(ProtoOADepositWithdraw* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_changebalancetimestamp(ProtoOADepositWithdraw* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_externalnote(ProtoOADepositWithdraw* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_balanceversion(ProtoOADepositWithdraw* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_equity(ProtoOADepositWithdraw* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_moneydigits(ProtoOADepositWithdraw* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoOADepositWithdraw::kOperationTypeFieldNumber;
const int ProtoOADepositWithdraw::kBalanceHistoryIdFieldNumber;
const int ProtoOADepositWithdraw::kBalanceFieldNumber;
const int ProtoOADepositWithdraw::kDeltaFieldNumber;
const int ProtoOADepositWithdraw::kChangeBalanceTimestampFieldNumber;
const int ProtoOADepositWithdraw::kExternalNoteFieldNumber;
const int ProtoOADepositWithdraw::kBalanceVersionFieldNumber;
const int ProtoOADepositWithdraw::kEquityFieldNumber;
const int ProtoOADepositWithdraw::kMoneyDigitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoOADepositWithdraw::ProtoOADepositWithdraw()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOADepositWithdraw)
}
ProtoOADepositWithdraw::ProtoOADepositWithdraw(const ProtoOADepositWithdraw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  externalnote_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_externalnote()) {
    externalnote_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.externalnote_);
  }
  ::memcpy(&balancehistoryid_, &from.balancehistoryid_,
    static_cast<size_t>(reinterpret_cast<char*>(&equity_) -
    reinterpret_cast<char*>(&balancehistoryid_)) + sizeof(equity_));
  // @@protoc_insertion_point(copy_constructor:ProtoOADepositWithdraw)
}

void ProtoOADepositWithdraw::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ProtoOADepositWithdraw_OpenApiModelMessages_2eproto.base);
  externalnote_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&balancehistoryid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&equity_) -
      reinterpret_cast<char*>(&balancehistoryid_)) + sizeof(equity_));
}

ProtoOADepositWithdraw::~ProtoOADepositWithdraw() {
  // @@protoc_insertion_point(destructor:ProtoOADepositWithdraw)
  SharedDtor();
}

void ProtoOADepositWithdraw::SharedDtor() {
  externalnote_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProtoOADepositWithdraw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOADepositWithdraw& ProtoOADepositWithdraw::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOADepositWithdraw_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOADepositWithdraw::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOADepositWithdraw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    externalnote_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&balancehistoryid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&balanceversion_) -
        reinterpret_cast<char*>(&balancehistoryid_)) + sizeof(balanceversion_));
  }
  equity_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProtoOADepositWithdraw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required .ProtoOAChangeBalanceType operationType = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        if (!::ProtoOAChangeBalanceType_IsValid(val)) {
          ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          break;
        }
        set_operationtype(static_cast<::ProtoOAChangeBalanceType>(val));
        break;
      }
      // required int64 balanceHistoryId = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 16) goto handle_unusual;
        set_balancehistoryid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 balance = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 24) goto handle_unusual;
        set_balance(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 delta = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 32) goto handle_unusual;
        set_delta(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 changeBalanceTimestamp = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 40) goto handle_unusual;
        set_changebalancetimestamp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string externalNote = 6;
      case 6: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_externalnote(), ptr, ctx, "ProtoOADepositWithdraw.externalNote");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int64 balanceVersion = 7;
      case 7: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 56) goto handle_unusual;
        set_balanceversion(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int64 equity = 8;
      case 8: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 64) goto handle_unusual;
        set_equity(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 moneyDigits = 9;
      case 9: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 72) goto handle_unusual;
        set_moneydigits(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProtoOADepositWithdraw::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOADepositWithdraw)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoOAChangeBalanceType operationType = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOAChangeBalanceType_IsValid(value)) {
            set_operationtype(static_cast< ::ProtoOAChangeBalanceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 balanceHistoryId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_balancehistoryid(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &balancehistoryid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 balance = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_balance(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 delta = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_delta(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 changeBalanceTimestamp = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_changebalancetimestamp(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &changebalancetimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string externalNote = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_externalnote()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->externalnote().data(), static_cast<int>(this->externalnote().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "ProtoOADepositWithdraw.externalNote");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 balanceVersion = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_balanceversion(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &balanceversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 equity = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_equity(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &equity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 moneyDigits = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_moneydigits(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moneydigits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOADepositWithdraw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOADepositWithdraw)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProtoOADepositWithdraw::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOADepositWithdraw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ProtoOAChangeBalanceType operationType = 1;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->operationtype(), output);
  }

  // required int64 balanceHistoryId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->balancehistoryid(), output);
  }

  // required int64 balance = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->balance(), output);
  }

  // required int64 delta = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->delta(), output);
  }

  // required int64 changeBalanceTimestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->changebalancetimestamp(), output);
  }

  // optional string externalNote = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->externalnote().data(), static_cast<int>(this->externalnote().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOADepositWithdraw.externalNote");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->externalnote(), output);
  }

  // optional int64 balanceVersion = 7;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->balanceversion(), output);
  }

  // optional int64 equity = 8;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->equity(), output);
  }

  // optional uint32 moneyDigits = 9;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(9, this->moneydigits(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOADepositWithdraw)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOADepositWithdraw::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOADepositWithdraw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ProtoOAChangeBalanceType operationType = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->operationtype(), target);
  }

  // required int64 balanceHistoryId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->balancehistoryid(), target);
  }

  // required int64 balance = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->balance(), target);
  }

  // required int64 delta = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->delta(), target);
  }

  // required int64 changeBalanceTimestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->changebalancetimestamp(), target);
  }

  // optional string externalNote = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->externalnote().data(), static_cast<int>(this->externalnote().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOADepositWithdraw.externalNote");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->externalnote(), target);
  }

  // optional int64 balanceVersion = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->balanceversion(), target);
  }

  // optional int64 equity = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->equity(), target);
  }

  // optional uint32 moneyDigits = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->moneydigits(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOADepositWithdraw)
  return target;
}

size_t ProtoOADepositWithdraw::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoOADepositWithdraw)
  size_t total_size = 0;

  if (has_balancehistoryid()) {
    // required int64 balanceHistoryId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->balancehistoryid());
  }

  if (has_balance()) {
    // required int64 balance = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->balance());
  }

  if (has_delta()) {
    // required int64 delta = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->delta());
  }

  if (has_changebalancetimestamp()) {
    // required int64 changeBalanceTimestamp = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->changebalancetimestamp());
  }

  if (has_operationtype()) {
    // required .ProtoOAChangeBalanceType operationType = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->operationtype());
  }

  return total_size;
}
size_t ProtoOADepositWithdraw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOADepositWithdraw)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003e) ^ 0x0000003e) == 0) {  // All required fields are present.
    // required int64 balanceHistoryId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->balancehistoryid());

    // required int64 balance = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->balance());

    // required int64 delta = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->delta());

    // required int64 changeBalanceTimestamp = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->changebalancetimestamp());

    // required .ProtoOAChangeBalanceType operationType = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->operationtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string externalNote = 6;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->externalnote());
  }

  if (cached_has_bits & 0x000000c0u) {
    // optional uint32 moneyDigits = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->moneydigits());
    }

    // optional int64 balanceVersion = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->balanceversion());
    }

  }
  // optional int64 equity = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->equity());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOADepositWithdraw::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOADepositWithdraw)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOADepositWithdraw* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOADepositWithdraw>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOADepositWithdraw)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOADepositWithdraw)
    MergeFrom(*source);
  }
}

void ProtoOADepositWithdraw::MergeFrom(const ProtoOADepositWithdraw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOADepositWithdraw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      externalnote_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.externalnote_);
    }
    if (cached_has_bits & 0x00000002u) {
      balancehistoryid_ = from.balancehistoryid_;
    }
    if (cached_has_bits & 0x00000004u) {
      balance_ = from.balance_;
    }
    if (cached_has_bits & 0x00000008u) {
      delta_ = from.delta_;
    }
    if (cached_has_bits & 0x00000010u) {
      changebalancetimestamp_ = from.changebalancetimestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      operationtype_ = from.operationtype_;
    }
    if (cached_has_bits & 0x00000040u) {
      moneydigits_ = from.moneydigits_;
    }
    if (cached_has_bits & 0x00000080u) {
      balanceversion_ = from.balanceversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_equity(from.equity());
  }
}

void ProtoOADepositWithdraw::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOADepositWithdraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOADepositWithdraw::CopyFrom(const ProtoOADepositWithdraw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOADepositWithdraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOADepositWithdraw::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003e) != 0x0000003e) return false;
  return true;
}

void ProtoOADepositWithdraw::Swap(ProtoOADepositWithdraw* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoOADepositWithdraw::InternalSwap(ProtoOADepositWithdraw* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  externalnote_.Swap(&other->externalnote_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(balancehistoryid_, other->balancehistoryid_);
  swap(balance_, other->balance_);
  swap(delta_, other->delta_);
  swap(changebalancetimestamp_, other->changebalancetimestamp_);
  swap(operationtype_, other->operationtype_);
  swap(moneydigits_, other->moneydigits_);
  swap(balanceversion_, other->balanceversion_);
  swap(equity_, other->equity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOADepositWithdraw::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_OpenApiModelMessages_2eproto);
  return ::file_level_metadata_OpenApiModelMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProtoOADeal::InitAsDefaultInstance() {
  ::_ProtoOADeal_default_instance_._instance.get_mutable()->closepositiondetail_ = const_cast< ::ProtoOAClosePositionDetail*>(
      ::ProtoOAClosePositionDetail::internal_default_instance());
}
class ProtoOADeal::HasBitSetters {
 public:
  static void set_has_dealid(ProtoOADeal* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_orderid(ProtoOADeal* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_positionid(ProtoOADeal* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_volume(ProtoOADeal* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_filledvolume(ProtoOADeal* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_symbolid(ProtoOADeal* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_createtimestamp(ProtoOADeal* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_executiontimestamp(ProtoOADeal* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_utclastupdatetimestamp(ProtoOADeal* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_executionprice(ProtoOADeal* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_tradeside(ProtoOADeal* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_dealstatus(ProtoOADeal* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_marginrate(ProtoOADeal* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_commission(ProtoOADeal* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_basetousdconversionrate(ProtoOADeal* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static const ::ProtoOAClosePositionDetail& closepositiondetail(const ProtoOADeal* msg);
  static void set_has_closepositiondetail(ProtoOADeal* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_moneydigits(ProtoOADeal* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
};

const ::ProtoOAClosePositionDetail&
ProtoOADeal::HasBitSetters::closepositiondetail(const ProtoOADeal* msg) {
  return *msg->closepositiondetail_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoOADeal::kDealIdFieldNumber;
const int ProtoOADeal::kOrderIdFieldNumber;
const int ProtoOADeal::kPositionIdFieldNumber;
const int ProtoOADeal::kVolumeFieldNumber;
const int ProtoOADeal::kFilledVolumeFieldNumber;
const int ProtoOADeal::kSymbolIdFieldNumber;
const int ProtoOADeal::kCreateTimestampFieldNumber;
const int ProtoOADeal::kExecutionTimestampFieldNumber;
const int ProtoOADeal::kUtcLastUpdateTimestampFieldNumber;
const int ProtoOADeal::kExecutionPriceFieldNumber;
const int ProtoOADeal::kTradeSideFieldNumber;
const int ProtoOADeal::kDealStatusFieldNumber;
const int ProtoOADeal::kMarginRateFieldNumber;
const int ProtoOADeal::kCommissionFieldNumber;
const int ProtoOADeal::kBaseToUsdConversionRateFieldNumber;
const int ProtoOADeal::kClosePositionDetailFieldNumber;
const int ProtoOADeal::kMoneyDigitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoOADeal::ProtoOADeal()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOADeal)
}
ProtoOADeal::ProtoOADeal(const ProtoOADeal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_closepositiondetail()) {
    closepositiondetail_ = new ::ProtoOAClosePositionDetail(*from.closepositiondetail_);
  } else {
    closepositiondetail_ = nullptr;
  }
  ::memcpy(&dealid_, &from.dealid_,
    static_cast<size_t>(reinterpret_cast<char*>(&dealstatus_) -
    reinterpret_cast<char*>(&dealid_)) + sizeof(dealstatus_));
  // @@protoc_insertion_point(copy_constructor:ProtoOADeal)
}

void ProtoOADeal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ProtoOADeal_OpenApiModelMessages_2eproto.base);
  ::memset(&closepositiondetail_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&moneydigits_) -
      reinterpret_cast<char*>(&closepositiondetail_)) + sizeof(moneydigits_));
  tradeside_ = 1;
  dealstatus_ = 2;
}

ProtoOADeal::~ProtoOADeal() {
  // @@protoc_insertion_point(destructor:ProtoOADeal)
  SharedDtor();
}

void ProtoOADeal::SharedDtor() {
  if (this != internal_default_instance()) delete closepositiondetail_;
}

void ProtoOADeal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOADeal& ProtoOADeal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOADeal_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOADeal::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOADeal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(closepositiondetail_ != nullptr);
    closepositiondetail_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&dealid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&createtimestamp_) -
        reinterpret_cast<char*>(&dealid_)) + sizeof(createtimestamp_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&executiontimestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&moneydigits_) -
        reinterpret_cast<char*>(&executiontimestamp_)) + sizeof(moneydigits_));
    tradeside_ = 1;
  }
  dealstatus_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProtoOADeal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int64 dealId = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        set_dealid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 orderId = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 16) goto handle_unusual;
        set_orderid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 positionId = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 24) goto handle_unusual;
        set_positionid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 volume = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 32) goto handle_unusual;
        set_volume(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 filledVolume = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 40) goto handle_unusual;
        set_filledvolume(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 symbolId = 6;
      case 6: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 48) goto handle_unusual;
        set_symbolid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 createTimestamp = 7;
      case 7: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 56) goto handle_unusual;
        set_createtimestamp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 executionTimestamp = 8;
      case 8: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 64) goto handle_unusual;
        set_executiontimestamp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int64 utcLastUpdateTimestamp = 9;
      case 9: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 72) goto handle_unusual;
        set_utclastupdatetimestamp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double executionPrice = 10;
      case 10: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 81) goto handle_unusual;
        set_executionprice(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // required .ProtoOATradeSide tradeSide = 11;
      case 11: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 88) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        if (!::ProtoOATradeSide_IsValid(val)) {
          ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          break;
        }
        set_tradeside(static_cast<::ProtoOATradeSide>(val));
        break;
      }
      // required .ProtoOADealStatus dealStatus = 12;
      case 12: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 96) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        if (!::ProtoOADealStatus_IsValid(val)) {
          ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          break;
        }
        set_dealstatus(static_cast<::ProtoOADealStatus>(val));
        break;
      }
      // optional double marginRate = 13;
      case 13: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 105) goto handle_unusual;
        set_marginrate(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional int64 commission = 14;
      case 14: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 112) goto handle_unusual;
        set_commission(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double baseToUsdConversionRate = 15;
      case 15: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 121) goto handle_unusual;
        set_basetousdconversionrate(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional .ProtoOAClosePositionDetail closePositionDetail = 16;
      case 16: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 130) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_closepositiondetail(), ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 moneyDigits = 17;
      case 17: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 136) goto handle_unusual;
        set_moneydigits(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProtoOADeal::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOADeal)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dealId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_dealid(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &dealid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 orderId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_orderid(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 positionId = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_positionid(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &positionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 volume = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_volume(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 filledVolume = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_filledvolume(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &filledvolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 symbolId = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_symbolid(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &symbolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 createTimestamp = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_createtimestamp(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 executionTimestamp = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_executiontimestamp(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &executiontimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 utcLastUpdateTimestamp = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_utclastupdatetimestamp(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &utclastupdatetimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double executionPrice = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (81 & 0xFF)) {
          HasBitSetters::set_has_executionprice(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &executionprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ProtoOATradeSide tradeSide = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOATradeSide_IsValid(value)) {
            set_tradeside(static_cast< ::ProtoOATradeSide >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                11, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ProtoOADealStatus dealStatus = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOADealStatus_IsValid(value)) {
            set_dealstatus(static_cast< ::ProtoOADealStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                12, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double marginRate = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (105 & 0xFF)) {
          HasBitSetters::set_has_marginrate(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &marginrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 commission = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_commission(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &commission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double baseToUsdConversionRate = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (121 & 0xFF)) {
          HasBitSetters::set_has_basetousdconversionrate(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &basetousdconversionrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ProtoOAClosePositionDetail closePositionDetail = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_closepositiondetail()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 moneyDigits = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_moneydigits(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moneydigits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOADeal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOADeal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProtoOADeal::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOADeal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 dealId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->dealid(), output);
  }

  // required int64 orderId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->orderid(), output);
  }

  // required int64 positionId = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->positionid(), output);
  }

  // required int64 volume = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->volume(), output);
  }

  // required int64 filledVolume = 5;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->filledvolume(), output);
  }

  // required int64 symbolId = 6;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->symbolid(), output);
  }

  // required int64 createTimestamp = 7;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->createtimestamp(), output);
  }

  // required int64 executionTimestamp = 8;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->executiontimestamp(), output);
  }

  // optional int64 utcLastUpdateTimestamp = 9;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(9, this->utclastupdatetimestamp(), output);
  }

  // optional double executionPrice = 10;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(10, this->executionprice(), output);
  }

  // required .ProtoOATradeSide tradeSide = 11;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      11, this->tradeside(), output);
  }

  // required .ProtoOADealStatus dealStatus = 12;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      12, this->dealstatus(), output);
  }

  // optional double marginRate = 13;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(13, this->marginrate(), output);
  }

  // optional int64 commission = 14;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(14, this->commission(), output);
  }

  // optional double baseToUsdConversionRate = 15;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(15, this->basetousdconversionrate(), output);
  }

  // optional .ProtoOAClosePositionDetail closePositionDetail = 16;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, HasBitSetters::closepositiondetail(this), output);
  }

  // optional uint32 moneyDigits = 17;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(17, this->moneydigits(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOADeal)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOADeal::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOADeal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 dealId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->dealid(), target);
  }

  // required int64 orderId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->orderid(), target);
  }

  // required int64 positionId = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->positionid(), target);
  }

  // required int64 volume = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->volume(), target);
  }

  // required int64 filledVolume = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->filledvolume(), target);
  }

  // required int64 symbolId = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->symbolid(), target);
  }

  // required int64 createTimestamp = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->createtimestamp(), target);
  }

  // required int64 executionTimestamp = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->executiontimestamp(), target);
  }

  // optional int64 utcLastUpdateTimestamp = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->utclastupdatetimestamp(), target);
  }

  // optional double executionPrice = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->executionprice(), target);
  }

  // required .ProtoOATradeSide tradeSide = 11;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->tradeside(), target);
  }

  // required .ProtoOADealStatus dealStatus = 12;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->dealstatus(), target);
  }

  // optional double marginRate = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->marginrate(), target);
  }

  // optional int64 commission = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->commission(), target);
  }

  // optional double baseToUsdConversionRate = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->basetousdconversionrate(), target);
  }

  // optional .ProtoOAClosePositionDetail closePositionDetail = 16;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, HasBitSetters::closepositiondetail(this), target);
  }

  // optional uint32 moneyDigits = 17;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->moneydigits(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOADeal)
  return target;
}

size_t ProtoOADeal::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoOADeal)
  size_t total_size = 0;

  if (has_dealid()) {
    // required int64 dealId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->dealid());
  }

  if (has_orderid()) {
    // required int64 orderId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->orderid());
  }

  if (has_positionid()) {
    // required int64 positionId = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->positionid());
  }

  if (has_volume()) {
    // required int64 volume = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->volume());
  }

  if (has_filledvolume()) {
    // required int64 filledVolume = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->filledvolume());
  }

  if (has_symbolid()) {
    // required int64 symbolId = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->symbolid());
  }

  if (has_createtimestamp()) {
    // required int64 createTimestamp = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->createtimestamp());
  }

  if (has_executiontimestamp()) {
    // required int64 executionTimestamp = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->executiontimestamp());
  }

  if (has_tradeside()) {
    // required .ProtoOATradeSide tradeSide = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->tradeside());
  }

  if (has_dealstatus()) {
    // required .ProtoOADealStatus dealStatus = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->dealstatus());
  }

  return total_size;
}
size_t ProtoOADeal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOADeal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000181fe) ^ 0x000181fe) == 0) {  // All required fields are present.
    // required int64 dealId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->dealid());

    // required int64 orderId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->orderid());

    // required int64 positionId = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->positionid());

    // required int64 volume = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->volume());

    // required int64 filledVolume = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->filledvolume());

    // required int64 symbolId = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->symbolid());

    // required int64 createTimestamp = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->createtimestamp());

    // required int64 executionTimestamp = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->executiontimestamp());

    // required .ProtoOATradeSide tradeSide = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->tradeside());

    // required .ProtoOADealStatus dealStatus = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->dealstatus());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ProtoOAClosePositionDetail closePositionDetail = 16;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *closepositiondetail_);
  }

  if (cached_has_bits & 0x00007e00u) {
    // optional int64 utcLastUpdateTimestamp = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->utclastupdatetimestamp());
    }

    // optional double executionPrice = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double marginRate = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional int64 commission = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->commission());
    }

    // optional double baseToUsdConversionRate = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional uint32 moneyDigits = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->moneydigits());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOADeal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOADeal)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOADeal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOADeal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOADeal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOADeal)
    MergeFrom(*source);
  }
}

void ProtoOADeal::MergeFrom(const ProtoOADeal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOADeal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_closepositiondetail()->::ProtoOAClosePositionDetail::MergeFrom(from.closepositiondetail());
    }
    if (cached_has_bits & 0x00000002u) {
      dealid_ = from.dealid_;
    }
    if (cached_has_bits & 0x00000004u) {
      orderid_ = from.orderid_;
    }
    if (cached_has_bits & 0x00000008u) {
      positionid_ = from.positionid_;
    }
    if (cached_has_bits & 0x00000010u) {
      volume_ = from.volume_;
    }
    if (cached_has_bits & 0x00000020u) {
      filledvolume_ = from.filledvolume_;
    }
    if (cached_has_bits & 0x00000040u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000080u) {
      createtimestamp_ = from.createtimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      executiontimestamp_ = from.executiontimestamp_;
    }
    if (cached_has_bits & 0x00000200u) {
      utclastupdatetimestamp_ = from.utclastupdatetimestamp_;
    }
    if (cached_has_bits & 0x00000400u) {
      executionprice_ = from.executionprice_;
    }
    if (cached_has_bits & 0x00000800u) {
      marginrate_ = from.marginrate_;
    }
    if (cached_has_bits & 0x00001000u) {
      commission_ = from.commission_;
    }
    if (cached_has_bits & 0x00002000u) {
      basetousdconversionrate_ = from.basetousdconversionrate_;
    }
    if (cached_has_bits & 0x00004000u) {
      moneydigits_ = from.moneydigits_;
    }
    if (cached_has_bits & 0x00008000u) {
      tradeside_ = from.tradeside_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_dealstatus(from.dealstatus());
  }
}

void ProtoOADeal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOADeal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOADeal::CopyFrom(const ProtoOADeal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOADeal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOADeal::IsInitialized() const {
  if ((_has_bits_[0] & 0x000181fe) != 0x000181fe) return false;
  if (has_closepositiondetail()) {
    if (!this->closepositiondetail_->IsInitialized()) return false;
  }
  return true;
}

void ProtoOADeal::Swap(ProtoOADeal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoOADeal::InternalSwap(ProtoOADeal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(closepositiondetail_, other->closepositiondetail_);
  swap(dealid_, other->dealid_);
  swap(orderid_, other->orderid_);
  swap(positionid_, other->positionid_);
  swap(volume_, other->volume_);
  swap(filledvolume_, other->filledvolume_);
  swap(symbolid_, other->symbolid_);
  swap(createtimestamp_, other->createtimestamp_);
  swap(executiontimestamp_, other->executiontimestamp_);
  swap(utclastupdatetimestamp_, other->utclastupdatetimestamp_);
  swap(executionprice_, other->executionprice_);
  swap(marginrate_, other->marginrate_);
  swap(commission_, other->commission_);
  swap(basetousdconversionrate_, other->basetousdconversionrate_);
  swap(moneydigits_, other->moneydigits_);
  swap(tradeside_, other->tradeside_);
  swap(dealstatus_, other->dealstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOADeal::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_OpenApiModelMessages_2eproto);
  return ::file_level_metadata_OpenApiModelMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProtoOAClosePositionDetail::InitAsDefaultInstance() {
}
class ProtoOAClosePositionDetail::HasBitSetters {
 public:
  static void set_has_entryprice(ProtoOAClosePositionDetail* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_grossprofit(ProtoOAClosePositionDetail* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_swap(ProtoOAClosePositionDetail* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_commission(ProtoOAClosePositionDetail* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_balance(ProtoOAClosePositionDetail* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_quotetodepositconversionrate(ProtoOAClosePositionDetail* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_closedvolume(ProtoOAClosePositionDetail* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_balanceversion(ProtoOAClosePositionDetail* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_moneydigits(ProtoOAClosePositionDetail* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoOAClosePositionDetail::kEntryPriceFieldNumber;
const int ProtoOAClosePositionDetail::kGrossProfitFieldNumber;
const int ProtoOAClosePositionDetail::kSwapFieldNumber;
const int ProtoOAClosePositionDetail::kCommissionFieldNumber;
const int ProtoOAClosePositionDetail::kBalanceFieldNumber;
const int ProtoOAClosePositionDetail::kQuoteToDepositConversionRateFieldNumber;
const int ProtoOAClosePositionDetail::kClosedVolumeFieldNumber;
const int ProtoOAClosePositionDetail::kBalanceVersionFieldNumber;
const int ProtoOAClosePositionDetail::kMoneyDigitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoOAClosePositionDetail::ProtoOAClosePositionDetail()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOAClosePositionDetail)
}
ProtoOAClosePositionDetail::ProtoOAClosePositionDetail(const ProtoOAClosePositionDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&entryprice_, &from.entryprice_,
    static_cast<size_t>(reinterpret_cast<char*>(&moneydigits_) -
    reinterpret_cast<char*>(&entryprice_)) + sizeof(moneydigits_));
  // @@protoc_insertion_point(copy_constructor:ProtoOAClosePositionDetail)
}

void ProtoOAClosePositionDetail::SharedCtor() {
  ::memset(&entryprice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&moneydigits_) -
      reinterpret_cast<char*>(&entryprice_)) + sizeof(moneydigits_));
}

ProtoOAClosePositionDetail::~ProtoOAClosePositionDetail() {
  // @@protoc_insertion_point(destructor:ProtoOAClosePositionDetail)
  SharedDtor();
}

void ProtoOAClosePositionDetail::SharedDtor() {
}

void ProtoOAClosePositionDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOAClosePositionDetail& ProtoOAClosePositionDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOAClosePositionDetail_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOAClosePositionDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOAClosePositionDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&entryprice_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&balanceversion_) -
        reinterpret_cast<char*>(&entryprice_)) + sizeof(balanceversion_));
  }
  moneydigits_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProtoOAClosePositionDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required double entryPrice = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 9) goto handle_unusual;
        set_entryprice(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // required int64 grossProfit = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 16) goto handle_unusual;
        set_grossprofit(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 swap = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 24) goto handle_unusual;
        set_swap(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 commission = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 32) goto handle_unusual;
        set_commission(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 balance = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 40) goto handle_unusual;
        set_balance(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional double quoteToDepositConversionRate = 6;
      case 6: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 49) goto handle_unusual;
        set_quotetodepositconversionrate(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional int64 closedVolume = 7;
      case 7: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 56) goto handle_unusual;
        set_closedvolume(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int64 balanceVersion = 8;
      case 8: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 64) goto handle_unusual;
        set_balanceversion(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 moneyDigits = 9;
      case 9: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 72) goto handle_unusual;
        set_moneydigits(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProtoOAClosePositionDetail::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOAClosePositionDetail)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double entryPrice = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_entryprice(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &entryprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 grossProfit = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_grossprofit(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &grossprofit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 swap = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_swap(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &swap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 commission = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_commission(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &commission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 balance = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_balance(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double quoteToDepositConversionRate = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {
          HasBitSetters::set_has_quotetodepositconversionrate(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quotetodepositconversionrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 closedVolume = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_closedvolume(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &closedvolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 balanceVersion = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_balanceversion(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &balanceversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 moneyDigits = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_moneydigits(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moneydigits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOAClosePositionDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOAClosePositionDetail)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProtoOAClosePositionDetail::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOAClosePositionDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double entryPrice = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->entryprice(), output);
  }

  // required int64 grossProfit = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->grossprofit(), output);
  }

  // required int64 swap = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->swap(), output);
  }

  // required int64 commission = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->commission(), output);
  }

  // required int64 balance = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->balance(), output);
  }

  // optional double quoteToDepositConversionRate = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->quotetodepositconversionrate(), output);
  }

  // optional int64 closedVolume = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->closedvolume(), output);
  }

  // optional int64 balanceVersion = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->balanceversion(), output);
  }

  // optional uint32 moneyDigits = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(9, this->moneydigits(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOAClosePositionDetail)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOAClosePositionDetail::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOAClosePositionDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double entryPrice = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->entryprice(), target);
  }

  // required int64 grossProfit = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->grossprofit(), target);
  }

  // required int64 swap = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->swap(), target);
  }

  // required int64 commission = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->commission(), target);
  }

  // required int64 balance = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->balance(), target);
  }

  // optional double quoteToDepositConversionRate = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->quotetodepositconversionrate(), target);
  }

  // optional int64 closedVolume = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->closedvolume(), target);
  }

  // optional int64 balanceVersion = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->balanceversion(), target);
  }

  // optional uint32 moneyDigits = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->moneydigits(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOAClosePositionDetail)
  return target;
}

size_t ProtoOAClosePositionDetail::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoOAClosePositionDetail)
  size_t total_size = 0;

  if (has_entryprice()) {
    // required double entryPrice = 1;
    total_size += 1 + 8;
  }

  if (has_grossprofit()) {
    // required int64 grossProfit = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->grossprofit());
  }

  if (has_swap()) {
    // required int64 swap = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->swap());
  }

  if (has_commission()) {
    // required int64 commission = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->commission());
  }

  if (has_balance()) {
    // required int64 balance = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->balance());
  }

  return total_size;
}
size_t ProtoOAClosePositionDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOAClosePositionDetail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required double entryPrice = 1;
    total_size += 1 + 8;

    // required int64 grossProfit = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->grossprofit());

    // required int64 swap = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->swap());

    // required int64 commission = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->commission());

    // required int64 balance = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->balance());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000e0u) {
    // optional double quoteToDepositConversionRate = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional int64 closedVolume = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->closedvolume());
    }

    // optional int64 balanceVersion = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->balanceversion());
    }

  }
  // optional uint32 moneyDigits = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->moneydigits());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOAClosePositionDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOAClosePositionDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOAClosePositionDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOAClosePositionDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOAClosePositionDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOAClosePositionDetail)
    MergeFrom(*source);
  }
}

void ProtoOAClosePositionDetail::MergeFrom(const ProtoOAClosePositionDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOAClosePositionDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      entryprice_ = from.entryprice_;
    }
    if (cached_has_bits & 0x00000002u) {
      grossprofit_ = from.grossprofit_;
    }
    if (cached_has_bits & 0x00000004u) {
      swap_ = from.swap_;
    }
    if (cached_has_bits & 0x00000008u) {
      commission_ = from.commission_;
    }
    if (cached_has_bits & 0x00000010u) {
      balance_ = from.balance_;
    }
    if (cached_has_bits & 0x00000020u) {
      quotetodepositconversionrate_ = from.quotetodepositconversionrate_;
    }
    if (cached_has_bits & 0x00000040u) {
      closedvolume_ = from.closedvolume_;
    }
    if (cached_has_bits & 0x00000080u) {
      balanceversion_ = from.balanceversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_moneydigits(from.moneydigits());
  }
}

void ProtoOAClosePositionDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOAClosePositionDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOAClosePositionDetail::CopyFrom(const ProtoOAClosePositionDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOAClosePositionDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOAClosePositionDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void ProtoOAClosePositionDetail::Swap(ProtoOAClosePositionDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoOAClosePositionDetail::InternalSwap(ProtoOAClosePositionDetail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(entryprice_, other->entryprice_);
  swap(grossprofit_, other->grossprofit_);
  swap(swap_, other->swap_);
  swap(commission_, other->commission_);
  swap(balance_, other->balance_);
  swap(quotetodepositconversionrate_, other->quotetodepositconversionrate_);
  swap(closedvolume_, other->closedvolume_);
  swap(balanceversion_, other->balanceversion_);
  swap(moneydigits_, other->moneydigits_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOAClosePositionDetail::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_OpenApiModelMessages_2eproto);
  return ::file_level_metadata_OpenApiModelMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProtoOATrendbar::InitAsDefaultInstance() {
}
class ProtoOATrendbar::HasBitSetters {
 public:
  static void set_has_volume(ProtoOATrendbar* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_period(ProtoOATrendbar* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_low(ProtoOATrendbar* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_deltaopen(ProtoOATrendbar* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_deltaclose(ProtoOATrendbar* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_deltahigh(ProtoOATrendbar* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_utctimestampinminutes(ProtoOATrendbar* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoOATrendbar::kVolumeFieldNumber;
const int ProtoOATrendbar::kPeriodFieldNumber;
const int ProtoOATrendbar::kLowFieldNumber;
const int ProtoOATrendbar::kDeltaOpenFieldNumber;
const int ProtoOATrendbar::kDeltaCloseFieldNumber;
const int ProtoOATrendbar::kDeltaHighFieldNumber;
const int ProtoOATrendbar::kUtcTimestampInMinutesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoOATrendbar::ProtoOATrendbar()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOATrendbar)
}
ProtoOATrendbar::ProtoOATrendbar(const ProtoOATrendbar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&volume_, &from.volume_,
    static_cast<size_t>(reinterpret_cast<char*>(&period_) -
    reinterpret_cast<char*>(&volume_)) + sizeof(period_));
  // @@protoc_insertion_point(copy_constructor:ProtoOATrendbar)
}

void ProtoOATrendbar::SharedCtor() {
  ::memset(&volume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&utctimestampinminutes_) -
      reinterpret_cast<char*>(&volume_)) + sizeof(utctimestampinminutes_));
  period_ = 1;
}

ProtoOATrendbar::~ProtoOATrendbar() {
  // @@protoc_insertion_point(destructor:ProtoOATrendbar)
  SharedDtor();
}

void ProtoOATrendbar::SharedDtor() {
}

void ProtoOATrendbar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOATrendbar& ProtoOATrendbar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOATrendbar_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOATrendbar::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOATrendbar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&volume_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&utctimestampinminutes_) -
        reinterpret_cast<char*>(&volume_)) + sizeof(utctimestampinminutes_));
    period_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProtoOATrendbar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int64 volume = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 24) goto handle_unusual;
        set_volume(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .ProtoOATrendbarPeriod period = 4 [default = M1];
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 32) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        if (!::ProtoOATrendbarPeriod_IsValid(val)) {
          ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          break;
        }
        set_period(static_cast<::ProtoOATrendbarPeriod>(val));
        break;
      }
      // optional int64 low = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 40) goto handle_unusual;
        set_low(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 deltaOpen = 6;
      case 6: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 48) goto handle_unusual;
        set_deltaopen(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 deltaClose = 7;
      case 7: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 56) goto handle_unusual;
        set_deltaclose(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 deltaHigh = 8;
      case 8: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 64) goto handle_unusual;
        set_deltahigh(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 utcTimestampInMinutes = 9;
      case 9: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 72) goto handle_unusual;
        set_utctimestampinminutes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProtoOATrendbar::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOATrendbar)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 volume = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_volume(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ProtoOATrendbarPeriod period = 4 [default = M1];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOATrendbarPeriod_IsValid(value)) {
            set_period(static_cast< ::ProtoOATrendbarPeriod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 low = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_low(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &low_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 deltaOpen = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_deltaopen(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &deltaopen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 deltaClose = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_deltaclose(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &deltaclose_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 deltaHigh = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_deltahigh(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &deltahigh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 utcTimestampInMinutes = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_utctimestampinminutes(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utctimestampinminutes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOATrendbar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOATrendbar)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProtoOATrendbar::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOATrendbar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 volume = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->volume(), output);
  }

  // optional .ProtoOATrendbarPeriod period = 4 [default = M1];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->period(), output);
  }

  // optional int64 low = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->low(), output);
  }

  // optional uint64 deltaOpen = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(6, this->deltaopen(), output);
  }

  // optional uint64 deltaClose = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(7, this->deltaclose(), output);
  }

  // optional uint64 deltaHigh = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(8, this->deltahigh(), output);
  }

  // optional uint32 utcTimestampInMinutes = 9;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(9, this->utctimestampinminutes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOATrendbar)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOATrendbar::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOATrendbar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 volume = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->volume(), target);
  }

  // optional .ProtoOATrendbarPeriod period = 4 [default = M1];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->period(), target);
  }

  // optional int64 low = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->low(), target);
  }

  // optional uint64 deltaOpen = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->deltaopen(), target);
  }

  // optional uint64 deltaClose = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->deltaclose(), target);
  }

  // optional uint64 deltaHigh = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->deltahigh(), target);
  }

  // optional uint32 utcTimestampInMinutes = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->utctimestampinminutes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOATrendbar)
  return target;
}

size_t ProtoOATrendbar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOATrendbar)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 volume = 3;
  if (has_volume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->volume());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007eu) {
    // optional int64 low = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->low());
    }

    // optional uint64 deltaOpen = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->deltaopen());
    }

    // optional uint64 deltaClose = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->deltaclose());
    }

    // optional uint64 deltaHigh = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->deltahigh());
    }

    // optional uint32 utcTimestampInMinutes = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->utctimestampinminutes());
    }

    // optional .ProtoOATrendbarPeriod period = 4 [default = M1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->period());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOATrendbar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOATrendbar)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOATrendbar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOATrendbar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOATrendbar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOATrendbar)
    MergeFrom(*source);
  }
}

void ProtoOATrendbar::MergeFrom(const ProtoOATrendbar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOATrendbar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      volume_ = from.volume_;
    }
    if (cached_has_bits & 0x00000002u) {
      low_ = from.low_;
    }
    if (cached_has_bits & 0x00000004u) {
      deltaopen_ = from.deltaopen_;
    }
    if (cached_has_bits & 0x00000008u) {
      deltaclose_ = from.deltaclose_;
    }
    if (cached_has_bits & 0x00000010u) {
      deltahigh_ = from.deltahigh_;
    }
    if (cached_has_bits & 0x00000020u) {
      utctimestampinminutes_ = from.utctimestampinminutes_;
    }
    if (cached_has_bits & 0x00000040u) {
      period_ = from.period_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOATrendbar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOATrendbar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOATrendbar::CopyFrom(const ProtoOATrendbar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOATrendbar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOATrendbar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ProtoOATrendbar::Swap(ProtoOATrendbar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoOATrendbar::InternalSwap(ProtoOATrendbar* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(volume_, other->volume_);
  swap(low_, other->low_);
  swap(deltaopen_, other->deltaopen_);
  swap(deltaclose_, other->deltaclose_);
  swap(deltahigh_, other->deltahigh_);
  swap(utctimestampinminutes_, other->utctimestampinminutes_);
  swap(period_, other->period_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOATrendbar::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_OpenApiModelMessages_2eproto);
  return ::file_level_metadata_OpenApiModelMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProtoOAExpectedMargin::InitAsDefaultInstance() {
}
class ProtoOAExpectedMargin::HasBitSetters {
 public:
  static void set_has_volume(ProtoOAExpectedMargin* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_buymargin(ProtoOAExpectedMargin* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_sellmargin(ProtoOAExpectedMargin* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoOAExpectedMargin::kVolumeFieldNumber;
const int ProtoOAExpectedMargin::kBuyMarginFieldNumber;
const int ProtoOAExpectedMargin::kSellMarginFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoOAExpectedMargin::ProtoOAExpectedMargin()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOAExpectedMargin)
}
ProtoOAExpectedMargin::ProtoOAExpectedMargin(const ProtoOAExpectedMargin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&volume_, &from.volume_,
    static_cast<size_t>(reinterpret_cast<char*>(&sellmargin_) -
    reinterpret_cast<char*>(&volume_)) + sizeof(sellmargin_));
  // @@protoc_insertion_point(copy_constructor:ProtoOAExpectedMargin)
}

void ProtoOAExpectedMargin::SharedCtor() {
  ::memset(&volume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sellmargin_) -
      reinterpret_cast<char*>(&volume_)) + sizeof(sellmargin_));
}

ProtoOAExpectedMargin::~ProtoOAExpectedMargin() {
  // @@protoc_insertion_point(destructor:ProtoOAExpectedMargin)
  SharedDtor();
}

void ProtoOAExpectedMargin::SharedDtor() {
}

void ProtoOAExpectedMargin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOAExpectedMargin& ProtoOAExpectedMargin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOAExpectedMargin_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOAExpectedMargin::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOAExpectedMargin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&volume_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sellmargin_) -
        reinterpret_cast<char*>(&volume_)) + sizeof(sellmargin_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProtoOAExpectedMargin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int64 volume = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        set_volume(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 buyMargin = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 16) goto handle_unusual;
        set_buymargin(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 sellMargin = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 24) goto handle_unusual;
        set_sellmargin(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProtoOAExpectedMargin::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOAExpectedMargin)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 volume = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_volume(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 buyMargin = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_buymargin(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &buymargin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 sellMargin = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_sellmargin(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &sellmargin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOAExpectedMargin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOAExpectedMargin)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProtoOAExpectedMargin::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOAExpectedMargin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 volume = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->volume(), output);
  }

  // required int64 buyMargin = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->buymargin(), output);
  }

  // required int64 sellMargin = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->sellmargin(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOAExpectedMargin)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOAExpectedMargin::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOAExpectedMargin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 volume = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->volume(), target);
  }

  // required int64 buyMargin = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->buymargin(), target);
  }

  // required int64 sellMargin = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->sellmargin(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOAExpectedMargin)
  return target;
}

size_t ProtoOAExpectedMargin::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoOAExpectedMargin)
  size_t total_size = 0;

  if (has_volume()) {
    // required int64 volume = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->volume());
  }

  if (has_buymargin()) {
    // required int64 buyMargin = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->buymargin());
  }

  if (has_sellmargin()) {
    // required int64 sellMargin = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->sellmargin());
  }

  return total_size;
}
size_t ProtoOAExpectedMargin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOAExpectedMargin)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 volume = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->volume());

    // required int64 buyMargin = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->buymargin());

    // required int64 sellMargin = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->sellmargin());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOAExpectedMargin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOAExpectedMargin)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOAExpectedMargin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOAExpectedMargin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOAExpectedMargin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOAExpectedMargin)
    MergeFrom(*source);
  }
}

void ProtoOAExpectedMargin::MergeFrom(const ProtoOAExpectedMargin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOAExpectedMargin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      volume_ = from.volume_;
    }
    if (cached_has_bits & 0x00000002u) {
      buymargin_ = from.buymargin_;
    }
    if (cached_has_bits & 0x00000004u) {
      sellmargin_ = from.sellmargin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOAExpectedMargin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOAExpectedMargin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOAExpectedMargin::CopyFrom(const ProtoOAExpectedMargin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOAExpectedMargin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOAExpectedMargin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ProtoOAExpectedMargin::Swap(ProtoOAExpectedMargin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoOAExpectedMargin::InternalSwap(ProtoOAExpectedMargin* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(volume_, other->volume_);
  swap(buymargin_, other->buymargin_);
  swap(sellmargin_, other->sellmargin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOAExpectedMargin::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_OpenApiModelMessages_2eproto);
  return ::file_level_metadata_OpenApiModelMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProtoOATickData::InitAsDefaultInstance() {
}
class ProtoOATickData::HasBitSetters {
 public:
  static void set_has_timestamp(ProtoOATickData* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_tick(ProtoOATickData* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoOATickData::kTimestampFieldNumber;
const int ProtoOATickData::kTickFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoOATickData::ProtoOATickData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOATickData)
}
ProtoOATickData::ProtoOATickData(const ProtoOATickData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&tick_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(tick_));
  // @@protoc_insertion_point(copy_constructor:ProtoOATickData)
}

void ProtoOATickData::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(tick_));
}

ProtoOATickData::~ProtoOATickData() {
  // @@protoc_insertion_point(destructor:ProtoOATickData)
  SharedDtor();
}

void ProtoOATickData::SharedDtor() {
}

void ProtoOATickData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOATickData& ProtoOATickData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOATickData_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOATickData::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOATickData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tick_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(tick_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProtoOATickData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int64 timestamp = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        set_timestamp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 tick = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 16) goto handle_unusual;
        set_tick(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProtoOATickData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOATickData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 timestamp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 tick = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_tick(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOATickData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOATickData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProtoOATickData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOATickData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // required int64 tick = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->tick(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOATickData)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOATickData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOATickData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // required int64 tick = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->tick(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOATickData)
  return target;
}

size_t ProtoOATickData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoOATickData)
  size_t total_size = 0;

  if (has_timestamp()) {
    // required int64 timestamp = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  if (has_tick()) {
    // required int64 tick = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->tick());
  }

  return total_size;
}
size_t ProtoOATickData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOATickData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 timestamp = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->timestamp());

    // required int64 tick = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->tick());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOATickData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOATickData)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOATickData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOATickData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOATickData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOATickData)
    MergeFrom(*source);
  }
}

void ProtoOATickData::MergeFrom(const ProtoOATickData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOATickData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      tick_ = from.tick_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOATickData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOATickData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOATickData::CopyFrom(const ProtoOATickData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOATickData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOATickData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ProtoOATickData::Swap(ProtoOATickData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoOATickData::InternalSwap(ProtoOATickData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_, other->timestamp_);
  swap(tick_, other->tick_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOATickData::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_OpenApiModelMessages_2eproto);
  return ::file_level_metadata_OpenApiModelMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProtoOACtidProfile::InitAsDefaultInstance() {
}
class ProtoOACtidProfile::HasBitSetters {
 public:
  static void set_has_userid(ProtoOACtidProfile* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoOACtidProfile::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoOACtidProfile::ProtoOACtidProfile()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOACtidProfile)
}
ProtoOACtidProfile::ProtoOACtidProfile(const ProtoOACtidProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:ProtoOACtidProfile)
}

void ProtoOACtidProfile::SharedCtor() {
  userid_ = PROTOBUF_LONGLONG(0);
}

ProtoOACtidProfile::~ProtoOACtidProfile() {
  // @@protoc_insertion_point(destructor:ProtoOACtidProfile)
  SharedDtor();
}

void ProtoOACtidProfile::SharedDtor() {
}

void ProtoOACtidProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOACtidProfile& ProtoOACtidProfile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOACtidProfile_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOACtidProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOACtidProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProtoOACtidProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int64 userId = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        set_userid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProtoOACtidProfile::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOACtidProfile)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 userId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_userid(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOACtidProfile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOACtidProfile)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProtoOACtidProfile::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOACtidProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOACtidProfile)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOACtidProfile::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOACtidProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOACtidProfile)
  return target;
}

size_t ProtoOACtidProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOACtidProfile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 userId = 1;
  if (has_userid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->userid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOACtidProfile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOACtidProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOACtidProfile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOACtidProfile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOACtidProfile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOACtidProfile)
    MergeFrom(*source);
  }
}

void ProtoOACtidProfile::MergeFrom(const ProtoOACtidProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOACtidProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_userid()) {
    set_userid(from.userid());
  }
}

void ProtoOACtidProfile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOACtidProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOACtidProfile::CopyFrom(const ProtoOACtidProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOACtidProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOACtidProfile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ProtoOACtidProfile::Swap(ProtoOACtidProfile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoOACtidProfile::InternalSwap(ProtoOACtidProfile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOACtidProfile::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_OpenApiModelMessages_2eproto);
  return ::file_level_metadata_OpenApiModelMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProtoOACtidTraderAccount::InitAsDefaultInstance() {
}
class ProtoOACtidTraderAccount::HasBitSetters {
 public:
  static void set_has_ctidtraderaccountid(ProtoOACtidTraderAccount* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_islive(ProtoOACtidTraderAccount* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_traderlogin(ProtoOACtidTraderAccount* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoOACtidTraderAccount::kCtidTraderAccountIdFieldNumber;
const int ProtoOACtidTraderAccount::kIsLiveFieldNumber;
const int ProtoOACtidTraderAccount::kTraderLoginFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoOACtidTraderAccount::ProtoOACtidTraderAccount()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOACtidTraderAccount)
}
ProtoOACtidTraderAccount::ProtoOACtidTraderAccount(const ProtoOACtidTraderAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ctidtraderaccountid_, &from.ctidtraderaccountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&islive_) -
    reinterpret_cast<char*>(&ctidtraderaccountid_)) + sizeof(islive_));
  // @@protoc_insertion_point(copy_constructor:ProtoOACtidTraderAccount)
}

void ProtoOACtidTraderAccount::SharedCtor() {
  ::memset(&ctidtraderaccountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&islive_) -
      reinterpret_cast<char*>(&ctidtraderaccountid_)) + sizeof(islive_));
}

ProtoOACtidTraderAccount::~ProtoOACtidTraderAccount() {
  // @@protoc_insertion_point(destructor:ProtoOACtidTraderAccount)
  SharedDtor();
}

void ProtoOACtidTraderAccount::SharedDtor() {
}

void ProtoOACtidTraderAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOACtidTraderAccount& ProtoOACtidTraderAccount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOACtidTraderAccount_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOACtidTraderAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOACtidTraderAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&ctidtraderaccountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&islive_) -
        reinterpret_cast<char*>(&ctidtraderaccountid_)) + sizeof(islive_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProtoOACtidTraderAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint64 ctidTraderAccountId = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        set_ctidtraderaccountid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool isLive = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 16) goto handle_unusual;
        set_islive(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int64 traderLogin = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 24) goto handle_unusual;
        set_traderlogin(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProtoOACtidTraderAccount::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOACtidTraderAccount)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 ctidTraderAccountId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_ctidtraderaccountid(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ctidtraderaccountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isLive = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_islive(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 traderLogin = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_traderlogin(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &traderlogin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOACtidTraderAccount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOACtidTraderAccount)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProtoOACtidTraderAccount::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOACtidTraderAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 ctidTraderAccountId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->ctidtraderaccountid(), output);
  }

  // optional bool isLive = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->islive(), output);
  }

  // optional int64 traderLogin = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->traderlogin(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOACtidTraderAccount)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOACtidTraderAccount::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOACtidTraderAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 ctidTraderAccountId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->ctidtraderaccountid(), target);
  }

  // optional bool isLive = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->islive(), target);
  }

  // optional int64 traderLogin = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->traderlogin(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOACtidTraderAccount)
  return target;
}

size_t ProtoOACtidTraderAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOACtidTraderAccount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 ctidTraderAccountId = 1;
  if (has_ctidtraderaccountid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ctidtraderaccountid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional int64 traderLogin = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->traderlogin());
    }

    // optional bool isLive = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOACtidTraderAccount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOACtidTraderAccount)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOACtidTraderAccount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOACtidTraderAccount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOACtidTraderAccount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOACtidTraderAccount)
    MergeFrom(*source);
  }
}

void ProtoOACtidTraderAccount::MergeFrom(const ProtoOACtidTraderAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOACtidTraderAccount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ctidtraderaccountid_ = from.ctidtraderaccountid_;
    }
    if (cached_has_bits & 0x00000002u) {
      traderlogin_ = from.traderlogin_;
    }
    if (cached_has_bits & 0x00000004u) {
      islive_ = from.islive_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOACtidTraderAccount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOACtidTraderAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOACtidTraderAccount::CopyFrom(const ProtoOACtidTraderAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOACtidTraderAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOACtidTraderAccount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ProtoOACtidTraderAccount::Swap(ProtoOACtidTraderAccount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoOACtidTraderAccount::InternalSwap(ProtoOACtidTraderAccount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ctidtraderaccountid_, other->ctidtraderaccountid_);
  swap(traderlogin_, other->traderlogin_);
  swap(islive_, other->islive_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOACtidTraderAccount::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_OpenApiModelMessages_2eproto);
  return ::file_level_metadata_OpenApiModelMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProtoOAAssetClass::InitAsDefaultInstance() {
}
class ProtoOAAssetClass::HasBitSetters {
 public:
  static void set_has_id(ProtoOAAssetClass* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_name(ProtoOAAssetClass* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoOAAssetClass::kIdFieldNumber;
const int ProtoOAAssetClass::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoOAAssetClass::ProtoOAAssetClass()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOAAssetClass)
}
ProtoOAAssetClass::ProtoOAAssetClass(const ProtoOAAssetClass& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:ProtoOAAssetClass)
}

void ProtoOAAssetClass::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ProtoOAAssetClass_OpenApiModelMessages_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_LONGLONG(0);
}

ProtoOAAssetClass::~ProtoOAAssetClass() {
  // @@protoc_insertion_point(destructor:ProtoOAAssetClass)
  SharedDtor();
}

void ProtoOAAssetClass::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProtoOAAssetClass::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOAAssetClass& ProtoOAAssetClass::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOAAssetClass_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOAAssetClass::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOAAssetClass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProtoOAAssetClass::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int64 id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        set_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string name = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "ProtoOAAssetClass.name");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProtoOAAssetClass::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOAAssetClass)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "ProtoOAAssetClass.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOAAssetClass)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOAAssetClass)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProtoOAAssetClass::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOAAssetClass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOAAssetClass.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOAAssetClass)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOAAssetClass::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOAAssetClass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOAAssetClass.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOAAssetClass)
  return target;
}

size_t ProtoOAAssetClass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOAAssetClass)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOAAssetClass::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOAAssetClass)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOAAssetClass* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOAAssetClass>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOAAssetClass)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOAAssetClass)
    MergeFrom(*source);
  }
}

void ProtoOAAssetClass::MergeFrom(const ProtoOAAssetClass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOAAssetClass)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOAAssetClass::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOAAssetClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOAAssetClass::CopyFrom(const ProtoOAAssetClass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOAAssetClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOAAssetClass::IsInitialized() const {
  return true;
}

void ProtoOAAssetClass::Swap(ProtoOAAssetClass* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoOAAssetClass::InternalSwap(ProtoOAAssetClass* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOAAssetClass::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_OpenApiModelMessages_2eproto);
  return ::file_level_metadata_OpenApiModelMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProtoOADepthQuote::InitAsDefaultInstance() {
}
class ProtoOADepthQuote::HasBitSetters {
 public:
  static void set_has_id(ProtoOADepthQuote* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_size(ProtoOADepthQuote* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_bid(ProtoOADepthQuote* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_ask(ProtoOADepthQuote* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoOADepthQuote::kIdFieldNumber;
const int ProtoOADepthQuote::kSizeFieldNumber;
const int ProtoOADepthQuote::kBidFieldNumber;
const int ProtoOADepthQuote::kAskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoOADepthQuote::ProtoOADepthQuote()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOADepthQuote)
}
ProtoOADepthQuote::ProtoOADepthQuote(const ProtoOADepthQuote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ask_) -
    reinterpret_cast<char*>(&id_)) + sizeof(ask_));
  // @@protoc_insertion_point(copy_constructor:ProtoOADepthQuote)
}

void ProtoOADepthQuote::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ask_) -
      reinterpret_cast<char*>(&id_)) + sizeof(ask_));
}

ProtoOADepthQuote::~ProtoOADepthQuote() {
  // @@protoc_insertion_point(destructor:ProtoOADepthQuote)
  SharedDtor();
}

void ProtoOADepthQuote::SharedDtor() {
}

void ProtoOADepthQuote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOADepthQuote& ProtoOADepthQuote::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOADepthQuote_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOADepthQuote::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOADepthQuote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ask_) -
        reinterpret_cast<char*>(&id_)) + sizeof(ask_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProtoOADepthQuote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint64 id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        set_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint64 size = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 24) goto handle_unusual;
        set_size(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 bid = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 32) goto handle_unusual;
        set_bid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 ask = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 40) goto handle_unusual;
        set_ask(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProtoOADepthQuote::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOADepthQuote)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 size = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_size(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bid = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_bid(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ask = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_ask(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOADepthQuote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOADepthQuote)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProtoOADepthQuote::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOADepthQuote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required uint64 size = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->size(), output);
  }

  // optional uint64 bid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->bid(), output);
  }

  // optional uint64 ask = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->ask(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOADepthQuote)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOADepthQuote::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOADepthQuote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required uint64 size = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->size(), target);
  }

  // optional uint64 bid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->bid(), target);
  }

  // optional uint64 ask = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->ask(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOADepthQuote)
  return target;
}

size_t ProtoOADepthQuote::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoOADepthQuote)
  size_t total_size = 0;

  if (has_id()) {
    // required uint64 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  if (has_size()) {
    // required uint64 size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  return total_size;
}
size_t ProtoOADepthQuote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOADepthQuote)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->id());

    // required uint64 size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional uint64 bid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->bid());
    }

    // optional uint64 ask = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->ask());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOADepthQuote::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOADepthQuote)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOADepthQuote* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOADepthQuote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOADepthQuote)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOADepthQuote)
    MergeFrom(*source);
  }
}

void ProtoOADepthQuote::MergeFrom(const ProtoOADepthQuote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOADepthQuote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000004u) {
      bid_ = from.bid_;
    }
    if (cached_has_bits & 0x00000008u) {
      ask_ = from.ask_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOADepthQuote::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOADepthQuote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOADepthQuote::CopyFrom(const ProtoOADepthQuote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOADepthQuote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOADepthQuote::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ProtoOADepthQuote::Swap(ProtoOADepthQuote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoOADepthQuote::InternalSwap(ProtoOADepthQuote* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(size_, other->size_);
  swap(bid_, other->bid_);
  swap(ask_, other->ask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOADepthQuote::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_OpenApiModelMessages_2eproto);
  return ::file_level_metadata_OpenApiModelMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProtoOAMarginCall::InitAsDefaultInstance() {
}
class ProtoOAMarginCall::HasBitSetters {
 public:
  static void set_has_margincalltype(ProtoOAMarginCall* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_marginlevelthreshold(ProtoOAMarginCall* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_utclastupdatetimestamp(ProtoOAMarginCall* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoOAMarginCall::kMarginCallTypeFieldNumber;
const int ProtoOAMarginCall::kMarginLevelThresholdFieldNumber;
const int ProtoOAMarginCall::kUtcLastUpdateTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoOAMarginCall::ProtoOAMarginCall()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOAMarginCall)
}
ProtoOAMarginCall::ProtoOAMarginCall(const ProtoOAMarginCall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&marginlevelthreshold_, &from.marginlevelthreshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&margincalltype_) -
    reinterpret_cast<char*>(&marginlevelthreshold_)) + sizeof(margincalltype_));
  // @@protoc_insertion_point(copy_constructor:ProtoOAMarginCall)
}

void ProtoOAMarginCall::SharedCtor() {
  ::memset(&marginlevelthreshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&utclastupdatetimestamp_) -
      reinterpret_cast<char*>(&marginlevelthreshold_)) + sizeof(utclastupdatetimestamp_));
  margincalltype_ = 61;
}

ProtoOAMarginCall::~ProtoOAMarginCall() {
  // @@protoc_insertion_point(destructor:ProtoOAMarginCall)
  SharedDtor();
}

void ProtoOAMarginCall::SharedDtor() {
}

void ProtoOAMarginCall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOAMarginCall& ProtoOAMarginCall::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOAMarginCall_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOAMarginCall::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOAMarginCall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&marginlevelthreshold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&utclastupdatetimestamp_) -
        reinterpret_cast<char*>(&marginlevelthreshold_)) + sizeof(utclastupdatetimestamp_));
    margincalltype_ = 61;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProtoOAMarginCall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required .ProtoOANotificationType marginCallType = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        if (!::ProtoOANotificationType_IsValid(val)) {
          ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          break;
        }
        set_margincalltype(static_cast<::ProtoOANotificationType>(val));
        break;
      }
      // required double marginLevelThreshold = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 17) goto handle_unusual;
        set_marginlevelthreshold(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // optional int64 utcLastUpdateTimestamp = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 24) goto handle_unusual;
        set_utclastupdatetimestamp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProtoOAMarginCall::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOAMarginCall)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoOANotificationType marginCallType = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProtoOANotificationType_IsValid(value)) {
            set_margincalltype(static_cast< ::ProtoOANotificationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double marginLevelThreshold = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_marginlevelthreshold(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &marginlevelthreshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 utcLastUpdateTimestamp = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_utclastupdatetimestamp(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &utclastupdatetimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOAMarginCall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOAMarginCall)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProtoOAMarginCall::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOAMarginCall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ProtoOANotificationType marginCallType = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->margincalltype(), output);
  }

  // required double marginLevelThreshold = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->marginlevelthreshold(), output);
  }

  // optional int64 utcLastUpdateTimestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->utclastupdatetimestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOAMarginCall)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOAMarginCall::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOAMarginCall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ProtoOANotificationType marginCallType = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->margincalltype(), target);
  }

  // required double marginLevelThreshold = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->marginlevelthreshold(), target);
  }

  // optional int64 utcLastUpdateTimestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->utclastupdatetimestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOAMarginCall)
  return target;
}

size_t ProtoOAMarginCall::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoOAMarginCall)
  size_t total_size = 0;

  if (has_marginlevelthreshold()) {
    // required double marginLevelThreshold = 2;
    total_size += 1 + 8;
  }

  if (has_margincalltype()) {
    // required .ProtoOANotificationType marginCallType = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->margincalltype());
  }

  return total_size;
}
size_t ProtoOAMarginCall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOAMarginCall)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required double marginLevelThreshold = 2;
    total_size += 1 + 8;

    // required .ProtoOANotificationType marginCallType = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->margincalltype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 utcLastUpdateTimestamp = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->utclastupdatetimestamp());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOAMarginCall::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOAMarginCall)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOAMarginCall* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOAMarginCall>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOAMarginCall)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOAMarginCall)
    MergeFrom(*source);
  }
}

void ProtoOAMarginCall::MergeFrom(const ProtoOAMarginCall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOAMarginCall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      marginlevelthreshold_ = from.marginlevelthreshold_;
    }
    if (cached_has_bits & 0x00000002u) {
      utclastupdatetimestamp_ = from.utclastupdatetimestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      margincalltype_ = from.margincalltype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOAMarginCall::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOAMarginCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOAMarginCall::CopyFrom(const ProtoOAMarginCall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOAMarginCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOAMarginCall::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void ProtoOAMarginCall::Swap(ProtoOAMarginCall* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoOAMarginCall::InternalSwap(ProtoOAMarginCall* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(marginlevelthreshold_, other->marginlevelthreshold_);
  swap(utclastupdatetimestamp_, other->utclastupdatetimestamp_);
  swap(margincalltype_, other->margincalltype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOAMarginCall::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_OpenApiModelMessages_2eproto);
  return ::file_level_metadata_OpenApiModelMessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProtoOAHoliday::InitAsDefaultInstance() {
}
class ProtoOAHoliday::HasBitSetters {
 public:
  static void set_has_holidayid(ProtoOAHoliday* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_name(ProtoOAHoliday* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_description(ProtoOAHoliday* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_scheduletimezone(ProtoOAHoliday* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_holidaydate(ProtoOAHoliday* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_isrecurring(ProtoOAHoliday* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_startsecond(ProtoOAHoliday* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_endsecond(ProtoOAHoliday* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoOAHoliday::kHolidayIdFieldNumber;
const int ProtoOAHoliday::kNameFieldNumber;
const int ProtoOAHoliday::kDescriptionFieldNumber;
const int ProtoOAHoliday::kScheduleTimeZoneFieldNumber;
const int ProtoOAHoliday::kHolidayDateFieldNumber;
const int ProtoOAHoliday::kIsRecurringFieldNumber;
const int ProtoOAHoliday::kStartSecondFieldNumber;
const int ProtoOAHoliday::kEndSecondFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoOAHoliday::ProtoOAHoliday()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOAHoliday)
}
ProtoOAHoliday::ProtoOAHoliday(const ProtoOAHoliday& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  scheduletimezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_scheduletimezone()) {
    scheduletimezone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scheduletimezone_);
  }
  ::memcpy(&holidayid_, &from.holidayid_,
    static_cast<size_t>(reinterpret_cast<char*>(&endsecond_) -
    reinterpret_cast<char*>(&holidayid_)) + sizeof(endsecond_));
  // @@protoc_insertion_point(copy_constructor:ProtoOAHoliday)
}

void ProtoOAHoliday::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ProtoOAHoliday_OpenApiModelMessages_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scheduletimezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&holidayid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endsecond_) -
      reinterpret_cast<char*>(&holidayid_)) + sizeof(endsecond_));
}

ProtoOAHoliday::~ProtoOAHoliday() {
  // @@protoc_insertion_point(destructor:ProtoOAHoliday)
  SharedDtor();
}

void ProtoOAHoliday::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scheduletimezone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProtoOAHoliday::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOAHoliday& ProtoOAHoliday::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOAHoliday_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOAHoliday::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOAHoliday)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      scheduletimezone_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&holidayid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&endsecond_) -
        reinterpret_cast<char*>(&holidayid_)) + sizeof(endsecond_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProtoOAHoliday::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int64 holidayId = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        set_holidayid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required string name = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "ProtoOAHoliday.name");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string description = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_description(), ptr, ctx, "ProtoOAHoliday.description");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required string scheduleTimeZone = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_scheduletimezone(), ptr, ctx, "ProtoOAHoliday.scheduleTimeZone");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 holidayDate = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 40) goto handle_unusual;
        set_holidaydate(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required bool isRecurring = 6;
      case 6: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 48) goto handle_unusual;
        set_isrecurring(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 startSecond = 7;
      case 7: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 56) goto handle_unusual;
        set_startsecond(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 endSecond = 8;
      case 8: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 64) goto handle_unusual;
        set_endsecond(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProtoOAHoliday::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOAHoliday)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 holidayId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_holidayid(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &holidayid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "ProtoOAHoliday.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "ProtoOAHoliday.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string scheduleTimeZone = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_scheduletimezone()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scheduletimezone().data(), static_cast<int>(this->scheduletimezone().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "ProtoOAHoliday.scheduleTimeZone");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 holidayDate = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_holidaydate(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &holidaydate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool isRecurring = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_isrecurring(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrecurring_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 startSecond = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_startsecond(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &startsecond_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 endSecond = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_endsecond(this);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &endsecond_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOAHoliday)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOAHoliday)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProtoOAHoliday::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOAHoliday)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 holidayId = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->holidayid(), output);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOAHoliday.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string description = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOAHoliday.description");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // required string scheduleTimeZone = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scheduletimezone().data(), static_cast<int>(this->scheduletimezone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOAHoliday.scheduleTimeZone");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->scheduletimezone(), output);
  }

  // required int64 holidayDate = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->holidaydate(), output);
  }

  // required bool isRecurring = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->isrecurring(), output);
  }

  // optional int32 startSecond = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->startsecond(), output);
  }

  // optional int32 endSecond = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->endsecond(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOAHoliday)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOAHoliday::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOAHoliday)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 holidayId = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->holidayid(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOAHoliday.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string description = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOAHoliday.description");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // required string scheduleTimeZone = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scheduletimezone().data(), static_cast<int>(this->scheduletimezone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOAHoliday.scheduleTimeZone");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->scheduletimezone(), target);
  }

  // required int64 holidayDate = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->holidaydate(), target);
  }

  // required bool isRecurring = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->isrecurring(), target);
  }

  // optional int32 startSecond = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->startsecond(), target);
  }

  // optional int32 endSecond = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->endsecond(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOAHoliday)
  return target;
}

size_t ProtoOAHoliday::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoOAHoliday)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_scheduletimezone()) {
    // required string scheduleTimeZone = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->scheduletimezone());
  }

  if (has_holidayid()) {
    // required int64 holidayId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->holidayid());
  }

  if (has_holidaydate()) {
    // required int64 holidayDate = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->holidaydate());
  }

  if (has_isrecurring()) {
    // required bool isRecurring = 6;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ProtoOAHoliday::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOAHoliday)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003d) ^ 0x0000003d) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());

    // required string scheduleTimeZone = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->scheduletimezone());

    // required int64 holidayId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->holidayid());

    // required int64 holidayDate = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->holidaydate());

    // required bool isRecurring = 6;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string description = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->description());
  }

  if (cached_has_bits & 0x000000c0u) {
    // optional int32 startSecond = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->startsecond());
    }

    // optional int32 endSecond = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->endsecond());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOAHoliday::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOAHoliday)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOAHoliday* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOAHoliday>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOAHoliday)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOAHoliday)
    MergeFrom(*source);
  }
}

void ProtoOAHoliday::MergeFrom(const ProtoOAHoliday& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOAHoliday)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      scheduletimezone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scheduletimezone_);
    }
    if (cached_has_bits & 0x00000008u) {
      holidayid_ = from.holidayid_;
    }
    if (cached_has_bits & 0x00000010u) {
      holidaydate_ = from.holidaydate_;
    }
    if (cached_has_bits & 0x00000020u) {
      isrecurring_ = from.isrecurring_;
    }
    if (cached_has_bits & 0x00000040u) {
      startsecond_ = from.startsecond_;
    }
    if (cached_has_bits & 0x00000080u) {
      endsecond_ = from.endsecond_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOAHoliday::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOAHoliday)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOAHoliday::CopyFrom(const ProtoOAHoliday& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOAHoliday)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOAHoliday::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003d) != 0x0000003d) return false;
  return true;
}

void ProtoOAHoliday::Swap(ProtoOAHoliday* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoOAHoliday::InternalSwap(ProtoOAHoliday* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  scheduletimezone_.Swap(&other->scheduletimezone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(holidayid_, other->holidayid_);
  swap(holidaydate_, other->holidaydate_);
  swap(isrecurring_, other->isrecurring_);
  swap(startsecond_, other->startsecond_);
  swap(endsecond_, other->endsecond_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOAHoliday::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_OpenApiModelMessages_2eproto);
  return ::file_level_metadata_OpenApiModelMessages_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ProtoOAAsset* Arena::CreateMaybeMessage< ::ProtoOAAsset >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoOAAsset >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOASymbol* Arena::CreateMaybeMessage< ::ProtoOASymbol >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoOASymbol >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOALightSymbol* Arena::CreateMaybeMessage< ::ProtoOALightSymbol >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoOALightSymbol >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOAArchivedSymbol* Arena::CreateMaybeMessage< ::ProtoOAArchivedSymbol >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoOAArchivedSymbol >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOASymbolCategory* Arena::CreateMaybeMessage< ::ProtoOASymbolCategory >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoOASymbolCategory >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOAInterval* Arena::CreateMaybeMessage< ::ProtoOAInterval >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoOAInterval >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOATrader* Arena::CreateMaybeMessage< ::ProtoOATrader >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoOATrader >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOAPosition* Arena::CreateMaybeMessage< ::ProtoOAPosition >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoOAPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOATradeData* Arena::CreateMaybeMessage< ::ProtoOATradeData >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoOATradeData >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOAOrder* Arena::CreateMaybeMessage< ::ProtoOAOrder >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoOAOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOABonusDepositWithdraw* Arena::CreateMaybeMessage< ::ProtoOABonusDepositWithdraw >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoOABonusDepositWithdraw >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOADepositWithdraw* Arena::CreateMaybeMessage< ::ProtoOADepositWithdraw >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoOADepositWithdraw >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOADeal* Arena::CreateMaybeMessage< ::ProtoOADeal >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoOADeal >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOAClosePositionDetail* Arena::CreateMaybeMessage< ::ProtoOAClosePositionDetail >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoOAClosePositionDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOATrendbar* Arena::CreateMaybeMessage< ::ProtoOATrendbar >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoOATrendbar >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOAExpectedMargin* Arena::CreateMaybeMessage< ::ProtoOAExpectedMargin >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoOAExpectedMargin >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOATickData* Arena::CreateMaybeMessage< ::ProtoOATickData >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoOATickData >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOACtidProfile* Arena::CreateMaybeMessage< ::ProtoOACtidProfile >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoOACtidProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOACtidTraderAccount* Arena::CreateMaybeMessage< ::ProtoOACtidTraderAccount >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoOACtidTraderAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOAAssetClass* Arena::CreateMaybeMessage< ::ProtoOAAssetClass >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoOAAssetClass >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOADepthQuote* Arena::CreateMaybeMessage< ::ProtoOADepthQuote >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoOADepthQuote >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOAMarginCall* Arena::CreateMaybeMessage< ::ProtoOAMarginCall >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoOAMarginCall >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOAHoliday* Arena::CreateMaybeMessage< ::ProtoOAHoliday >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoOAHoliday >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

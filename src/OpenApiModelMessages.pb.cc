// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OpenApiModelMessages.proto

#include "OpenApiModelMessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
extern PROTOBUF_INTERNAL_EXPORT_OpenApiModelMessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOAClosePositionDetail_OpenApiModelMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OpenApiModelMessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOAHoliday_OpenApiModelMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OpenApiModelMessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOAInterval_OpenApiModelMessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OpenApiModelMessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOATradeData_OpenApiModelMessages_2eproto;
class ProtoOAAssetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOAAsset> _instance;
} _ProtoOAAsset_default_instance_;
class ProtoOASymbolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOASymbol> _instance;
} _ProtoOASymbol_default_instance_;
class ProtoOALightSymbolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOALightSymbol> _instance;
} _ProtoOALightSymbol_default_instance_;
class ProtoOAArchivedSymbolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOAArchivedSymbol> _instance;
} _ProtoOAArchivedSymbol_default_instance_;
class ProtoOASymbolCategoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOASymbolCategory> _instance;
} _ProtoOASymbolCategory_default_instance_;
class ProtoOAIntervalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOAInterval> _instance;
} _ProtoOAInterval_default_instance_;
class ProtoOATraderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOATrader> _instance;
} _ProtoOATrader_default_instance_;
class ProtoOAPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOAPosition> _instance;
} _ProtoOAPosition_default_instance_;
class ProtoOATradeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOATradeData> _instance;
} _ProtoOATradeData_default_instance_;
class ProtoOAOrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOAOrder> _instance;
} _ProtoOAOrder_default_instance_;
class ProtoOABonusDepositWithdrawDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOABonusDepositWithdraw> _instance;
} _ProtoOABonusDepositWithdraw_default_instance_;
class ProtoOADepositWithdrawDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOADepositWithdraw> _instance;
} _ProtoOADepositWithdraw_default_instance_;
class ProtoOADealDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOADeal> _instance;
} _ProtoOADeal_default_instance_;
class ProtoOAClosePositionDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOAClosePositionDetail> _instance;
} _ProtoOAClosePositionDetail_default_instance_;
class ProtoOATrendbarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOATrendbar> _instance;
} _ProtoOATrendbar_default_instance_;
class ProtoOAExpectedMarginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOAExpectedMargin> _instance;
} _ProtoOAExpectedMargin_default_instance_;
class ProtoOATickDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOATickData> _instance;
} _ProtoOATickData_default_instance_;
class ProtoOACtidProfileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOACtidProfile> _instance;
} _ProtoOACtidProfile_default_instance_;
class ProtoOACtidTraderAccountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOACtidTraderAccount> _instance;
} _ProtoOACtidTraderAccount_default_instance_;
class ProtoOAAssetClassDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOAAssetClass> _instance;
} _ProtoOAAssetClass_default_instance_;
class ProtoOADepthQuoteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOADepthQuote> _instance;
} _ProtoOADepthQuote_default_instance_;
class ProtoOAMarginCallDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOAMarginCall> _instance;
} _ProtoOAMarginCall_default_instance_;
class ProtoOAHolidayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtoOAHoliday> _instance;
} _ProtoOAHoliday_default_instance_;
static void InitDefaultsscc_info_ProtoOAArchivedSymbol_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOAArchivedSymbol_default_instance_;
    new (ptr) ::ProtoOAArchivedSymbol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOAArchivedSymbol_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProtoOAArchivedSymbol_OpenApiModelMessages_2eproto}, {}};

static void InitDefaultsscc_info_ProtoOAAsset_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOAAsset_default_instance_;
    new (ptr) ::ProtoOAAsset();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOAAsset_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProtoOAAsset_OpenApiModelMessages_2eproto}, {}};

static void InitDefaultsscc_info_ProtoOAAssetClass_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOAAssetClass_default_instance_;
    new (ptr) ::ProtoOAAssetClass();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOAAssetClass_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProtoOAAssetClass_OpenApiModelMessages_2eproto}, {}};

static void InitDefaultsscc_info_ProtoOABonusDepositWithdraw_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOABonusDepositWithdraw_default_instance_;
    new (ptr) ::ProtoOABonusDepositWithdraw();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOABonusDepositWithdraw_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProtoOABonusDepositWithdraw_OpenApiModelMessages_2eproto}, {}};

static void InitDefaultsscc_info_ProtoOAClosePositionDetail_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOAClosePositionDetail_default_instance_;
    new (ptr) ::ProtoOAClosePositionDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOAClosePositionDetail_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProtoOAClosePositionDetail_OpenApiModelMessages_2eproto}, {}};

static void InitDefaultsscc_info_ProtoOACtidProfile_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOACtidProfile_default_instance_;
    new (ptr) ::ProtoOACtidProfile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOACtidProfile_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProtoOACtidProfile_OpenApiModelMessages_2eproto}, {}};

static void InitDefaultsscc_info_ProtoOACtidTraderAccount_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOACtidTraderAccount_default_instance_;
    new (ptr) ::ProtoOACtidTraderAccount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOACtidTraderAccount_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProtoOACtidTraderAccount_OpenApiModelMessages_2eproto}, {}};

static void InitDefaultsscc_info_ProtoOADeal_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOADeal_default_instance_;
    new (ptr) ::ProtoOADeal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProtoOADeal_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProtoOADeal_OpenApiModelMessages_2eproto}, {
      &scc_info_ProtoOAClosePositionDetail_OpenApiModelMessages_2eproto.base,}};

static void InitDefaultsscc_info_ProtoOADepositWithdraw_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOADepositWithdraw_default_instance_;
    new (ptr) ::ProtoOADepositWithdraw();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOADepositWithdraw_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProtoOADepositWithdraw_OpenApiModelMessages_2eproto}, {}};

static void InitDefaultsscc_info_ProtoOADepthQuote_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOADepthQuote_default_instance_;
    new (ptr) ::ProtoOADepthQuote();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOADepthQuote_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProtoOADepthQuote_OpenApiModelMessages_2eproto}, {}};

static void InitDefaultsscc_info_ProtoOAExpectedMargin_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOAExpectedMargin_default_instance_;
    new (ptr) ::ProtoOAExpectedMargin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOAExpectedMargin_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProtoOAExpectedMargin_OpenApiModelMessages_2eproto}, {}};

static void InitDefaultsscc_info_ProtoOAHoliday_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOAHoliday_default_instance_;
    new (ptr) ::ProtoOAHoliday();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOAHoliday_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProtoOAHoliday_OpenApiModelMessages_2eproto}, {}};

static void InitDefaultsscc_info_ProtoOAInterval_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOAInterval_default_instance_;
    new (ptr) ::ProtoOAInterval();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOAInterval_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProtoOAInterval_OpenApiModelMessages_2eproto}, {}};

static void InitDefaultsscc_info_ProtoOALightSymbol_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOALightSymbol_default_instance_;
    new (ptr) ::ProtoOALightSymbol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOALightSymbol_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProtoOALightSymbol_OpenApiModelMessages_2eproto}, {}};

static void InitDefaultsscc_info_ProtoOAMarginCall_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOAMarginCall_default_instance_;
    new (ptr) ::ProtoOAMarginCall();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOAMarginCall_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProtoOAMarginCall_OpenApiModelMessages_2eproto}, {}};

static void InitDefaultsscc_info_ProtoOAOrder_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOAOrder_default_instance_;
    new (ptr) ::ProtoOAOrder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProtoOAOrder_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProtoOAOrder_OpenApiModelMessages_2eproto}, {
      &scc_info_ProtoOATradeData_OpenApiModelMessages_2eproto.base,}};

static void InitDefaultsscc_info_ProtoOAPosition_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOAPosition_default_instance_;
    new (ptr) ::ProtoOAPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProtoOAPosition_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProtoOAPosition_OpenApiModelMessages_2eproto}, {
      &scc_info_ProtoOATradeData_OpenApiModelMessages_2eproto.base,}};

static void InitDefaultsscc_info_ProtoOASymbol_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOASymbol_default_instance_;
    new (ptr) ::ProtoOASymbol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProtoOASymbol_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ProtoOASymbol_OpenApiModelMessages_2eproto}, {
      &scc_info_ProtoOAInterval_OpenApiModelMessages_2eproto.base,
      &scc_info_ProtoOAHoliday_OpenApiModelMessages_2eproto.base,}};

static void InitDefaultsscc_info_ProtoOASymbolCategory_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOASymbolCategory_default_instance_;
    new (ptr) ::ProtoOASymbolCategory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOASymbolCategory_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProtoOASymbolCategory_OpenApiModelMessages_2eproto}, {}};

static void InitDefaultsscc_info_ProtoOATickData_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOATickData_default_instance_;
    new (ptr) ::ProtoOATickData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOATickData_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProtoOATickData_OpenApiModelMessages_2eproto}, {}};

static void InitDefaultsscc_info_ProtoOATradeData_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOATradeData_default_instance_;
    new (ptr) ::ProtoOATradeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOATradeData_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProtoOATradeData_OpenApiModelMessages_2eproto}, {}};

static void InitDefaultsscc_info_ProtoOATrader_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOATrader_default_instance_;
    new (ptr) ::ProtoOATrader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOATrader_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProtoOATrader_OpenApiModelMessages_2eproto}, {}};

static void InitDefaultsscc_info_ProtoOATrendbar_OpenApiModelMessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProtoOATrendbar_default_instance_;
    new (ptr) ::ProtoOATrendbar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtoOATrendbar_OpenApiModelMessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProtoOATrendbar_OpenApiModelMessages_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_OpenApiModelMessages_2eproto[23];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_OpenApiModelMessages_2eproto[26];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_OpenApiModelMessages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_OpenApiModelMessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ProtoOAAsset, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAAsset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOAAsset, assetid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAAsset, name_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAAsset, displayname_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAAsset, digits_),
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, symbolid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, digits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, pipposition_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, enableshortselling_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, guaranteedstoploss_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, swaprollover3days_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, swaplong_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, swapshort_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, maxvolume_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, minvolume_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, stepvolume_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, maxexposure_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, schedule_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, commission_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, commissiontype_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, sldistance_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, tpdistance_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, gsldistance_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, gslcharge_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, distancesetin_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, mincommission_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, mincommissiontype_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, mincommissionasset_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, rollovercommission_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, skiprolloverdays_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, scheduletimezone_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, tradingmode_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, rollovercommission3days_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, swapcalculationtype_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, lotsize_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, precisetradingcommissionrate_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, precisemincommission_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbol, holiday_),
  2,
  3,
  4,
  7,
  8,
  27,
  5,
  6,
  10,
  11,
  12,
  13,
  ~0u,
  14,
  28,
  9,
  15,
  16,
  17,
  29,
  18,
  30,
  0,
  19,
  20,
  1,
  21,
  26,
  25,
  22,
  23,
  24,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ProtoOALightSymbol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOALightSymbol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOALightSymbol, symbolid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOALightSymbol, symbolname_),
  PROTOBUF_FIELD_OFFSET(::ProtoOALightSymbol, enabled_),
  PROTOBUF_FIELD_OFFSET(::ProtoOALightSymbol, baseassetid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOALightSymbol, quoteassetid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOALightSymbol, symbolcategoryid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOALightSymbol, description_),
  2,
  0,
  6,
  3,
  4,
  5,
  1,
  PROTOBUF_FIELD_OFFSET(::ProtoOAArchivedSymbol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAArchivedSymbol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOAArchivedSymbol, symbolid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAArchivedSymbol, name_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAArchivedSymbol, utclastupdatetimestamp_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAArchivedSymbol, description_),
  2,
  0,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbolCategory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbolCategory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbolCategory, id_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbolCategory, assetclassid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOASymbolCategory, name_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::ProtoOAInterval, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAInterval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOAInterval, startsecond_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAInterval, endsecond_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, ctidtraderaccountid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, balance_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, balanceversion_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, managerbonus_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, ibbonus_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, nonwithdrawablebonus_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, accessrights_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, depositassetid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, swapfree_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, leverageincents_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, totalmargincalculationtype_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, maxleverage_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, frenchrisk_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, traderlogin_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, accounttype_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, brokername_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, registrationtimestamp_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, islimitedrisk_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, limitedriskmargincalculationstrategy_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrader, moneydigits_),
  1,
  2,
  3,
  4,
  5,
  6,
  8,
  7,
  12,
  9,
  10,
  11,
  13,
  16,
  15,
  0,
  17,
  14,
  18,
  19,
  PROTOBUF_FIELD_OFFSET(::ProtoOAPosition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOAPosition, positionid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAPosition, tradedata_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAPosition, positionstatus_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAPosition, swap_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAPosition, price_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAPosition, stoploss_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAPosition, takeprofit_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAPosition, utclastupdatetimestamp_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAPosition, commission_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAPosition, marginrate_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAPosition, mirroringcommission_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAPosition, guaranteedstoploss_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAPosition, usedmargin_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAPosition, stoplosstriggermethod_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAPosition, moneydigits_),
  1,
  0,
  13,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  11,
  10,
  14,
  12,
  PROTOBUF_FIELD_OFFSET(::ProtoOATradeData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATradeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOATradeData, symbolid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATradeData, volume_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATradeData, tradeside_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATradeData, opentimestamp_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATradeData, label_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATradeData, guaranteedstoploss_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATradeData, comment_),
  2,
  3,
  6,
  4,
  0,
  5,
  1,
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, orderid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, tradedata_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, ordertype_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, orderstatus_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, expirationtimestamp_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, executionprice_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, executedvolume_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, utclastupdatetimestamp_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, baseslippageprice_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, slippageinpoints_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, closingorder_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, limitprice_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, stopprice_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, stoploss_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, takeprofit_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, clientorderid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, timeinforce_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, positionid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, relativestoploss_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, relativetakeprofit_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, isstopout_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, trailingstoploss_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAOrder, stoptriggermethod_),
  2,
  1,
  19,
  20,
  3,
  4,
  5,
  6,
  7,
  8,
  16,
  9,
  10,
  11,
  12,
  0,
  21,
  13,
  14,
  15,
  17,
  18,
  22,
  PROTOBUF_FIELD_OFFSET(::ProtoOABonusDepositWithdraw, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOABonusDepositWithdraw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOABonusDepositWithdraw, operationtype_),
  PROTOBUF_FIELD_OFFSET(::ProtoOABonusDepositWithdraw, bonushistoryid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOABonusDepositWithdraw, managerbonus_),
  PROTOBUF_FIELD_OFFSET(::ProtoOABonusDepositWithdraw, managerdelta_),
  PROTOBUF_FIELD_OFFSET(::ProtoOABonusDepositWithdraw, ibbonus_),
  PROTOBUF_FIELD_OFFSET(::ProtoOABonusDepositWithdraw, ibdelta_),
  PROTOBUF_FIELD_OFFSET(::ProtoOABonusDepositWithdraw, changebonustimestamp_),
  PROTOBUF_FIELD_OFFSET(::ProtoOABonusDepositWithdraw, externalnote_),
  PROTOBUF_FIELD_OFFSET(::ProtoOABonusDepositWithdraw, introducingbrokerid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOABonusDepositWithdraw, moneydigits_),
  5,
  1,
  2,
  3,
  4,
  7,
  8,
  0,
  9,
  6,
  PROTOBUF_FIELD_OFFSET(::ProtoOADepositWithdraw, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADepositWithdraw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOADepositWithdraw, operationtype_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADepositWithdraw, balancehistoryid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADepositWithdraw, balance_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADepositWithdraw, delta_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADepositWithdraw, changebalancetimestamp_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADepositWithdraw, externalnote_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADepositWithdraw, balanceversion_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADepositWithdraw, equity_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADepositWithdraw, moneydigits_),
  5,
  1,
  2,
  3,
  4,
  0,
  7,
  8,
  6,
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, dealid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, orderid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, positionid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, volume_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, filledvolume_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, symbolid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, createtimestamp_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, executiontimestamp_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, utclastupdatetimestamp_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, executionprice_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, tradeside_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, dealstatus_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, marginrate_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, commission_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, basetousdconversionrate_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, closepositiondetail_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADeal, moneydigits_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  15,
  16,
  11,
  12,
  13,
  0,
  14,
  PROTOBUF_FIELD_OFFSET(::ProtoOAClosePositionDetail, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAClosePositionDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOAClosePositionDetail, entryprice_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAClosePositionDetail, grossprofit_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAClosePositionDetail, swap_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAClosePositionDetail, commission_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAClosePositionDetail, balance_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAClosePositionDetail, quotetodepositconversionrate_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAClosePositionDetail, closedvolume_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAClosePositionDetail, balanceversion_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAClosePositionDetail, moneydigits_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::ProtoOATrendbar, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrendbar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOATrendbar, volume_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrendbar, period_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrendbar, low_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrendbar, deltaopen_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrendbar, deltaclose_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrendbar, deltahigh_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATrendbar, utctimestampinminutes_),
  0,
  6,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::ProtoOAExpectedMargin, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAExpectedMargin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOAExpectedMargin, volume_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAExpectedMargin, buymargin_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAExpectedMargin, sellmargin_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ProtoOATickData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATickData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOATickData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::ProtoOATickData, tick_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ProtoOACtidProfile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOACtidProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOACtidProfile, userid_),
  0,
  PROTOBUF_FIELD_OFFSET(::ProtoOACtidTraderAccount, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOACtidTraderAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOACtidTraderAccount, ctidtraderaccountid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOACtidTraderAccount, islive_),
  PROTOBUF_FIELD_OFFSET(::ProtoOACtidTraderAccount, traderlogin_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::ProtoOAAssetClass, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAAssetClass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOAAssetClass, id_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAAssetClass, name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ProtoOADepthQuote, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADepthQuote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOADepthQuote, id_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADepthQuote, size_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADepthQuote, bid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOADepthQuote, ask_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ProtoOAMarginCall, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAMarginCall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOAMarginCall, margincalltype_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAMarginCall, marginlevelthreshold_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAMarginCall, utclastupdatetimestamp_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ProtoOAHoliday, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAHoliday, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoOAHoliday, holidayid_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAHoliday, name_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAHoliday, description_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAHoliday, scheduletimezone_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAHoliday, holidaydate_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAHoliday, isrecurring_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAHoliday, startsecond_),
  PROTOBUF_FIELD_OFFSET(::ProtoOAHoliday, endsecond_),
  3,
  0,
  1,
  2,
  4,
  5,
  6,
  7,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::ProtoOAAsset)},
  { 13, 51, sizeof(::ProtoOASymbol)},
  { 84, 96, sizeof(::ProtoOALightSymbol)},
  { 103, 112, sizeof(::ProtoOAArchivedSymbol)},
  { 116, 124, sizeof(::ProtoOASymbolCategory)},
  { 127, 134, sizeof(::ProtoOAInterval)},
  { 136, 161, sizeof(::ProtoOATrader)},
  { 181, 201, sizeof(::ProtoOAPosition)},
  { 216, 228, sizeof(::ProtoOATradeData)},
  { 235, 263, sizeof(::ProtoOAOrder)},
  { 286, 301, sizeof(::ProtoOABonusDepositWithdraw)},
  { 311, 325, sizeof(::ProtoOADepositWithdraw)},
  { 334, 356, sizeof(::ProtoOADeal)},
  { 373, 387, sizeof(::ProtoOAClosePositionDetail)},
  { 396, 408, sizeof(::ProtoOATrendbar)},
  { 415, 423, sizeof(::ProtoOAExpectedMargin)},
  { 426, 433, sizeof(::ProtoOATickData)},
  { 435, 441, sizeof(::ProtoOACtidProfile)},
  { 442, 450, sizeof(::ProtoOACtidTraderAccount)},
  { 453, 460, sizeof(::ProtoOAAssetClass)},
  { 462, 471, sizeof(::ProtoOADepthQuote)},
  { 475, 483, sizeof(::ProtoOAMarginCall)},
  { 486, 499, sizeof(::ProtoOAHoliday)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOAAsset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOASymbol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOALightSymbol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOAArchivedSymbol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOASymbolCategory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOAInterval_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOATrader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOAPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOATradeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOAOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOABonusDepositWithdraw_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOADepositWithdraw_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOADeal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOAClosePositionDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOATrendbar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOAExpectedMargin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOATickData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOACtidProfile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOACtidTraderAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOAAssetClass_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOADepthQuote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOAMarginCall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProtoOAHoliday_default_instance_),
};

const char descriptor_table_protodef_OpenApiModelMessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032OpenApiModelMessages.proto\"R\n\014ProtoOAA"
  "sset\022\017\n\007assetId\030\001 \002(\003\022\014\n\004name\030\002 \002(\t\022\023\n\013d"
  "isplayName\030\003 \001(\t\022\016\n\006digits\030\004 \001(\005\"\271\010\n\rPro"
  "toOASymbol\022\020\n\010symbolId\030\001 \002(\003\022\016\n\006digits\030\002"
  " \002(\005\022\023\n\013pipPosition\030\003 \002(\005\022\032\n\022enableShort"
  "Selling\030\004 \001(\010\022\032\n\022guaranteedStopLoss\030\005 \001("
  "\010\0224\n\021swapRollover3Days\030\006 \001(\0162\021.ProtoOADa"
  "yOfWeek:\006MONDAY\022\020\n\010swapLong\030\007 \001(\001\022\021\n\tswa"
  "pShort\030\010 \001(\001\022\021\n\tmaxVolume\030\t \001(\003\022\021\n\tminVo"
  "lume\030\n \001(\003\022\022\n\nstepVolume\030\013 \001(\003\022\023\n\013maxExp"
  "osure\030\014 \001(\004\022\"\n\010schedule\030\r \003(\0132\020.ProtoOAI"
  "nterval\022\026\n\ncommission\030\016 \001(\003B\002\030\001\022C\n\016commi"
  "ssionType\030\017 \001(\0162\026.ProtoOACommissionType:"
  "\023USD_PER_MILLION_USD\022\022\n\nslDistance\030\020 \001(\r"
  "\022\022\n\ntpDistance\030\021 \001(\r\022\023\n\013gslDistance\030\022 \001("
  "\r\022\021\n\tgslCharge\030\023 \001(\003\022L\n\rdistanceSetIn\030\024 "
  "\001(\0162\032.ProtoOASymbolDistanceType:\031SYMBOL_"
  "DISTANCE_IN_POINTS\022\031\n\rminCommission\030\025 \001("
  "\003B\002\030\001\022>\n\021minCommissionType\030\026 \001(\0162\031.Proto"
  "OAMinCommissionType:\010CURRENCY\022\037\n\022minComm"
  "issionAsset\030\027 \001(\t:\003USD\022\032\n\022rolloverCommis"
  "sion\030\030 \001(\003\022\030\n\020skipRolloverDays\030\031 \001(\005\022\030\n\020"
  "scheduleTimeZone\030\032 \001(\t\0221\n\013tradingMode\030\033 "
  "\001(\0162\023.ProtoOATradingMode:\007ENABLED\022:\n\027rol"
  "loverCommission3Days\030\034 \001(\0162\021.ProtoOADayO"
  "fWeek:\006MONDAY\022>\n\023swapCalculationType\030\035 \001"
  "(\0162\033.ProtoOASwapCalculationType:\004PIPS\022\017\n"
  "\007lotSize\030\036 \001(\003\022$\n\034preciseTradingCommissi"
  "onRate\030\037 \001(\003\022\034\n\024preciseMinCommission\030  \001"
  "(\003\022 \n\007holiday\030! \003(\0132\017.ProtoOAHoliday\"\245\001\n"
  "\022ProtoOALightSymbol\022\020\n\010symbolId\030\001 \002(\003\022\022\n"
  "\nsymbolName\030\002 \001(\t\022\017\n\007enabled\030\003 \001(\010\022\023\n\013ba"
  "seAssetId\030\004 \001(\003\022\024\n\014quoteAssetId\030\005 \001(\003\022\030\n"
  "\020symbolCategoryId\030\006 \001(\003\022\023\n\013description\030\007"
  " \001(\t\"l\n\025ProtoOAArchivedSymbol\022\020\n\010symbolI"
  "d\030\001 \002(\003\022\014\n\004name\030\002 \002(\t\022\036\n\026utcLastUpdateTi"
  "mestamp\030\003 \002(\003\022\023\n\013description\030\004 \001(\t\"G\n\025Pr"
  "otoOASymbolCategory\022\n\n\002id\030\001 \002(\003\022\024\n\014asset"
  "ClassId\030\002 \002(\003\022\014\n\004name\030\003 \002(\t\"9\n\017ProtoOAIn"
  "terval\022\023\n\013startSecond\030\003 \002(\r\022\021\n\tendSecond"
  "\030\004 \002(\r\"\244\005\n\rProtoOATrader\022\033\n\023ctidTraderAc"
  "countId\030\001 \002(\003\022\017\n\007balance\030\002 \002(\003\022\026\n\016balanc"
  "eVersion\030\003 \001(\003\022\024\n\014managerBonus\030\004 \001(\003\022\017\n\007"
  "ibBonus\030\005 \001(\003\022\034\n\024nonWithdrawableBonus\030\006 "
  "\001(\003\0227\n\014accessRights\030\007 \001(\0162\024.ProtoOAAcces"
  "sRights:\013FULL_ACCESS\022\026\n\016depositAssetId\030\010"
  " \002(\003\022\020\n\010swapFree\030\t \001(\010\022\027\n\017leverageInCent"
  "s\030\n \001(\r\022F\n\032totalMarginCalculationType\030\013 "
  "\001(\0162\".ProtoOATotalMarginCalculationType\022"
  "\023\n\013maxLeverage\030\014 \001(\r\022\026\n\nfrenchRisk\030\r \001(\010"
  "B\002\030\001\022\023\n\013traderLogin\030\016 \001(\003\0220\n\013accountType"
  "\030\017 \001(\0162\023.ProtoOAAccountType:\006HEDGED\022\022\n\nb"
  "rokerName\030\020 \001(\t\022\035\n\025registrationTimestamp"
  "\030\021 \001(\003\022\025\n\risLimitedRisk\030\022 \001(\010\022q\n$limited"
  "RiskMarginCalculationStrategy\030\023 \001(\0162,.Pr"
  "otoOALimitedRiskMarginCalculationStrateg"
  "y:\025ACCORDING_TO_LEVERAGE\022\023\n\013moneyDigits\030"
  "\024 \001(\r\"\252\003\n\017ProtoOAPosition\022\022\n\npositionId\030"
  "\001 \002(\003\022$\n\ttradeData\030\002 \002(\0132\021.ProtoOATradeD"
  "ata\022.\n\016positionStatus\030\003 \002(\0162\026.ProtoOAPos"
  "itionStatus\022\014\n\004swap\030\004 \002(\003\022\r\n\005price\030\005 \001(\001"
  "\022\020\n\010stopLoss\030\006 \001(\001\022\022\n\ntakeProfit\030\007 \001(\001\022\036"
  "\n\026utcLastUpdateTimestamp\030\010 \001(\003\022\022\n\ncommis"
  "sion\030\t \001(\003\022\022\n\nmarginRate\030\n \001(\001\022\033\n\023mirror"
  "ingCommission\030\013 \001(\003\022\032\n\022guaranteedStopLos"
  "s\030\014 \001(\010\022\022\n\nusedMargin\030\r \001(\004\022@\n\025stopLossT"
  "riggerMethod\030\016 \001(\0162\032.ProtoOAOrderTrigger"
  "Method:\005TRADE\022\023\n\013moneyDigits\030\017 \001(\r\"\255\001\n\020P"
  "rotoOATradeData\022\020\n\010symbolId\030\001 \002(\003\022\016\n\006vol"
  "ume\030\002 \002(\003\022$\n\ttradeSide\030\003 \002(\0162\021.ProtoOATr"
  "adeSide\022\025\n\ropenTimestamp\030\004 \001(\003\022\r\n\005label\030"
  "\005 \001(\t\022\032\n\022guaranteedStopLoss\030\006 \001(\010\022\017\n\007com"
  "ment\030\007 \001(\t\"\245\005\n\014ProtoOAOrder\022\017\n\007orderId\030\001"
  " \002(\003\022$\n\ttradeData\030\002 \002(\0132\021.ProtoOATradeDa"
  "ta\022$\n\torderType\030\003 \002(\0162\021.ProtoOAOrderType"
  "\022(\n\013orderStatus\030\004 \002(\0162\023.ProtoOAOrderStat"
  "us\022\033\n\023expirationTimestamp\030\006 \001(\003\022\026\n\016execu"
  "tionPrice\030\007 \001(\001\022\026\n\016executedVolume\030\010 \001(\003\022"
  "\036\n\026utcLastUpdateTimestamp\030\t \001(\003\022\031\n\021baseS"
  "lippagePrice\030\n \001(\001\022\030\n\020slippageInPoints\030\013"
  " \001(\003\022\024\n\014closingOrder\030\014 \001(\010\022\022\n\nlimitPrice"
  "\030\r \001(\001\022\021\n\tstopPrice\030\016 \001(\001\022\020\n\010stopLoss\030\017 "
  "\001(\001\022\022\n\ntakeProfit\030\020 \001(\001\022\025\n\rclientOrderId"
  "\030\021 \001(\t\022=\n\013timeInForce\030\022 \001(\0162\023.ProtoOATim"
  "eInForce:\023IMMEDIATE_OR_CANCEL\022\022\n\npositio"
  "nId\030\023 \001(\003\022\030\n\020relativeStopLoss\030\024 \001(\003\022\032\n\022r"
  "elativeTakeProfit\030\025 \001(\003\022\021\n\tisStopOut\030\026 \001"
  "(\010\022\030\n\020trailingStopLoss\030\027 \001(\010\022<\n\021stopTrig"
  "gerMethod\030\030 \001(\0162\032.ProtoOAOrderTriggerMet"
  "hod:\005TRADE\"\231\002\n\033ProtoOABonusDepositWithdr"
  "aw\022.\n\roperationType\030\001 \002(\0162\027.ProtoOAChang"
  "eBonusType\022\026\n\016bonusHistoryId\030\002 \002(\003\022\024\n\014ma"
  "nagerBonus\030\003 \002(\003\022\024\n\014managerDelta\030\004 \002(\003\022\017"
  "\n\007ibBonus\030\005 \002(\003\022\017\n\007ibDelta\030\006 \002(\003\022\034\n\024chan"
  "geBonusTimestamp\030\007 \002(\003\022\024\n\014externalNote\030\010"
  " \001(\t\022\033\n\023introducingBrokerId\030\t \001(\003\022\023\n\013mon"
  "eyDigits\030\n \001(\r\"\367\001\n\026ProtoOADepositWithdra"
  "w\0220\n\roperationType\030\001 \002(\0162\031.ProtoOAChange"
  "BalanceType\022\030\n\020balanceHistoryId\030\002 \002(\003\022\017\n"
  "\007balance\030\003 \002(\003\022\r\n\005delta\030\004 \002(\003\022\036\n\026changeB"
  "alanceTimestamp\030\005 \002(\003\022\024\n\014externalNote\030\006 "
  "\001(\t\022\026\n\016balanceVersion\030\007 \001(\003\022\016\n\006equity\030\010 "
  "\001(\003\022\023\n\013moneyDigits\030\t \001(\r\"\315\003\n\013ProtoOADeal"
  "\022\016\n\006dealId\030\001 \002(\003\022\017\n\007orderId\030\002 \002(\003\022\022\n\npos"
  "itionId\030\003 \002(\003\022\016\n\006volume\030\004 \002(\003\022\024\n\014filledV"
  "olume\030\005 \002(\003\022\020\n\010symbolId\030\006 \002(\003\022\027\n\017createT"
  "imestamp\030\007 \002(\003\022\032\n\022executionTimestamp\030\010 \002"
  "(\003\022\036\n\026utcLastUpdateTimestamp\030\t \001(\003\022\026\n\016ex"
  "ecutionPrice\030\n \001(\001\022$\n\ttradeSide\030\013 \002(\0162\021."
  "ProtoOATradeSide\022&\n\ndealStatus\030\014 \002(\0162\022.P"
  "rotoOADealStatus\022\022\n\nmarginRate\030\r \001(\001\022\022\n\n"
  "commission\030\016 \001(\003\022\037\n\027baseToUsdConversionR"
  "ate\030\017 \001(\001\0228\n\023closePositionDetail\030\020 \001(\0132\033"
  ".ProtoOAClosePositionDetail\022\023\n\013moneyDigi"
  "ts\030\021 \001(\r\"\341\001\n\032ProtoOAClosePositionDetail\022"
  "\022\n\nentryPrice\030\001 \002(\001\022\023\n\013grossProfit\030\002 \002(\003"
  "\022\014\n\004swap\030\003 \002(\003\022\022\n\ncommission\030\004 \002(\003\022\017\n\007ba"
  "lance\030\005 \002(\003\022$\n\034quoteToDepositConversionR"
  "ate\030\006 \001(\001\022\024\n\014closedVolume\030\007 \001(\003\022\026\n\016balan"
  "ceVersion\030\010 \001(\003\022\023\n\013moneyDigits\030\t \001(\r\"\263\001\n"
  "\017ProtoOATrendbar\022\016\n\006volume\030\003 \002(\003\022*\n\006peri"
  "od\030\004 \001(\0162\026.ProtoOATrendbarPeriod:\002M1\022\013\n\003"
  "low\030\005 \001(\003\022\021\n\tdeltaOpen\030\006 \001(\004\022\022\n\ndeltaClo"
  "se\030\007 \001(\004\022\021\n\tdeltaHigh\030\010 \001(\004\022\035\n\025utcTimest"
  "ampInMinutes\030\t \001(\r\"N\n\025ProtoOAExpectedMar"
  "gin\022\016\n\006volume\030\001 \002(\003\022\021\n\tbuyMargin\030\002 \002(\003\022\022"
  "\n\nsellMargin\030\003 \002(\003\"2\n\017ProtoOATickData\022\021\n"
  "\ttimestamp\030\001 \002(\003\022\014\n\004tick\030\002 \002(\003\"$\n\022ProtoO"
  "ACtidProfile\022\016\n\006userId\030\001 \002(\003\"\\\n\030ProtoOAC"
  "tidTraderAccount\022\033\n\023ctidTraderAccountId\030"
  "\001 \002(\004\022\016\n\006isLive\030\002 \001(\010\022\023\n\013traderLogin\030\003 \001"
  "(\003\"-\n\021ProtoOAAssetClass\022\n\n\002id\030\001 \001(\003\022\014\n\004n"
  "ame\030\002 \001(\t\"G\n\021ProtoOADepthQuote\022\n\n\002id\030\001 \002"
  "(\004\022\014\n\004size\030\003 \002(\004\022\013\n\003bid\030\004 \001(\004\022\013\n\003ask\030\005 \001"
  "(\004\"\203\001\n\021ProtoOAMarginCall\0220\n\016marginCallTy"
  "pe\030\001 \002(\0162\030.ProtoOANotificationType\022\034\n\024ma"
  "rginLevelThreshold\030\002 \002(\001\022\036\n\026utcLastUpdat"
  "eTimestamp\030\003 \001(\003\"\262\001\n\016ProtoOAHoliday\022\021\n\th"
  "olidayId\030\001 \002(\003\022\014\n\004name\030\002 \002(\t\022\023\n\013descript"
  "ion\030\003 \001(\t\022\030\n\020scheduleTimeZone\030\004 \002(\t\022\023\n\013h"
  "olidayDate\030\005 \002(\003\022\023\n\013isRecurring\030\006 \002(\010\022\023\n"
  "\013startSecond\030\007 \001(\005\022\021\n\tendSecond\030\010 \001(\005*\213\025"
  "\n\022ProtoOAPayloadType\022\"\n\035PROTO_OA_APPLICA"
  "TION_AUTH_REQ\020\264\020\022\"\n\035PROTO_OA_APPLICATION"
  "_AUTH_RES\020\265\020\022\036\n\031PROTO_OA_ACCOUNT_AUTH_RE"
  "Q\020\266\020\022\036\n\031PROTO_OA_ACCOUNT_AUTH_RES\020\267\020\022\031\n\024"
  "PROTO_OA_VERSION_REQ\020\270\020\022\031\n\024PROTO_OA_VERS"
  "ION_RES\020\271\020\022\033\n\026PROTO_OA_NEW_ORDER_REQ\020\272\020\022"
  "\'\n\"PROTO_OA_TRAILING_SL_CHANGED_EVENT\020\273\020"
  "\022\036\n\031PROTO_OA_CANCEL_ORDER_REQ\020\274\020\022\035\n\030PROT"
  "O_OA_AMEND_ORDER_REQ\020\275\020\022%\n PROTO_OA_AMEN"
  "D_POSITION_SLTP_REQ\020\276\020\022 \n\033PROTO_OA_CLOSE"
  "_POSITION_REQ\020\277\020\022\034\n\027PROTO_OA_ASSET_LIST_"
  "REQ\020\300\020\022\034\n\027PROTO_OA_ASSET_LIST_RES\020\301\020\022\036\n\031"
  "PROTO_OA_SYMBOLS_LIST_REQ\020\302\020\022\036\n\031PROTO_OA"
  "_SYMBOLS_LIST_RES\020\303\020\022\036\n\031PROTO_OA_SYMBOL_"
  "BY_ID_REQ\020\304\020\022\036\n\031PROTO_OA_SYMBOL_BY_ID_RE"
  "S\020\305\020\022(\n#PROTO_OA_SYMBOLS_FOR_CONVERSION_"
  "REQ\020\306\020\022(\n#PROTO_OA_SYMBOLS_FOR_CONVERSIO"
  "N_RES\020\307\020\022\"\n\035PROTO_OA_SYMBOL_CHANGED_EVEN"
  "T\020\310\020\022\030\n\023PROTO_OA_TRADER_REQ\020\311\020\022\030\n\023PROTO_"
  "OA_TRADER_RES\020\312\020\022!\n\034PROTO_OA_TRADER_UPDA"
  "TE_EVENT\020\313\020\022\033\n\026PROTO_OA_RECONCILE_REQ\020\314\020"
  "\022\033\n\026PROTO_OA_RECONCILE_RES\020\315\020\022\035\n\030PROTO_O"
  "A_EXECUTION_EVENT\020\316\020\022!\n\034PROTO_OA_SUBSCRI"
  "BE_SPOTS_REQ\020\317\020\022!\n\034PROTO_OA_SUBSCRIBE_SP"
  "OTS_RES\020\320\020\022#\n\036PROTO_OA_UNSUBSCRIBE_SPOTS"
  "_REQ\020\321\020\022#\n\036PROTO_OA_UNSUBSCRIBE_SPOTS_RE"
  "S\020\322\020\022\030\n\023PROTO_OA_SPOT_EVENT\020\323\020\022\037\n\032PROTO_"
  "OA_ORDER_ERROR_EVENT\020\324\020\022\033\n\026PROTO_OA_DEAL"
  "_LIST_REQ\020\325\020\022\033\n\026PROTO_OA_DEAL_LIST_RES\020\326"
  "\020\022)\n$PROTO_OA_SUBSCRIBE_LIVE_TRENDBAR_RE"
  "Q\020\327\020\022+\n&PROTO_OA_UNSUBSCRIBE_LIVE_TRENDB"
  "AR_REQ\020\330\020\022\037\n\032PROTO_OA_GET_TRENDBARS_REQ\020"
  "\331\020\022\037\n\032PROTO_OA_GET_TRENDBARS_RES\020\332\020\022!\n\034P"
  "ROTO_OA_EXPECTED_MARGIN_REQ\020\333\020\022!\n\034PROTO_"
  "OA_EXPECTED_MARGIN_RES\020\334\020\022\"\n\035PROTO_OA_MA"
  "RGIN_CHANGED_EVENT\020\335\020\022\027\n\022PROTO_OA_ERROR_"
  "RES\020\336\020\022(\n#PROTO_OA_CASH_FLOW_HISTORY_LIS"
  "T_REQ\020\337\020\022(\n#PROTO_OA_CASH_FLOW_HISTORY_L"
  "IST_RES\020\340\020\022\036\n\031PROTO_OA_GET_TICKDATA_REQ\020"
  "\341\020\022\036\n\031PROTO_OA_GET_TICKDATA_RES\020\342\020\022.\n)PR"
  "OTO_OA_ACCOUNTS_TOKEN_INVALIDATED_EVENT\020"
  "\343\020\022%\n PROTO_OA_CLIENT_DISCONNECT_EVENT\020\344"
  "\020\022.\n)PROTO_OA_GET_ACCOUNTS_BY_ACCESS_TOK"
  "EN_REQ\020\345\020\022.\n)PROTO_OA_GET_ACCOUNTS_BY_AC"
  "CESS_TOKEN_RES\020\346\020\022+\n&PROTO_OA_GET_CTID_P"
  "ROFILE_BY_TOKEN_REQ\020\347\020\022+\n&PROTO_OA_GET_C"
  "TID_PROFILE_BY_TOKEN_RES\020\350\020\022\"\n\035PROTO_OA_"
  "ASSET_CLASS_LIST_REQ\020\351\020\022\"\n\035PROTO_OA_ASSE"
  "T_CLASS_LIST_RES\020\352\020\022\031\n\024PROTO_OA_DEPTH_EV"
  "ENT\020\353\020\022(\n#PROTO_OA_SUBSCRIBE_DEPTH_QUOTE"
  "S_REQ\020\354\020\022(\n#PROTO_OA_SUBSCRIBE_DEPTH_QUO"
  "TES_RES\020\355\020\022*\n%PROTO_OA_UNSUBSCRIBE_DEPTH"
  "_QUOTES_REQ\020\356\020\022*\n%PROTO_OA_UNSUBSCRIBE_D"
  "EPTH_QUOTES_RES\020\357\020\022!\n\034PROTO_OA_SYMBOL_CA"
  "TEGORY_REQ\020\360\020\022!\n\034PROTO_OA_SYMBOL_CATEGOR"
  "Y_RES\020\361\020\022 \n\033PROTO_OA_ACCOUNT_LOGOUT_REQ\020"
  "\362\020\022 \n\033PROTO_OA_ACCOUNT_LOGOUT_RES\020\363\020\022&\n!"
  "PROTO_OA_ACCOUNT_DISCONNECT_EVENT\020\364\020\022)\n$"
  "PROTO_OA_SUBSCRIBE_LIVE_TRENDBAR_RES\020\365\020\022"
  "+\n&PROTO_OA_UNSUBSCRIBE_LIVE_TRENDBAR_RE"
  "S\020\366\020\022\"\n\035PROTO_OA_MARGIN_CALL_LIST_REQ\020\367\020"
  "\022\"\n\035PROTO_OA_MARGIN_CALL_LIST_RES\020\370\020\022$\n\037"
  "PROTO_OA_MARGIN_CALL_UPDATE_REQ\020\371\020\022$\n\037PR"
  "OTO_OA_MARGIN_CALL_UPDATE_RES\020\372\020\022&\n!PROT"
  "O_OA_MARGIN_CALL_UPDATE_EVENT\020\373\020\022\'\n\"PROT"
  "O_OA_MARGIN_CALL_TRIGGER_EVENT\020\374\020\022\037\n\032PRO"
  "TO_OA_REFRESH_TOKEN_REQ\020\375\020\022\037\n\032PROTO_OA_R"
  "EFRESH_TOKEN_RES\020\376\020*x\n\020ProtoOADayOfWeek\022"
  "\010\n\004NONE\020\000\022\n\n\006MONDAY\020\001\022\013\n\007TUESDAY\020\002\022\r\n\tWE"
  "DNESDAY\020\003\022\014\n\010THURSDAY\020\004\022\n\n\006FRIDAY\020\005\022\014\n\010S"
  "ATURDAY\020\006\022\n\n\006SUNDAY\020\007*q\n\025ProtoOACommissi"
  "onType\022\027\n\023USD_PER_MILLION_USD\020\001\022\017\n\013USD_P"
  "ER_LOT\020\002\022\027\n\023PERCENTAGE_OF_VALUE\020\003\022\025\n\021QUO"
  "TE_CCY_PER_LOT\020\004*]\n\031ProtoOASymbolDistanc"
  "eType\022\035\n\031SYMBOL_DISTANCE_IN_POINTS\020\001\022!\n\035"
  "SYMBOL_DISTANCE_IN_PERCENTAGE\020\002*<\n\030Proto"
  "OAMinCommissionType\022\014\n\010CURRENCY\020\001\022\022\n\016QUO"
  "TE_CURRENCY\020\002*\205\001\n\022ProtoOATradingMode\022\013\n\007"
  "ENABLED\020\000\022\'\n#DISABLED_WITHOUT_PENDINGS_E"
  "XECUTION\020\001\022$\n DISABLED_WITH_PENDINGS_EXE"
  "CUTION\020\002\022\023\n\017CLOSE_ONLY_MODE\020\003*6\n\032ProtoOA"
  "SwapCalculationType\022\010\n\004PIPS\020\000\022\016\n\nPERCENT"
  "AGE\020\001*T\n\023ProtoOAAccessRights\022\017\n\013FULL_ACC"
  "ESS\020\000\022\016\n\nCLOSE_ONLY\020\001\022\016\n\nNO_TRADING\020\002\022\014\n"
  "\010NO_LOGIN\020\003*>\n!ProtoOATotalMarginCalcula"
  "tionType\022\007\n\003MAX\020\000\022\007\n\003SUM\020\001\022\007\n\003NET\020\002*@\n\022P"
  "rotoOAAccountType\022\n\n\006HEDGED\020\000\022\n\n\006NETTED\020"
  "\001\022\022\n\016SPREAD_BETTING\020\002*\205\001\n\025ProtoOAPositio"
  "nStatus\022\030\n\024POSITION_STATUS_OPEN\020\001\022\032\n\026POS"
  "ITION_STATUS_CLOSED\020\002\022\033\n\027POSITION_STATUS"
  "_CREATED\020\003\022\031\n\025POSITION_STATUS_ERROR\020\004*%\n"
  "\020ProtoOATradeSide\022\007\n\003BUY\020\001\022\010\n\004SELL\020\002*p\n\020"
  "ProtoOAOrderType\022\n\n\006MARKET\020\001\022\t\n\005LIMIT\020\002\022"
  "\010\n\004STOP\020\003\022\031\n\025STOP_LOSS_TAKE_PROFIT\020\004\022\020\n\014"
  "MARKET_RANGE\020\005\022\016\n\nSTOP_LIMIT\020\006*}\n\022ProtoO"
  "ATimeInForce\022\022\n\016GOOD_TILL_DATE\020\001\022\024\n\020GOOD"
  "_TILL_CANCEL\020\002\022\027\n\023IMMEDIATE_OR_CANCEL\020\003\022"
  "\020\n\014FILL_OR_KILL\020\004\022\022\n\016MARKET_ON_OPEN\020\005*\231\001"
  "\n\022ProtoOAOrderStatus\022\031\n\025ORDER_STATUS_ACC"
  "EPTED\020\001\022\027\n\023ORDER_STATUS_FILLED\020\002\022\031\n\025ORDE"
  "R_STATUS_REJECTED\020\003\022\030\n\024ORDER_STATUS_EXPI"
  "RED\020\004\022\032\n\026ORDER_STATUS_CANCELLED\020\005*[\n\031Pro"
  "toOAOrderTriggerMethod\022\t\n\005TRADE\020\001\022\014\n\010OPP"
  "OSITE\020\002\022\020\n\014DOUBLE_TRADE\020\003\022\023\n\017DOUBLE_OPPO"
  "SITE\020\004*\373\001\n\024ProtoOAExecutionType\022\022\n\016ORDER"
  "_ACCEPTED\020\002\022\020\n\014ORDER_FILLED\020\003\022\022\n\016ORDER_R"
  "EPLACED\020\004\022\023\n\017ORDER_CANCELLED\020\005\022\021\n\rORDER_"
  "EXPIRED\020\006\022\022\n\016ORDER_REJECTED\020\007\022\031\n\025ORDER_C"
  "ANCEL_REJECTED\020\010\022\010\n\004SWAP\020\t\022\024\n\020DEPOSIT_WI"
  "THDRAW\020\n\022\026\n\022ORDER_PARTIAL_FILL\020\013\022\032\n\026BONU"
  "S_DEPOSIT_WITHDRAW\020\014*\?\n\026ProtoOAChangeBon"
  "usType\022\021\n\rBONUS_DEPOSIT\020\000\022\022\n\016BONUS_WITHD"
  "RAW\020\001*\207\n\n\030ProtoOAChangeBalanceType\022\023\n\017BA"
  "LANCE_DEPOSIT\020\000\022\024\n\020BALANCE_WITHDRAW\020\001\022-\n"
  ")BALANCE_DEPOSIT_STRATEGY_COMMISSION_INN"
  "ER\020\003\022.\n*BALANCE_WITHDRAW_STRATEGY_COMMIS"
  "SION_INNER\020\004\022\"\n\036BALANCE_DEPOSIT_IB_COMMI"
  "SSIONS\020\005\022)\n%BALANCE_WITHDRAW_IB_SHARED_P"
  "ERCENTAGE\020\006\0224\n0BALANCE_DEPOSIT_IB_SHARED"
  "_PERCENTAGE_FROM_SUB_IB\020\007\0224\n0BALANCE_DEP"
  "OSIT_IB_SHARED_PERCENTAGE_FROM_BROKER\020\010\022"
  "\032\n\026BALANCE_DEPOSIT_REBATE\020\t\022\033\n\027BALANCE_W"
  "ITHDRAW_REBATE\020\n\022-\n)BALANCE_DEPOSIT_STRA"
  "TEGY_COMMISSION_OUTER\020\013\022.\n*BALANCE_WITHD"
  "RAW_STRATEGY_COMMISSION_OUTER\020\014\022\'\n#BALAN"
  "CE_WITHDRAW_BONUS_COMPENSATION\020\r\0223\n/BALA"
  "NCE_WITHDRAW_IB_SHARED_PERCENTAGE_TO_BRO"
  "KER\020\016\022\035\n\031BALANCE_DEPOSIT_DIVIDENDS\020\017\022\036\n\032"
  "BALANCE_WITHDRAW_DIVIDENDS\020\020\022\037\n\033BALANCE_"
  "WITHDRAW_GSL_CHARGE\020\021\022\035\n\031BALANCE_WITHDRA"
  "W_ROLLOVER\020\022\022)\n%BALANCE_DEPOSIT_NONWITHD"
  "RAWABLE_BONUS\020\023\022*\n&BALANCE_WITHDRAW_NONW"
  "ITHDRAWABLE_BONUS\020\024\022\030\n\024BALANCE_DEPOSIT_S"
  "WAP\020\025\022\031\n\025BALANCE_WITHDRAW_SWAP\020\026\022\"\n\036BALA"
  "NCE_DEPOSIT_MANAGEMENT_FEE\020\033\022#\n\037BALANCE_"
  "WITHDRAW_MANAGEMENT_FEE\020\034\022#\n\037BALANCE_DEP"
  "OSIT_PERFORMANCE_FEE\020\035\022#\n\037BALANCE_WITHDR"
  "AW_FOR_SUBACCOUNT\020\036\022!\n\035BALANCE_DEPOSIT_T"
  "O_SUBACCOUNT\020\037\022$\n BALANCE_WITHDRAW_FROM_"
  "SUBACCOUNT\020 \022#\n\037BALANCE_DEPOSIT_FROM_SUB"
  "ACCOUNT\020!\022\035\n\031BALANCE_WITHDRAW_COPY_FEE\020\""
  "\022#\n\037BALANCE_WITHDRAW_INACTIVITY_FEE\020#\022\034\n"
  "\030BALANCE_DEPOSIT_TRANSFER\020$\022\035\n\031BALANCE_W"
  "ITHDRAW_TRANSFER\020%\022#\n\037BALANCE_DEPOSIT_CO"
  "NVERTED_BONUS\020&*s\n\021ProtoOADealStatus\022\n\n\006"
  "FILLED\020\002\022\024\n\020PARTIALLY_FILLED\020\003\022\014\n\010REJECT"
  "ED\020\004\022\027\n\023INTERNALLY_REJECTED\020\005\022\t\n\005ERROR\020\006"
  "\022\n\n\006MISSED\020\007*\214\001\n\025ProtoOATrendbarPeriod\022\006"
  "\n\002M1\020\001\022\006\n\002M2\020\002\022\006\n\002M3\020\003\022\006\n\002M4\020\004\022\006\n\002M5\020\005\022\007"
  "\n\003M10\020\006\022\007\n\003M15\020\007\022\007\n\003M30\020\010\022\006\n\002H1\020\t\022\006\n\002H4\020"
  "\n\022\007\n\003H12\020\013\022\006\n\002D1\020\014\022\006\n\002W1\020\r\022\007\n\003MN1\020\016*$\n\020P"
  "rotoOAQuoteType\022\007\n\003BID\020\001\022\007\n\003ASK\020\002*\?\n\034Pro"
  "toOAClientPermissionScope\022\016\n\nSCOPE_VIEW\020"
  "\000\022\017\n\013SCOPE_TRADE\020\001*s\n\027ProtoOANotificatio"
  "nType\022\034\n\030MARGIN_LEVEL_THRESHOLD_1\020=\022\034\n\030M"
  "ARGIN_LEVEL_THRESHOLD_2\020>\022\034\n\030MARGIN_LEVE"
  "L_THRESHOLD_3\020\?*\336\010\n\020ProtoOAErrorCode\022\031\n\025"
  "OA_AUTH_TOKEN_EXPIRED\020\001\022\032\n\026ACCOUNT_NOT_A"
  "UTHORIZED\020\002\022\025\n\021ALREADY_LOGGED_IN\020\016\022\032\n\026CH"
  "_CLIENT_AUTH_FAILURE\020e\022\037\n\033CH_CLIENT_NOT_"
  "AUTHENTICATED\020f\022#\n\037CH_CLIENT_ALREADY_AUT"
  "HENTICATED\020g\022\033\n\027CH_ACCESS_TOKEN_INVALID\020"
  "h\022\033\n\027CH_SERVER_NOT_REACHABLE\020i\022$\n CH_CTI"
  "D_TRADER_ACCOUNT_NOT_FOUND\020j\022\032\n\026CH_OA_CL"
  "IENT_NOT_FOUND\020k\022\036\n\032REQUEST_FREQUENCY_EX"
  "CEEDED\020l\022\037\n\033SERVER_IS_UNDER_MAINTENANCE\020"
  "m\022\026\n\022CHANNEL_IS_BLOCKED\020n\022\036\n\032CONNECTIONS"
  "_LIMIT_EXCEEDED\020C\022\031\n\025WORSE_GSL_NOT_ALLOW"
  "ED\020D\022\026\n\022SYMBOL_HAS_HOLIDAY\020E\022\033\n\027NOT_SUBS"
  "CRIBED_TO_SPOTS\020p\022\026\n\022ALREADY_SUBSCRIBED\020"
  "q\022\024\n\020SYMBOL_NOT_FOUND\020r\022\022\n\016UNKNOWN_SYMBO"
  "L\020s\022\030\n\024INCORRECT_BOUNDARIES\020#\022\r\n\tNO_QUOT"
  "ES\020u\022\024\n\020NOT_ENOUGH_MONEY\020v\022\030\n\024MAX_EXPOSU"
  "RE_REACHED\020w\022\026\n\022POSITION_NOT_FOUND\020x\022\023\n\017"
  "ORDER_NOT_FOUND\020y\022\025\n\021POSITION_NOT_OPEN\020z"
  "\022\023\n\017POSITION_LOCKED\020{\022\026\n\022TOO_MANY_POSITI"
  "ONS\020|\022\026\n\022TRADING_BAD_VOLUME\020}\022\025\n\021TRADING"
  "_BAD_STOPS\020~\022\026\n\022TRADING_BAD_PRICES\020\177\022\026\n\021"
  "TRADING_BAD_STAKE\020\200\001\022&\n!PROTECTION_IS_TO"
  "O_CLOSE_TO_MARKET\020\201\001\022 \n\033TRADING_BAD_EXPI"
  "RATION_DATE\020\202\001\022\026\n\021PENDING_EXECUTION\020\203\001\022\025"
  "\n\020TRADING_DISABLED\020\204\001\022\030\n\023TRADING_NOT_ALL"
  "OWED\020\205\001\022\033\n\026UNABLE_TO_CANCEL_ORDER\020\206\001\022\032\n\025"
  "UNABLE_TO_AMEND_ORDER\020\207\001\022\036\n\031SHORT_SELLIN"
  "G_NOT_ALLOWED\020\210\001*\201\001\n+ProtoOALimitedRiskM"
  "arginCalculationStrategy\022\031\n\025ACCORDING_TO"
  "_LEVERAGE\020\000\022\024\n\020ACCORDING_TO_GSL\020\001\022!\n\035ACC"
  "ORDING_TO_GSL_AND_LEVERAGE\020\002BM\n%com.xtra"
  "der.protocol.openapi.v2.modelB\037Container"
  "OpenApiV2ModelMessagesP\001\240\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_OpenApiModelMessages_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_OpenApiModelMessages_2eproto_sccs[23] = {
  &scc_info_ProtoOAArchivedSymbol_OpenApiModelMessages_2eproto.base,
  &scc_info_ProtoOAAsset_OpenApiModelMessages_2eproto.base,
  &scc_info_ProtoOAAssetClass_OpenApiModelMessages_2eproto.base,
  &scc_info_ProtoOABonusDepositWithdraw_OpenApiModelMessages_2eproto.base,
  &scc_info_ProtoOAClosePositionDetail_OpenApiModelMessages_2eproto.base,
  &scc_info_ProtoOACtidProfile_OpenApiModelMessages_2eproto.base,
  &scc_info_ProtoOACtidTraderAccount_OpenApiModelMessages_2eproto.base,
  &scc_info_ProtoOADeal_OpenApiModelMessages_2eproto.base,
  &scc_info_ProtoOADepositWithdraw_OpenApiModelMessages_2eproto.base,
  &scc_info_ProtoOADepthQuote_OpenApiModelMessages_2eproto.base,
  &scc_info_ProtoOAExpectedMargin_OpenApiModelMessages_2eproto.base,
  &scc_info_ProtoOAHoliday_OpenApiModelMessages_2eproto.base,
  &scc_info_ProtoOAInterval_OpenApiModelMessages_2eproto.base,
  &scc_info_ProtoOALightSymbol_OpenApiModelMessages_2eproto.base,
  &scc_info_ProtoOAMarginCall_OpenApiModelMessages_2eproto.base,
  &scc_info_ProtoOAOrder_OpenApiModelMessages_2eproto.base,
  &scc_info_ProtoOAPosition_OpenApiModelMessages_2eproto.base,
  &scc_info_ProtoOASymbol_OpenApiModelMessages_2eproto.base,
  &scc_info_ProtoOASymbolCategory_OpenApiModelMessages_2eproto.base,
  &scc_info_ProtoOATickData_OpenApiModelMessages_2eproto.base,
  &scc_info_ProtoOATradeData_OpenApiModelMessages_2eproto.base,
  &scc_info_ProtoOATrader_OpenApiModelMessages_2eproto.base,
  &scc_info_ProtoOATrendbar_OpenApiModelMessages_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_OpenApiModelMessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_OpenApiModelMessages_2eproto = {
  false, false, descriptor_table_protodef_OpenApiModelMessages_2eproto, "OpenApiModelMessages.proto", 13267,
  &descriptor_table_OpenApiModelMessages_2eproto_once, descriptor_table_OpenApiModelMessages_2eproto_sccs, descriptor_table_OpenApiModelMessages_2eproto_deps, 23, 0,
  schemas, file_default_instances, TableStruct_OpenApiModelMessages_2eproto::offsets,
  file_level_metadata_OpenApiModelMessages_2eproto, 23, file_level_enum_descriptors_OpenApiModelMessages_2eproto, file_level_service_descriptors_OpenApiModelMessages_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_OpenApiModelMessages_2eproto(&descriptor_table_OpenApiModelMessages_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOAPayloadType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[0];
}
bool ProtoOAPayloadType_IsValid(int value) {
  switch (value) {
    case 2100:
    case 2101:
    case 2102:
    case 2103:
    case 2104:
    case 2105:
    case 2106:
    case 2107:
    case 2108:
    case 2109:
    case 2110:
    case 2111:
    case 2112:
    case 2113:
    case 2114:
    case 2115:
    case 2116:
    case 2117:
    case 2118:
    case 2119:
    case 2120:
    case 2121:
    case 2122:
    case 2123:
    case 2124:
    case 2125:
    case 2126:
    case 2127:
    case 2128:
    case 2129:
    case 2130:
    case 2131:
    case 2132:
    case 2133:
    case 2134:
    case 2135:
    case 2136:
    case 2137:
    case 2138:
    case 2139:
    case 2140:
    case 2141:
    case 2142:
    case 2143:
    case 2144:
    case 2145:
    case 2146:
    case 2147:
    case 2148:
    case 2149:
    case 2150:
    case 2151:
    case 2152:
    case 2153:
    case 2154:
    case 2155:
    case 2156:
    case 2157:
    case 2158:
    case 2159:
    case 2160:
    case 2161:
    case 2162:
    case 2163:
    case 2164:
    case 2165:
    case 2166:
    case 2167:
    case 2168:
    case 2169:
    case 2170:
    case 2171:
    case 2172:
    case 2173:
    case 2174:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOADayOfWeek_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[1];
}
bool ProtoOADayOfWeek_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOACommissionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[2];
}
bool ProtoOACommissionType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOASymbolDistanceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[3];
}
bool ProtoOASymbolDistanceType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOAMinCommissionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[4];
}
bool ProtoOAMinCommissionType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOATradingMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[5];
}
bool ProtoOATradingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOASwapCalculationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[6];
}
bool ProtoOASwapCalculationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOAAccessRights_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[7];
}
bool ProtoOAAccessRights_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOATotalMarginCalculationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[8];
}
bool ProtoOATotalMarginCalculationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOAAccountType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[9];
}
bool ProtoOAAccountType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOAPositionStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[10];
}
bool ProtoOAPositionStatus_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOATradeSide_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[11];
}
bool ProtoOATradeSide_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOAOrderType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[12];
}
bool ProtoOAOrderType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOATimeInForce_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[13];
}
bool ProtoOATimeInForce_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOAOrderStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[14];
}
bool ProtoOAOrderStatus_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOAOrderTriggerMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[15];
}
bool ProtoOAOrderTriggerMethod_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOAExecutionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[16];
}
bool ProtoOAExecutionType_IsValid(int value) {
  switch (value) {
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOAChangeBonusType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[17];
}
bool ProtoOAChangeBonusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOAChangeBalanceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[18];
}
bool ProtoOAChangeBalanceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOADealStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[19];
}
bool ProtoOADealStatus_IsValid(int value) {
  switch (value) {
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOATrendbarPeriod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[20];
}
bool ProtoOATrendbarPeriod_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOAQuoteType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[21];
}
bool ProtoOAQuoteType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOAClientPermissionScope_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[22];
}
bool ProtoOAClientPermissionScope_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOANotificationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[23];
}
bool ProtoOANotificationType_IsValid(int value) {
  switch (value) {
    case 61:
    case 62:
    case 63:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOAErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[24];
}
bool ProtoOAErrorCode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 14:
    case 35:
    case 67:
    case 68:
    case 69:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 112:
    case 113:
    case 114:
    case 115:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoOALimitedRiskMarginCalculationStrategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_OpenApiModelMessages_2eproto);
  return file_level_enum_descriptors_OpenApiModelMessages_2eproto[25];
}
bool ProtoOALimitedRiskMarginCalculationStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ProtoOAAsset::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoOAAsset>()._has_bits_);
  static void set_has_assetid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_displayname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_digits(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

ProtoOAAsset::ProtoOAAsset(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoOAAsset)
}
ProtoOAAsset::ProtoOAAsset(const ProtoOAAsset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  displayname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_displayname()) {
    displayname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_displayname(), 
      GetArena());
  }
  ::memcpy(&assetid_, &from.assetid_,
    static_cast<size_t>(reinterpret_cast<char*>(&digits_) -
    reinterpret_cast<char*>(&assetid_)) + sizeof(digits_));
  // @@protoc_insertion_point(copy_constructor:ProtoOAAsset)
}

void ProtoOAAsset::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoOAAsset_OpenApiModelMessages_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  displayname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&assetid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&digits_) -
      reinterpret_cast<char*>(&assetid_)) + sizeof(digits_));
}

ProtoOAAsset::~ProtoOAAsset() {
  // @@protoc_insertion_point(destructor:ProtoOAAsset)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProtoOAAsset::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  displayname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProtoOAAsset::ArenaDtor(void* object) {
  ProtoOAAsset* _this = reinterpret_cast< ProtoOAAsset* >(object);
  (void)_this;
}
void ProtoOAAsset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtoOAAsset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOAAsset& ProtoOAAsset::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOAAsset_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOAAsset::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOAAsset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      displayname_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&assetid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&digits_) -
        reinterpret_cast<char*>(&assetid_)) + sizeof(digits_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoOAAsset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 assetId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_assetid(&has_bits);
          assetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProtoOAAsset.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string displayName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_displayname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProtoOAAsset.displayName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 digits = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_digits(&has_bits);
          digits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOAAsset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOAAsset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 assetId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_assetid(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOAAsset.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string displayName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_displayname().data(), static_cast<int>(this->_internal_displayname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOAAsset.displayName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_displayname(), target);
  }

  // optional int32 digits = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_digits(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOAAsset)
  return target;
}

size_t ProtoOAAsset::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoOAAsset)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_assetid()) {
    // required int64 assetId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_assetid());
  }

  return total_size;
}
size_t ProtoOAAsset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOAAsset)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required int64 assetId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_assetid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string displayName = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_displayname());
  }

  // optional int32 digits = 4;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_digits());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOAAsset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOAAsset)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOAAsset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOAAsset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOAAsset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOAAsset)
    MergeFrom(*source);
  }
}

void ProtoOAAsset::MergeFrom(const ProtoOAAsset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOAAsset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_displayname(from._internal_displayname());
    }
    if (cached_has_bits & 0x00000004u) {
      assetid_ = from.assetid_;
    }
    if (cached_has_bits & 0x00000008u) {
      digits_ = from.digits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOAAsset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOAAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOAAsset::CopyFrom(const ProtoOAAsset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOAAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOAAsset::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ProtoOAAsset::InternalSwap(ProtoOAAsset* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  displayname_.Swap(&other->displayname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtoOAAsset, digits_)
      + sizeof(ProtoOAAsset::digits_)
      - PROTOBUF_FIELD_OFFSET(ProtoOAAsset, assetid_)>(
          reinterpret_cast<char*>(&assetid_),
          reinterpret_cast<char*>(&other->assetid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOAAsset::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProtoOASymbol::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoOASymbol>()._has_bits_);
  static void set_has_symbolid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_digits(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pipposition(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_enableshortselling(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_guaranteedstoploss(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_swaprollover3days(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_swaplong(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_swapshort(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_maxvolume(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_minvolume(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_stepvolume(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_maxexposure(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_commission(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_commissiontype(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_sldistance(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tpdistance(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_gsldistance(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_gslcharge(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_distancesetin(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_mincommission(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_mincommissiontype(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_mincommissionasset(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rollovercommission(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_skiprolloverdays(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_scheduletimezone(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tradingmode(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_rollovercommission3days(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_swapcalculationtype(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_lotsize(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_precisetradingcommissionrate(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_precisemincommission(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001c) ^ 0x0000001c) != 0;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ProtoOASymbol::_i_give_permission_to_break_this_code_default_mincommissionasset_{{{"USD", 3}}, {nullptr}};
ProtoOASymbol::ProtoOASymbol(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  schedule_(arena),
  holiday_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoOASymbol)
}
ProtoOASymbol::ProtoOASymbol(const ProtoOASymbol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      schedule_(from.schedule_),
      holiday_(from.holiday_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mincommissionasset_.UnsafeSetDefault(nullptr);
  if (from._internal_has_mincommissionasset()) {
    mincommissionasset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_mincommissionasset(), 
      GetArena());
  }
  scheduletimezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_scheduletimezone()) {
    scheduletimezone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scheduletimezone(), 
      GetArena());
  }
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mincommissiontype_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(mincommissiontype_));
  // @@protoc_insertion_point(copy_constructor:ProtoOASymbol)
}

void ProtoOASymbol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoOASymbol_OpenApiModelMessages_2eproto.base);
  mincommissionasset_.UnsafeSetDefault(nullptr);
  scheduletimezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&symbolid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&swapcalculationtype_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(swapcalculationtype_));
  rollovercommission3days_ = 1;
  swaprollover3days_ = 1;
  commissiontype_ = 1;
  distancesetin_ = 1;
  mincommissiontype_ = 1;
}

ProtoOASymbol::~ProtoOASymbol() {
  // @@protoc_insertion_point(destructor:ProtoOASymbol)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProtoOASymbol::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mincommissionasset_.DestroyNoArena(nullptr);
  scheduletimezone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProtoOASymbol::ArenaDtor(void* object) {
  ProtoOASymbol* _this = reinterpret_cast< ProtoOASymbol* >(object);
  (void)_this;
}
void ProtoOASymbol::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtoOASymbol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOASymbol& ProtoOASymbol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOASymbol_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOASymbol::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOASymbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  schedule_.Clear();
  holiday_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mincommissionasset_.ClearToDefault(::ProtoOASymbol::_i_give_permission_to_break_this_code_default_mincommissionasset_, GetArena());
       }
    if (cached_has_bits & 0x00000002u) {
      scheduletimezone_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&symbolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enableshortselling_) -
        reinterpret_cast<char*>(&symbolid_)) + sizeof(enableshortselling_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&guaranteedstoploss_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tpdistance_) -
        reinterpret_cast<char*>(&guaranteedstoploss_)) + sizeof(tpdistance_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&gsldistance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&precisetradingcommissionrate_) -
        reinterpret_cast<char*>(&gsldistance_)) + sizeof(precisetradingcommissionrate_));
  }
  if (cached_has_bits & 0x7f000000u) {
    ::memset(&precisemincommission_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&swapcalculationtype_) -
        reinterpret_cast<char*>(&precisemincommission_)) + sizeof(swapcalculationtype_));
    rollovercommission3days_ = 1;
    swaprollover3days_ = 1;
    commissiontype_ = 1;
    distancesetin_ = 1;
    mincommissiontype_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoOASymbol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 symbolId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_symbolid(&has_bits);
          symbolid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 digits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_digits(&has_bits);
          digits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 pipPosition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_pipposition(&has_bits);
          pipposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enableShortSelling = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_enableshortselling(&has_bits);
          enableshortselling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool guaranteedStopLoss = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_guaranteedstoploss(&has_bits);
          guaranteedstoploss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProtoOADayOfWeek swapRollover3Days = 6 [default = MONDAY];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProtoOADayOfWeek_IsValid(val))) {
            _internal_set_swaprollover3days(static_cast<::ProtoOADayOfWeek>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double swapLong = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_swaplong(&has_bits);
          swaplong_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double swapShort = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_swapshort(&has_bits);
          swapshort_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int64 maxVolume = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_maxvolume(&has_bits);
          maxvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 minVolume = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_minvolume(&has_bits);
          minvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 stepVolume = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_stepvolume(&has_bits);
          stepvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 maxExposure = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_maxexposure(&has_bits);
          maxexposure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ProtoOAInterval schedule = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_schedule(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int64 commission = 14 [deprecated = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_commission(&has_bits);
          commission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProtoOACommissionType commissionType = 15 [default = USD_PER_MILLION_USD];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProtoOACommissionType_IsValid(val))) {
            _internal_set_commissiontype(static_cast<::ProtoOACommissionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 slDistance = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_sldistance(&has_bits);
          sldistance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tpDistance = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_tpdistance(&has_bits);
          tpdistance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gslDistance = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_gsldistance(&has_bits);
          gsldistance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 gslCharge = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_gslcharge(&has_bits);
          gslcharge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProtoOASymbolDistanceType distanceSetIn = 20 [default = SYMBOL_DISTANCE_IN_POINTS];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProtoOASymbolDistanceType_IsValid(val))) {
            _internal_set_distancesetin(static_cast<::ProtoOASymbolDistanceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(20, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 minCommission = 21 [deprecated = true];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_mincommission(&has_bits);
          mincommission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProtoOAMinCommissionType minCommissionType = 22 [default = CURRENCY];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProtoOAMinCommissionType_IsValid(val))) {
            _internal_set_mincommissiontype(static_cast<::ProtoOAMinCommissionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(22, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string minCommissionAsset = 23 [default = "USD"];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_mincommissionasset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProtoOASymbol.minCommissionAsset");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 rolloverCommission = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_rollovercommission(&has_bits);
          rollovercommission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 skipRolloverDays = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_skiprolloverdays(&has_bits);
          skiprolloverdays_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string scheduleTimeZone = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_scheduletimezone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProtoOASymbol.scheduleTimeZone");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProtoOATradingMode tradingMode = 27 [default = ENABLED];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProtoOATradingMode_IsValid(val))) {
            _internal_set_tradingmode(static_cast<::ProtoOATradingMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(27, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ProtoOADayOfWeek rolloverCommission3Days = 28 [default = MONDAY];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProtoOADayOfWeek_IsValid(val))) {
            _internal_set_rollovercommission3days(static_cast<::ProtoOADayOfWeek>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(28, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ProtoOASwapCalculationType swapCalculationType = 29 [default = PIPS];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProtoOASwapCalculationType_IsValid(val))) {
            _internal_set_swapcalculationtype(static_cast<::ProtoOASwapCalculationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(29, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 lotSize = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_lotsize(&has_bits);
          lotsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 preciseTradingCommissionRate = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_precisetradingcommissionrate(&has_bits);
          precisetradingcommissionrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 preciseMinCommission = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_precisemincommission(&has_bits);
          precisemincommission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ProtoOAHoliday holiday = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_holiday(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<266>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOASymbol::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOASymbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 symbolId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_symbolid(), target);
  }

  // required int32 digits = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_digits(), target);
  }

  // required int32 pipPosition = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_pipposition(), target);
  }

  // optional bool enableShortSelling = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_enableshortselling(), target);
  }

  // optional bool guaranteedStopLoss = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_guaranteedstoploss(), target);
  }

  // optional .ProtoOADayOfWeek swapRollover3Days = 6 [default = MONDAY];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_swaprollover3days(), target);
  }

  // optional double swapLong = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_swaplong(), target);
  }

  // optional double swapShort = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_swapshort(), target);
  }

  // optional int64 maxVolume = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_maxvolume(), target);
  }

  // optional int64 minVolume = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_minvolume(), target);
  }

  // optional int64 stepVolume = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_stepvolume(), target);
  }

  // optional uint64 maxExposure = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_maxexposure(), target);
  }

  // repeated .ProtoOAInterval schedule = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_schedule_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_schedule(i), target, stream);
  }

  // optional int64 commission = 14 [deprecated = true];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_commission(), target);
  }

  // optional .ProtoOACommissionType commissionType = 15 [default = USD_PER_MILLION_USD];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      15, this->_internal_commissiontype(), target);
  }

  // optional uint32 slDistance = 16;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_sldistance(), target);
  }

  // optional uint32 tpDistance = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_tpdistance(), target);
  }

  // optional uint32 gslDistance = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_gsldistance(), target);
  }

  // optional int64 gslCharge = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(19, this->_internal_gslcharge(), target);
  }

  // optional .ProtoOASymbolDistanceType distanceSetIn = 20 [default = SYMBOL_DISTANCE_IN_POINTS];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      20, this->_internal_distancesetin(), target);
  }

  // optional int64 minCommission = 21 [deprecated = true];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(21, this->_internal_mincommission(), target);
  }

  // optional .ProtoOAMinCommissionType minCommissionType = 22 [default = CURRENCY];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      22, this->_internal_mincommissiontype(), target);
  }

  // optional string minCommissionAsset = 23 [default = "USD"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mincommissionasset().data(), static_cast<int>(this->_internal_mincommissionasset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOASymbol.minCommissionAsset");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_mincommissionasset(), target);
  }

  // optional int64 rolloverCommission = 24;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(24, this->_internal_rollovercommission(), target);
  }

  // optional int32 skipRolloverDays = 25;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_skiprolloverdays(), target);
  }

  // optional string scheduleTimeZone = 26;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_scheduletimezone().data(), static_cast<int>(this->_internal_scheduletimezone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOASymbol.scheduleTimeZone");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_scheduletimezone(), target);
  }

  // optional .ProtoOATradingMode tradingMode = 27 [default = ENABLED];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      27, this->_internal_tradingmode(), target);
  }

  // optional .ProtoOADayOfWeek rolloverCommission3Days = 28 [default = MONDAY];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      28, this->_internal_rollovercommission3days(), target);
  }

  // optional .ProtoOASwapCalculationType swapCalculationType = 29 [default = PIPS];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      29, this->_internal_swapcalculationtype(), target);
  }

  // optional int64 lotSize = 30;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(30, this->_internal_lotsize(), target);
  }

  // optional int64 preciseTradingCommissionRate = 31;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(31, this->_internal_precisetradingcommissionrate(), target);
  }

  // optional int64 preciseMinCommission = 32;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(32, this->_internal_precisemincommission(), target);
  }

  // repeated .ProtoOAHoliday holiday = 33;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_holiday_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, this->_internal_holiday(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOASymbol)
  return target;
}

size_t ProtoOASymbol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoOASymbol)
  size_t total_size = 0;

  if (_internal_has_symbolid()) {
    // required int64 symbolId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_symbolid());
  }

  if (_internal_has_digits()) {
    // required int32 digits = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_digits());
  }

  if (_internal_has_pipposition()) {
    // required int32 pipPosition = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pipposition());
  }

  return total_size;
}
size_t ProtoOASymbol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOASymbol)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001c) ^ 0x0000001c) == 0) {  // All required fields are present.
    // required int64 symbolId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_symbolid());

    // required int32 digits = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_digits());

    // required int32 pipPosition = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pipposition());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProtoOAInterval schedule = 13;
  total_size += 1UL * this->_internal_schedule_size();
  for (const auto& msg : this->schedule_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ProtoOAHoliday holiday = 33;
  total_size += 2UL * this->_internal_holiday_size();
  for (const auto& msg : this->holiday_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string minCommissionAsset = 23 [default = "USD"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mincommissionasset());
    }

    // optional string scheduleTimeZone = 26;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_scheduletimezone());
    }

  }
  if (cached_has_bits & 0x000000e0u) {
    // optional double swapLong = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double swapShort = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional bool enableShortSelling = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool guaranteedStopLoss = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional uint32 slDistance = 16;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sldistance());
    }

    // optional int64 maxVolume = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_maxvolume());
    }

    // optional int64 minVolume = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_minvolume());
    }

    // optional int64 stepVolume = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_stepvolume());
    }

    // optional uint64 maxExposure = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_maxexposure());
    }

    // optional int64 commission = 14 [deprecated = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_commission());
    }

    // optional uint32 tpDistance = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tpdistance());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 gslDistance = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gsldistance());
    }

    // optional int64 gslCharge = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_gslcharge());
    }

    // optional int64 minCommission = 21 [deprecated = true];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_mincommission());
    }

    // optional int64 rolloverCommission = 24;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_rollovercommission());
    }

    // optional int32 skipRolloverDays = 25;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_skiprolloverdays());
    }

    // optional .ProtoOATradingMode tradingMode = 27 [default = ENABLED];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tradingmode());
    }

    // optional int64 lotSize = 30;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_lotsize());
    }

    // optional int64 preciseTradingCommissionRate = 31;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_precisetradingcommissionrate());
    }

  }
  if (cached_has_bits & 0x7f000000u) {
    // optional int64 preciseMinCommission = 32;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_precisemincommission());
    }

    // optional .ProtoOASwapCalculationType swapCalculationType = 29 [default = PIPS];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_swapcalculationtype());
    }

    // optional .ProtoOADayOfWeek rolloverCommission3Days = 28 [default = MONDAY];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rollovercommission3days());
    }

    // optional .ProtoOADayOfWeek swapRollover3Days = 6 [default = MONDAY];
    if (cached_has_bits & 0x08000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_swaprollover3days());
    }

    // optional .ProtoOACommissionType commissionType = 15 [default = USD_PER_MILLION_USD];
    if (cached_has_bits & 0x10000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_commissiontype());
    }

    // optional .ProtoOASymbolDistanceType distanceSetIn = 20 [default = SYMBOL_DISTANCE_IN_POINTS];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_distancesetin());
    }

    // optional .ProtoOAMinCommissionType minCommissionType = 22 [default = CURRENCY];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mincommissiontype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOASymbol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOASymbol)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOASymbol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOASymbol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOASymbol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOASymbol)
    MergeFrom(*source);
  }
}

void ProtoOASymbol::MergeFrom(const ProtoOASymbol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOASymbol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  schedule_.MergeFrom(from.schedule_);
  holiday_.MergeFrom(from.holiday_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_mincommissionasset(from._internal_mincommissionasset());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_scheduletimezone(from._internal_scheduletimezone());
    }
    if (cached_has_bits & 0x00000004u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000008u) {
      digits_ = from.digits_;
    }
    if (cached_has_bits & 0x00000010u) {
      pipposition_ = from.pipposition_;
    }
    if (cached_has_bits & 0x00000020u) {
      swaplong_ = from.swaplong_;
    }
    if (cached_has_bits & 0x00000040u) {
      swapshort_ = from.swapshort_;
    }
    if (cached_has_bits & 0x00000080u) {
      enableshortselling_ = from.enableshortselling_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      guaranteedstoploss_ = from.guaranteedstoploss_;
    }
    if (cached_has_bits & 0x00000200u) {
      sldistance_ = from.sldistance_;
    }
    if (cached_has_bits & 0x00000400u) {
      maxvolume_ = from.maxvolume_;
    }
    if (cached_has_bits & 0x00000800u) {
      minvolume_ = from.minvolume_;
    }
    if (cached_has_bits & 0x00001000u) {
      stepvolume_ = from.stepvolume_;
    }
    if (cached_has_bits & 0x00002000u) {
      maxexposure_ = from.maxexposure_;
    }
    if (cached_has_bits & 0x00004000u) {
      commission_ = from.commission_;
    }
    if (cached_has_bits & 0x00008000u) {
      tpdistance_ = from.tpdistance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      gsldistance_ = from.gsldistance_;
    }
    if (cached_has_bits & 0x00020000u) {
      gslcharge_ = from.gslcharge_;
    }
    if (cached_has_bits & 0x00040000u) {
      mincommission_ = from.mincommission_;
    }
    if (cached_has_bits & 0x00080000u) {
      rollovercommission_ = from.rollovercommission_;
    }
    if (cached_has_bits & 0x00100000u) {
      skiprolloverdays_ = from.skiprolloverdays_;
    }
    if (cached_has_bits & 0x00200000u) {
      tradingmode_ = from.tradingmode_;
    }
    if (cached_has_bits & 0x00400000u) {
      lotsize_ = from.lotsize_;
    }
    if (cached_has_bits & 0x00800000u) {
      precisetradingcommissionrate_ = from.precisetradingcommissionrate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x7f000000u) {
    if (cached_has_bits & 0x01000000u) {
      precisemincommission_ = from.precisemincommission_;
    }
    if (cached_has_bits & 0x02000000u) {
      swapcalculationtype_ = from.swapcalculationtype_;
    }
    if (cached_has_bits & 0x04000000u) {
      rollovercommission3days_ = from.rollovercommission3days_;
    }
    if (cached_has_bits & 0x08000000u) {
      swaprollover3days_ = from.swaprollover3days_;
    }
    if (cached_has_bits & 0x10000000u) {
      commissiontype_ = from.commissiontype_;
    }
    if (cached_has_bits & 0x20000000u) {
      distancesetin_ = from.distancesetin_;
    }
    if (cached_has_bits & 0x40000000u) {
      mincommissiontype_ = from.mincommissiontype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOASymbol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOASymbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOASymbol::CopyFrom(const ProtoOASymbol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOASymbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOASymbol::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(schedule_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(holiday_)) return false;
  return true;
}

void ProtoOASymbol::InternalSwap(ProtoOASymbol* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  schedule_.InternalSwap(&other->schedule_);
  holiday_.InternalSwap(&other->holiday_);
  mincommissionasset_.Swap(&other->mincommissionasset_, nullptr, GetArena());
  scheduletimezone_.Swap(&other->scheduletimezone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtoOASymbol, swapcalculationtype_)
      + sizeof(ProtoOASymbol::swapcalculationtype_)
      - PROTOBUF_FIELD_OFFSET(ProtoOASymbol, symbolid_)>(
          reinterpret_cast<char*>(&symbolid_),
          reinterpret_cast<char*>(&other->symbolid_));
  swap(rollovercommission3days_, other->rollovercommission3days_);
  swap(swaprollover3days_, other->swaprollover3days_);
  swap(commissiontype_, other->commissiontype_);
  swap(distancesetin_, other->distancesetin_);
  swap(mincommissiontype_, other->mincommissiontype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOASymbol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProtoOALightSymbol::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoOALightSymbol>()._has_bits_);
  static void set_has_symbolid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_symbolname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_baseassetid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_quoteassetid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_symbolcategoryid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

ProtoOALightSymbol::ProtoOALightSymbol(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoOALightSymbol)
}
ProtoOALightSymbol::ProtoOALightSymbol(const ProtoOALightSymbol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  symbolname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_symbolname()) {
    symbolname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_symbolname(), 
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(enabled_));
  // @@protoc_insertion_point(copy_constructor:ProtoOALightSymbol)
}

void ProtoOALightSymbol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoOALightSymbol_OpenApiModelMessages_2eproto.base);
  symbolname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&symbolid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(enabled_));
}

ProtoOALightSymbol::~ProtoOALightSymbol() {
  // @@protoc_insertion_point(destructor:ProtoOALightSymbol)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProtoOALightSymbol::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  symbolname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProtoOALightSymbol::ArenaDtor(void* object) {
  ProtoOALightSymbol* _this = reinterpret_cast< ProtoOALightSymbol* >(object);
  (void)_this;
}
void ProtoOALightSymbol::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtoOALightSymbol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOALightSymbol& ProtoOALightSymbol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOALightSymbol_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOALightSymbol::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOALightSymbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      symbolname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&symbolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enabled_) -
        reinterpret_cast<char*>(&symbolid_)) + sizeof(enabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoOALightSymbol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 symbolId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_symbolid(&has_bits);
          symbolid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string symbolName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_symbolname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProtoOALightSymbol.symbolName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enabled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 baseAssetId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_baseassetid(&has_bits);
          baseassetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 quoteAssetId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_quoteassetid(&has_bits);
          quoteassetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 symbolCategoryId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_symbolcategoryid(&has_bits);
          symbolcategoryid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProtoOALightSymbol.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOALightSymbol::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOALightSymbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 symbolId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_symbolid(), target);
  }

  // optional string symbolName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_symbolname().data(), static_cast<int>(this->_internal_symbolname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOALightSymbol.symbolName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_symbolname(), target);
  }

  // optional bool enabled = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enabled(), target);
  }

  // optional int64 baseAssetId = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_baseassetid(), target);
  }

  // optional int64 quoteAssetId = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_quoteassetid(), target);
  }

  // optional int64 symbolCategoryId = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_symbolcategoryid(), target);
  }

  // optional string description = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOALightSymbol.description");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOALightSymbol)
  return target;
}

size_t ProtoOALightSymbol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOALightSymbol)
  size_t total_size = 0;

  // required int64 symbolId = 1;
  if (_internal_has_symbolid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_symbolid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string symbolName = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_symbolname());
    }

    // optional string description = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

  }
  if (cached_has_bits & 0x00000078u) {
    // optional int64 baseAssetId = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_baseassetid());
    }

    // optional int64 quoteAssetId = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_quoteassetid());
    }

    // optional int64 symbolCategoryId = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_symbolcategoryid());
    }

    // optional bool enabled = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOALightSymbol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOALightSymbol)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOALightSymbol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOALightSymbol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOALightSymbol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOALightSymbol)
    MergeFrom(*source);
  }
}

void ProtoOALightSymbol::MergeFrom(const ProtoOALightSymbol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOALightSymbol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_symbolname(from._internal_symbolname());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000004u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000008u) {
      baseassetid_ = from.baseassetid_;
    }
    if (cached_has_bits & 0x00000010u) {
      quoteassetid_ = from.quoteassetid_;
    }
    if (cached_has_bits & 0x00000020u) {
      symbolcategoryid_ = from.symbolcategoryid_;
    }
    if (cached_has_bits & 0x00000040u) {
      enabled_ = from.enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOALightSymbol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOALightSymbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOALightSymbol::CopyFrom(const ProtoOALightSymbol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOALightSymbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOALightSymbol::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ProtoOALightSymbol::InternalSwap(ProtoOALightSymbol* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  symbolname_.Swap(&other->symbolname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtoOALightSymbol, enabled_)
      + sizeof(ProtoOALightSymbol::enabled_)
      - PROTOBUF_FIELD_OFFSET(ProtoOALightSymbol, symbolid_)>(
          reinterpret_cast<char*>(&symbolid_),
          reinterpret_cast<char*>(&other->symbolid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOALightSymbol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProtoOAArchivedSymbol::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoOAArchivedSymbol>()._has_bits_);
  static void set_has_symbolid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_utclastupdatetimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000d) ^ 0x0000000d) != 0;
  }
};

ProtoOAArchivedSymbol::ProtoOAArchivedSymbol(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoOAArchivedSymbol)
}
ProtoOAArchivedSymbol::ProtoOAArchivedSymbol(const ProtoOAArchivedSymbol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&utclastupdatetimestamp_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(utclastupdatetimestamp_));
  // @@protoc_insertion_point(copy_constructor:ProtoOAArchivedSymbol)
}

void ProtoOAArchivedSymbol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoOAArchivedSymbol_OpenApiModelMessages_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&symbolid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&utclastupdatetimestamp_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(utclastupdatetimestamp_));
}

ProtoOAArchivedSymbol::~ProtoOAArchivedSymbol() {
  // @@protoc_insertion_point(destructor:ProtoOAArchivedSymbol)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProtoOAArchivedSymbol::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProtoOAArchivedSymbol::ArenaDtor(void* object) {
  ProtoOAArchivedSymbol* _this = reinterpret_cast< ProtoOAArchivedSymbol* >(object);
  (void)_this;
}
void ProtoOAArchivedSymbol::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtoOAArchivedSymbol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOAArchivedSymbol& ProtoOAArchivedSymbol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOAArchivedSymbol_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOAArchivedSymbol::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOAArchivedSymbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&symbolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&utclastupdatetimestamp_) -
        reinterpret_cast<char*>(&symbolid_)) + sizeof(utclastupdatetimestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoOAArchivedSymbol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 symbolId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_symbolid(&has_bits);
          symbolid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProtoOAArchivedSymbol.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 utcLastUpdateTimestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_utclastupdatetimestamp(&has_bits);
          utclastupdatetimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProtoOAArchivedSymbol.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOAArchivedSymbol::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOAArchivedSymbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 symbolId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_symbolid(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOAArchivedSymbol.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // required int64 utcLastUpdateTimestamp = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_utclastupdatetimestamp(), target);
  }

  // optional string description = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOAArchivedSymbol.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOAArchivedSymbol)
  return target;
}

size_t ProtoOAArchivedSymbol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoOAArchivedSymbol)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_symbolid()) {
    // required int64 symbolId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_symbolid());
  }

  if (_internal_has_utclastupdatetimestamp()) {
    // required int64 utcLastUpdateTimestamp = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_utclastupdatetimestamp());
  }

  return total_size;
}
size_t ProtoOAArchivedSymbol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOAArchivedSymbol)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required int64 symbolId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_symbolid());

    // required int64 utcLastUpdateTimestamp = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_utclastupdatetimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string description = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOAArchivedSymbol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOAArchivedSymbol)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOAArchivedSymbol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOAArchivedSymbol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOAArchivedSymbol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOAArchivedSymbol)
    MergeFrom(*source);
  }
}

void ProtoOAArchivedSymbol::MergeFrom(const ProtoOAArchivedSymbol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOAArchivedSymbol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000004u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000008u) {
      utclastupdatetimestamp_ = from.utclastupdatetimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOAArchivedSymbol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOAArchivedSymbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOAArchivedSymbol::CopyFrom(const ProtoOAArchivedSymbol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOAArchivedSymbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOAArchivedSymbol::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ProtoOAArchivedSymbol::InternalSwap(ProtoOAArchivedSymbol* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtoOAArchivedSymbol, utclastupdatetimestamp_)
      + sizeof(ProtoOAArchivedSymbol::utclastupdatetimestamp_)
      - PROTOBUF_FIELD_OFFSET(ProtoOAArchivedSymbol, symbolid_)>(
          reinterpret_cast<char*>(&symbolid_),
          reinterpret_cast<char*>(&other->symbolid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOAArchivedSymbol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProtoOASymbolCategory::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoOASymbolCategory>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_assetclassid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

ProtoOASymbolCategory::ProtoOASymbolCategory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoOASymbolCategory)
}
ProtoOASymbolCategory::ProtoOASymbolCategory(const ProtoOASymbolCategory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&assetclassid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(assetclassid_));
  // @@protoc_insertion_point(copy_constructor:ProtoOASymbolCategory)
}

void ProtoOASymbolCategory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoOASymbolCategory_OpenApiModelMessages_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&assetclassid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(assetclassid_));
}

ProtoOASymbolCategory::~ProtoOASymbolCategory() {
  // @@protoc_insertion_point(destructor:ProtoOASymbolCategory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProtoOASymbolCategory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProtoOASymbolCategory::ArenaDtor(void* object) {
  ProtoOASymbolCategory* _this = reinterpret_cast< ProtoOASymbolCategory* >(object);
  (void)_this;
}
void ProtoOASymbolCategory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtoOASymbolCategory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOASymbolCategory& ProtoOASymbolCategory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOASymbolCategory_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOASymbolCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOASymbolCategory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&assetclassid_) -
        reinterpret_cast<char*>(&id_)) + sizeof(assetclassid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoOASymbolCategory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 assetClassId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_assetclassid(&has_bits);
          assetclassid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProtoOASymbolCategory.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOASymbolCategory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOASymbolCategory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // required int64 assetClassId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_assetclassid(), target);
  }

  // required string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOASymbolCategory.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOASymbolCategory)
  return target;
}

size_t ProtoOASymbolCategory::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoOASymbolCategory)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_id()) {
    // required int64 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (_internal_has_assetclassid()) {
    // required int64 assetClassId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_assetclassid());
  }

  return total_size;
}
size_t ProtoOASymbolCategory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOASymbolCategory)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required int64 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());

    // required int64 assetClassId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_assetclassid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOASymbolCategory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOASymbolCategory)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOASymbolCategory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOASymbolCategory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOASymbolCategory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOASymbolCategory)
    MergeFrom(*source);
  }
}

void ProtoOASymbolCategory::MergeFrom(const ProtoOASymbolCategory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOASymbolCategory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      assetclassid_ = from.assetclassid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOASymbolCategory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOASymbolCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOASymbolCategory::CopyFrom(const ProtoOASymbolCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOASymbolCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOASymbolCategory::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ProtoOASymbolCategory::InternalSwap(ProtoOASymbolCategory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtoOASymbolCategory, assetclassid_)
      + sizeof(ProtoOASymbolCategory::assetclassid_)
      - PROTOBUF_FIELD_OFFSET(ProtoOASymbolCategory, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOASymbolCategory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProtoOAInterval::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoOAInterval>()._has_bits_);
  static void set_has_startsecond(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_endsecond(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ProtoOAInterval::ProtoOAInterval(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoOAInterval)
}
ProtoOAInterval::ProtoOAInterval(const ProtoOAInterval& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&startsecond_, &from.startsecond_,
    static_cast<size_t>(reinterpret_cast<char*>(&endsecond_) -
    reinterpret_cast<char*>(&startsecond_)) + sizeof(endsecond_));
  // @@protoc_insertion_point(copy_constructor:ProtoOAInterval)
}

void ProtoOAInterval::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&startsecond_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&endsecond_) -
      reinterpret_cast<char*>(&startsecond_)) + sizeof(endsecond_));
}

ProtoOAInterval::~ProtoOAInterval() {
  // @@protoc_insertion_point(destructor:ProtoOAInterval)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProtoOAInterval::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProtoOAInterval::ArenaDtor(void* object) {
  ProtoOAInterval* _this = reinterpret_cast< ProtoOAInterval* >(object);
  (void)_this;
}
void ProtoOAInterval::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtoOAInterval::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOAInterval& ProtoOAInterval::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOAInterval_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOAInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOAInterval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&startsecond_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&endsecond_) -
        reinterpret_cast<char*>(&startsecond_)) + sizeof(endsecond_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoOAInterval::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 startSecond = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_startsecond(&has_bits);
          startsecond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 endSecond = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_endsecond(&has_bits);
          endsecond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOAInterval::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOAInterval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 startSecond = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_startsecond(), target);
  }

  // required uint32 endSecond = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_endsecond(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOAInterval)
  return target;
}

size_t ProtoOAInterval::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoOAInterval)
  size_t total_size = 0;

  if (_internal_has_startsecond()) {
    // required uint32 startSecond = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_startsecond());
  }

  if (_internal_has_endsecond()) {
    // required uint32 endSecond = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_endsecond());
  }

  return total_size;
}
size_t ProtoOAInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOAInterval)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 startSecond = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_startsecond());

    // required uint32 endSecond = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_endsecond());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOAInterval::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOAInterval)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOAInterval* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOAInterval>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOAInterval)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOAInterval)
    MergeFrom(*source);
  }
}

void ProtoOAInterval::MergeFrom(const ProtoOAInterval& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOAInterval)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      startsecond_ = from.startsecond_;
    }
    if (cached_has_bits & 0x00000002u) {
      endsecond_ = from.endsecond_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOAInterval::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOAInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOAInterval::CopyFrom(const ProtoOAInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOAInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOAInterval::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ProtoOAInterval::InternalSwap(ProtoOAInterval* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtoOAInterval, endsecond_)
      + sizeof(ProtoOAInterval::endsecond_)
      - PROTOBUF_FIELD_OFFSET(ProtoOAInterval, startsecond_)>(
          reinterpret_cast<char*>(&startsecond_),
          reinterpret_cast<char*>(&other->startsecond_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOAInterval::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProtoOATrader::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoOATrader>()._has_bits_);
  static void set_has_ctidtraderaccountid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_balanceversion(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_managerbonus(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ibbonus(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_nonwithdrawablebonus(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_accessrights(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_depositassetid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_swapfree(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_leverageincents(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_totalmargincalculationtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_maxleverage(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_frenchrisk(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_traderlogin(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_accounttype(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_brokername(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_registrationtimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_islimitedrisk(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_limitedriskmargincalculationstrategy(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_moneydigits(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000086) ^ 0x00000086) != 0;
  }
};

ProtoOATrader::ProtoOATrader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoOATrader)
}
ProtoOATrader::ProtoOATrader(const ProtoOATrader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  brokername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_brokername()) {
    brokername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_brokername(), 
      GetArena());
  }
  ::memcpy(&ctidtraderaccountid_, &from.ctidtraderaccountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&moneydigits_) -
    reinterpret_cast<char*>(&ctidtraderaccountid_)) + sizeof(moneydigits_));
  // @@protoc_insertion_point(copy_constructor:ProtoOATrader)
}

void ProtoOATrader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoOATrader_OpenApiModelMessages_2eproto.base);
  brokername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ctidtraderaccountid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&moneydigits_) -
      reinterpret_cast<char*>(&ctidtraderaccountid_)) + sizeof(moneydigits_));
}

ProtoOATrader::~ProtoOATrader() {
  // @@protoc_insertion_point(destructor:ProtoOATrader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProtoOATrader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  brokername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProtoOATrader::ArenaDtor(void* object) {
  ProtoOATrader* _this = reinterpret_cast< ProtoOATrader* >(object);
  (void)_this;
}
void ProtoOATrader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtoOATrader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOATrader& ProtoOATrader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOATrader_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOATrader::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOATrader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    brokername_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&ctidtraderaccountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&depositassetid_) -
        reinterpret_cast<char*>(&ctidtraderaccountid_)) + sizeof(depositassetid_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&accessrights_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&accounttype_) -
        reinterpret_cast<char*>(&accessrights_)) + sizeof(accounttype_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&traderlogin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&moneydigits_) -
        reinterpret_cast<char*>(&traderlogin_)) + sizeof(moneydigits_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoOATrader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 ctidTraderAccountId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ctidtraderaccountid(&has_bits);
          ctidtraderaccountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 balance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_balance(&has_bits);
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 balanceVersion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_balanceversion(&has_bits);
          balanceversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 managerBonus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_managerbonus(&has_bits);
          managerbonus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 ibBonus = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ibbonus(&has_bits);
          ibbonus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 nonWithdrawableBonus = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_nonwithdrawablebonus(&has_bits);
          nonwithdrawablebonus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProtoOAAccessRights accessRights = 7 [default = FULL_ACCESS];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProtoOAAccessRights_IsValid(val))) {
            _internal_set_accessrights(static_cast<::ProtoOAAccessRights>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required int64 depositAssetId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_depositassetid(&has_bits);
          depositassetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool swapFree = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_swapfree(&has_bits);
          swapfree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 leverageInCents = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_leverageincents(&has_bits);
          leverageincents_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProtoOATotalMarginCalculationType totalMarginCalculationType = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProtoOATotalMarginCalculationType_IsValid(val))) {
            _internal_set_totalmargincalculationtype(static_cast<::ProtoOATotalMarginCalculationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 maxLeverage = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_maxleverage(&has_bits);
          maxleverage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool frenchRisk = 13 [deprecated = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_frenchrisk(&has_bits);
          frenchrisk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 traderLogin = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_traderlogin(&has_bits);
          traderlogin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProtoOAAccountType accountType = 15 [default = HEDGED];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProtoOAAccountType_IsValid(val))) {
            _internal_set_accounttype(static_cast<::ProtoOAAccountType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string brokerName = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_brokername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProtoOATrader.brokerName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 registrationTimestamp = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_registrationtimestamp(&has_bits);
          registrationtimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isLimitedRisk = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_islimitedrisk(&has_bits);
          islimitedrisk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProtoOALimitedRiskMarginCalculationStrategy limitedRiskMarginCalculationStrategy = 19 [default = ACCORDING_TO_LEVERAGE];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProtoOALimitedRiskMarginCalculationStrategy_IsValid(val))) {
            _internal_set_limitedriskmargincalculationstrategy(static_cast<::ProtoOALimitedRiskMarginCalculationStrategy>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(19, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 moneyDigits = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_moneydigits(&has_bits);
          moneydigits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOATrader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOATrader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 ctidTraderAccountId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_ctidtraderaccountid(), target);
  }

  // required int64 balance = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_balance(), target);
  }

  // optional int64 balanceVersion = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_balanceversion(), target);
  }

  // optional int64 managerBonus = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_managerbonus(), target);
  }

  // optional int64 ibBonus = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_ibbonus(), target);
  }

  // optional int64 nonWithdrawableBonus = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_nonwithdrawablebonus(), target);
  }

  // optional .ProtoOAAccessRights accessRights = 7 [default = FULL_ACCESS];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_accessrights(), target);
  }

  // required int64 depositAssetId = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_depositassetid(), target);
  }

  // optional bool swapFree = 9;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_swapfree(), target);
  }

  // optional uint32 leverageInCents = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_leverageincents(), target);
  }

  // optional .ProtoOATotalMarginCalculationType totalMarginCalculationType = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_totalmargincalculationtype(), target);
  }

  // optional uint32 maxLeverage = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_maxleverage(), target);
  }

  // optional bool frenchRisk = 13 [deprecated = true];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_frenchrisk(), target);
  }

  // optional int64 traderLogin = 14;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_traderlogin(), target);
  }

  // optional .ProtoOAAccountType accountType = 15 [default = HEDGED];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      15, this->_internal_accounttype(), target);
  }

  // optional string brokerName = 16;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_brokername().data(), static_cast<int>(this->_internal_brokername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOATrader.brokerName");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_brokername(), target);
  }

  // optional int64 registrationTimestamp = 17;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->_internal_registrationtimestamp(), target);
  }

  // optional bool isLimitedRisk = 18;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_islimitedrisk(), target);
  }

  // optional .ProtoOALimitedRiskMarginCalculationStrategy limitedRiskMarginCalculationStrategy = 19 [default = ACCORDING_TO_LEVERAGE];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->_internal_limitedriskmargincalculationstrategy(), target);
  }

  // optional uint32 moneyDigits = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_moneydigits(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOATrader)
  return target;
}

size_t ProtoOATrader::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoOATrader)
  size_t total_size = 0;

  if (_internal_has_ctidtraderaccountid()) {
    // required int64 ctidTraderAccountId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ctidtraderaccountid());
  }

  if (_internal_has_balance()) {
    // required int64 balance = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_balance());
  }

  if (_internal_has_depositassetid()) {
    // required int64 depositAssetId = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_depositassetid());
  }

  return total_size;
}
size_t ProtoOATrader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOATrader)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000086) ^ 0x00000086) == 0) {  // All required fields are present.
    // required int64 ctidTraderAccountId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ctidtraderaccountid());

    // required int64 balance = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_balance());

    // required int64 depositAssetId = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_depositassetid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string brokerName = 16;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_brokername());
  }

  if (cached_has_bits & 0x00000078u) {
    // optional int64 balanceVersion = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_balanceversion());
    }

    // optional int64 managerBonus = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_managerbonus());
    }

    // optional int64 ibBonus = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_ibbonus());
    }

    // optional int64 nonWithdrawableBonus = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_nonwithdrawablebonus());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .ProtoOAAccessRights accessRights = 7 [default = FULL_ACCESS];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_accessrights());
    }

    // optional uint32 leverageInCents = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_leverageincents());
    }

    // optional .ProtoOATotalMarginCalculationType totalMarginCalculationType = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_totalmargincalculationtype());
    }

    // optional uint32 maxLeverage = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_maxleverage());
    }

    // optional bool swapFree = 9;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool frenchRisk = 13 [deprecated = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool isLimitedRisk = 18;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional .ProtoOAAccountType accountType = 15 [default = HEDGED];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_accounttype());
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional int64 traderLogin = 14;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_traderlogin());
    }

    // optional int64 registrationTimestamp = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_registrationtimestamp());
    }

    // optional .ProtoOALimitedRiskMarginCalculationStrategy limitedRiskMarginCalculationStrategy = 19 [default = ACCORDING_TO_LEVERAGE];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_limitedriskmargincalculationstrategy());
    }

    // optional uint32 moneyDigits = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_moneydigits());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOATrader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOATrader)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOATrader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOATrader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOATrader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOATrader)
    MergeFrom(*source);
  }
}

void ProtoOATrader::MergeFrom(const ProtoOATrader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOATrader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_brokername(from._internal_brokername());
    }
    if (cached_has_bits & 0x00000002u) {
      ctidtraderaccountid_ = from.ctidtraderaccountid_;
    }
    if (cached_has_bits & 0x00000004u) {
      balance_ = from.balance_;
    }
    if (cached_has_bits & 0x00000008u) {
      balanceversion_ = from.balanceversion_;
    }
    if (cached_has_bits & 0x00000010u) {
      managerbonus_ = from.managerbonus_;
    }
    if (cached_has_bits & 0x00000020u) {
      ibbonus_ = from.ibbonus_;
    }
    if (cached_has_bits & 0x00000040u) {
      nonwithdrawablebonus_ = from.nonwithdrawablebonus_;
    }
    if (cached_has_bits & 0x00000080u) {
      depositassetid_ = from.depositassetid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      accessrights_ = from.accessrights_;
    }
    if (cached_has_bits & 0x00000200u) {
      leverageincents_ = from.leverageincents_;
    }
    if (cached_has_bits & 0x00000400u) {
      totalmargincalculationtype_ = from.totalmargincalculationtype_;
    }
    if (cached_has_bits & 0x00000800u) {
      maxleverage_ = from.maxleverage_;
    }
    if (cached_has_bits & 0x00001000u) {
      swapfree_ = from.swapfree_;
    }
    if (cached_has_bits & 0x00002000u) {
      frenchrisk_ = from.frenchrisk_;
    }
    if (cached_has_bits & 0x00004000u) {
      islimitedrisk_ = from.islimitedrisk_;
    }
    if (cached_has_bits & 0x00008000u) {
      accounttype_ = from.accounttype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      traderlogin_ = from.traderlogin_;
    }
    if (cached_has_bits & 0x00020000u) {
      registrationtimestamp_ = from.registrationtimestamp_;
    }
    if (cached_has_bits & 0x00040000u) {
      limitedriskmargincalculationstrategy_ = from.limitedriskmargincalculationstrategy_;
    }
    if (cached_has_bits & 0x00080000u) {
      moneydigits_ = from.moneydigits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOATrader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOATrader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOATrader::CopyFrom(const ProtoOATrader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOATrader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOATrader::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ProtoOATrader::InternalSwap(ProtoOATrader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  brokername_.Swap(&other->brokername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtoOATrader, moneydigits_)
      + sizeof(ProtoOATrader::moneydigits_)
      - PROTOBUF_FIELD_OFFSET(ProtoOATrader, ctidtraderaccountid_)>(
          reinterpret_cast<char*>(&ctidtraderaccountid_),
          reinterpret_cast<char*>(&other->ctidtraderaccountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOATrader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProtoOAPosition::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoOAPosition>()._has_bits_);
  static void set_has_positionid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ProtoOATradeData& tradedata(const ProtoOAPosition* msg);
  static void set_has_tradedata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_positionstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_swap(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_stoploss(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_takeprofit(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_utclastupdatetimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_commission(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_marginrate(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_mirroringcommission(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_guaranteedstoploss(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_usedmargin(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_stoplosstriggermethod(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_moneydigits(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00002007) ^ 0x00002007) != 0;
  }
};

const ::ProtoOATradeData&
ProtoOAPosition::_Internal::tradedata(const ProtoOAPosition* msg) {
  return *msg->tradedata_;
}
ProtoOAPosition::ProtoOAPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoOAPosition)
}
ProtoOAPosition::ProtoOAPosition(const ProtoOAPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tradedata()) {
    tradedata_ = new ::ProtoOATradeData(*from.tradedata_);
  } else {
    tradedata_ = nullptr;
  }
  ::memcpy(&positionid_, &from.positionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&stoplosstriggermethod_) -
    reinterpret_cast<char*>(&positionid_)) + sizeof(stoplosstriggermethod_));
  // @@protoc_insertion_point(copy_constructor:ProtoOAPosition)
}

void ProtoOAPosition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoOAPosition_OpenApiModelMessages_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&tradedata_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&moneydigits_) -
      reinterpret_cast<char*>(&tradedata_)) + sizeof(moneydigits_));
  positionstatus_ = 1;
  stoplosstriggermethod_ = 1;
}

ProtoOAPosition::~ProtoOAPosition() {
  // @@protoc_insertion_point(destructor:ProtoOAPosition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProtoOAPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tradedata_;
}

void ProtoOAPosition::ArenaDtor(void* object) {
  ProtoOAPosition* _this = reinterpret_cast< ProtoOAPosition* >(object);
  (void)_this;
}
void ProtoOAPosition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtoOAPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOAPosition& ProtoOAPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOAPosition_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOAPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOAPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(tradedata_ != nullptr);
    tradedata_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&positionid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&commission_) -
        reinterpret_cast<char*>(&positionid_)) + sizeof(commission_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&marginrate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&moneydigits_) -
        reinterpret_cast<char*>(&marginrate_)) + sizeof(moneydigits_));
    positionstatus_ = 1;
    stoplosstriggermethod_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoOAPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 positionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_positionid(&has_bits);
          positionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ProtoOATradeData tradeData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tradedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ProtoOAPositionStatus positionStatus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProtoOAPositionStatus_IsValid(val))) {
            _internal_set_positionstatus(static_cast<::ProtoOAPositionStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required int64 swap = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_swap(&has_bits);
          swap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double stopLoss = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_stoploss(&has_bits);
          stoploss_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double takeProfit = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_takeprofit(&has_bits);
          takeprofit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int64 utcLastUpdateTimestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_utclastupdatetimestamp(&has_bits);
          utclastupdatetimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 commission = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_commission(&has_bits);
          commission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double marginRate = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_marginrate(&has_bits);
          marginrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int64 mirroringCommission = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_mirroringcommission(&has_bits);
          mirroringcommission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool guaranteedStopLoss = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_guaranteedstoploss(&has_bits);
          guaranteedstoploss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 usedMargin = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_usedmargin(&has_bits);
          usedmargin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProtoOAOrderTriggerMethod stopLossTriggerMethod = 14 [default = TRADE];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProtoOAOrderTriggerMethod_IsValid(val))) {
            _internal_set_stoplosstriggermethod(static_cast<::ProtoOAOrderTriggerMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 moneyDigits = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_moneydigits(&has_bits);
          moneydigits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOAPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOAPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 positionId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_positionid(), target);
  }

  // required .ProtoOATradeData tradeData = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tradedata(this), target, stream);
  }

  // required .ProtoOAPositionStatus positionStatus = 3;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_positionstatus(), target);
  }

  // required int64 swap = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_swap(), target);
  }

  // optional double price = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_price(), target);
  }

  // optional double stopLoss = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_stoploss(), target);
  }

  // optional double takeProfit = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_takeprofit(), target);
  }

  // optional int64 utcLastUpdateTimestamp = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_utclastupdatetimestamp(), target);
  }

  // optional int64 commission = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_commission(), target);
  }

  // optional double marginRate = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_marginrate(), target);
  }

  // optional int64 mirroringCommission = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_mirroringcommission(), target);
  }

  // optional bool guaranteedStopLoss = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_guaranteedstoploss(), target);
  }

  // optional uint64 usedMargin = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_usedmargin(), target);
  }

  // optional .ProtoOAOrderTriggerMethod stopLossTriggerMethod = 14 [default = TRADE];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_stoplosstriggermethod(), target);
  }

  // optional uint32 moneyDigits = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_moneydigits(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOAPosition)
  return target;
}

size_t ProtoOAPosition::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoOAPosition)
  size_t total_size = 0;

  if (_internal_has_tradedata()) {
    // required .ProtoOATradeData tradeData = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tradedata_);
  }

  if (_internal_has_positionid()) {
    // required int64 positionId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_positionid());
  }

  if (_internal_has_swap()) {
    // required int64 swap = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_swap());
  }

  if (_internal_has_positionstatus()) {
    // required .ProtoOAPositionStatus positionStatus = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_positionstatus());
  }

  return total_size;
}
size_t ProtoOAPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOAPosition)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00002007) ^ 0x00002007) == 0) {  // All required fields are present.
    // required .ProtoOATradeData tradeData = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tradedata_);

    // required int64 positionId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_positionid());

    // required int64 swap = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_swap());

    // required .ProtoOAPositionStatus positionStatus = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_positionstatus());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000f8u) {
    // optional double price = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double stopLoss = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double takeProfit = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional int64 utcLastUpdateTimestamp = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_utclastupdatetimestamp());
    }

    // optional int64 commission = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_commission());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional double marginRate = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional int64 mirroringCommission = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_mirroringcommission());
    }

    // optional uint64 usedMargin = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_usedmargin());
    }

    // optional bool guaranteedStopLoss = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional uint32 moneyDigits = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_moneydigits());
    }

  }
  // optional .ProtoOAOrderTriggerMethod stopLossTriggerMethod = 14 [default = TRADE];
  if (cached_has_bits & 0x00004000u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stoplosstriggermethod());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOAPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOAPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOAPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOAPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOAPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOAPosition)
    MergeFrom(*source);
  }
}

void ProtoOAPosition::MergeFrom(const ProtoOAPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOAPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_tradedata()->::ProtoOATradeData::MergeFrom(from._internal_tradedata());
    }
    if (cached_has_bits & 0x00000002u) {
      positionid_ = from.positionid_;
    }
    if (cached_has_bits & 0x00000004u) {
      swap_ = from.swap_;
    }
    if (cached_has_bits & 0x00000008u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000010u) {
      stoploss_ = from.stoploss_;
    }
    if (cached_has_bits & 0x00000020u) {
      takeprofit_ = from.takeprofit_;
    }
    if (cached_has_bits & 0x00000040u) {
      utclastupdatetimestamp_ = from.utclastupdatetimestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      commission_ = from.commission_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      marginrate_ = from.marginrate_;
    }
    if (cached_has_bits & 0x00000200u) {
      mirroringcommission_ = from.mirroringcommission_;
    }
    if (cached_has_bits & 0x00000400u) {
      usedmargin_ = from.usedmargin_;
    }
    if (cached_has_bits & 0x00000800u) {
      guaranteedstoploss_ = from.guaranteedstoploss_;
    }
    if (cached_has_bits & 0x00001000u) {
      moneydigits_ = from.moneydigits_;
    }
    if (cached_has_bits & 0x00002000u) {
      positionstatus_ = from.positionstatus_;
    }
    if (cached_has_bits & 0x00004000u) {
      stoplosstriggermethod_ = from.stoplosstriggermethod_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOAPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOAPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOAPosition::CopyFrom(const ProtoOAPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOAPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOAPosition::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_tradedata()) {
    if (!tradedata_->IsInitialized()) return false;
  }
  return true;
}

void ProtoOAPosition::InternalSwap(ProtoOAPosition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtoOAPosition, moneydigits_)
      + sizeof(ProtoOAPosition::moneydigits_)
      - PROTOBUF_FIELD_OFFSET(ProtoOAPosition, tradedata_)>(
          reinterpret_cast<char*>(&tradedata_),
          reinterpret_cast<char*>(&other->tradedata_));
  swap(positionstatus_, other->positionstatus_);
  swap(stoplosstriggermethod_, other->stoplosstriggermethod_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOAPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProtoOATradeData::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoOATradeData>()._has_bits_);
  static void set_has_symbolid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tradeside(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_opentimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_guaranteedstoploss(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_comment(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000004c) ^ 0x0000004c) != 0;
  }
};

ProtoOATradeData::ProtoOATradeData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoOATradeData)
}
ProtoOATradeData::ProtoOATradeData(const ProtoOATradeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArena());
  }
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_comment()) {
    comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_comment(), 
      GetArena());
  }
  ::memcpy(&symbolid_, &from.symbolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tradeside_) -
    reinterpret_cast<char*>(&symbolid_)) + sizeof(tradeside_));
  // @@protoc_insertion_point(copy_constructor:ProtoOATradeData)
}

void ProtoOATradeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoOATradeData_OpenApiModelMessages_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&symbolid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&guaranteedstoploss_) -
      reinterpret_cast<char*>(&symbolid_)) + sizeof(guaranteedstoploss_));
  tradeside_ = 1;
}

ProtoOATradeData::~ProtoOATradeData() {
  // @@protoc_insertion_point(destructor:ProtoOATradeData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProtoOATradeData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProtoOATradeData::ArenaDtor(void* object) {
  ProtoOATradeData* _this = reinterpret_cast< ProtoOATradeData* >(object);
  (void)_this;
}
void ProtoOATradeData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtoOATradeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOATradeData& ProtoOATradeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOATradeData_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOATradeData::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOATradeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      label_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      comment_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&symbolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&guaranteedstoploss_) -
        reinterpret_cast<char*>(&symbolid_)) + sizeof(guaranteedstoploss_));
    tradeside_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoOATradeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 symbolId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_symbolid(&has_bits);
          symbolid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 volume = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_volume(&has_bits);
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ProtoOATradeSide tradeSide = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProtoOATradeSide_IsValid(val))) {
            _internal_set_tradeside(static_cast<::ProtoOATradeSide>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 openTimestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_opentimestamp(&has_bits);
          opentimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string label = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProtoOATradeData.label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool guaranteedStopLoss = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_guaranteedstoploss(&has_bits);
          guaranteedstoploss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string comment = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_comment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProtoOATradeData.comment");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOATradeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOATradeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 symbolId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_symbolid(), target);
  }

  // required int64 volume = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_volume(), target);
  }

  // required .ProtoOATradeSide tradeSide = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_tradeside(), target);
  }

  // optional int64 openTimestamp = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_opentimestamp(), target);
  }

  // optional string label = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOATradeData.label");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_label(), target);
  }

  // optional bool guaranteedStopLoss = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_guaranteedstoploss(), target);
  }

  // optional string comment = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOATradeData.comment");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_comment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOATradeData)
  return target;
}

size_t ProtoOATradeData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoOATradeData)
  size_t total_size = 0;

  if (_internal_has_symbolid()) {
    // required int64 symbolId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_symbolid());
  }

  if (_internal_has_volume()) {
    // required int64 volume = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_volume());
  }

  if (_internal_has_tradeside()) {
    // required .ProtoOATradeSide tradeSide = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tradeside());
  }

  return total_size;
}
size_t ProtoOATradeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOATradeData)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000004c) ^ 0x0000004c) == 0) {  // All required fields are present.
    // required int64 symbolId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_symbolid());

    // required int64 volume = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_volume());

    // required .ProtoOATradeSide tradeSide = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tradeside());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string label = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional string comment = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_comment());
    }

  }
  if (cached_has_bits & 0x00000030u) {
    // optional int64 openTimestamp = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_opentimestamp());
    }

    // optional bool guaranteedStopLoss = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOATradeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOATradeData)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOATradeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOATradeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOATradeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOATradeData)
    MergeFrom(*source);
  }
}

void ProtoOATradeData::MergeFrom(const ProtoOATradeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOATradeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_comment(from._internal_comment());
    }
    if (cached_has_bits & 0x00000004u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000008u) {
      volume_ = from.volume_;
    }
    if (cached_has_bits & 0x00000010u) {
      opentimestamp_ = from.opentimestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      guaranteedstoploss_ = from.guaranteedstoploss_;
    }
    if (cached_has_bits & 0x00000040u) {
      tradeside_ = from.tradeside_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOATradeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOATradeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOATradeData::CopyFrom(const ProtoOATradeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOATradeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOATradeData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ProtoOATradeData::InternalSwap(ProtoOATradeData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  comment_.Swap(&other->comment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtoOATradeData, guaranteedstoploss_)
      + sizeof(ProtoOATradeData::guaranteedstoploss_)
      - PROTOBUF_FIELD_OFFSET(ProtoOATradeData, symbolid_)>(
          reinterpret_cast<char*>(&symbolid_),
          reinterpret_cast<char*>(&other->symbolid_));
  swap(tradeside_, other->tradeside_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOATradeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProtoOAOrder::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoOAOrder>()._has_bits_);
  static void set_has_orderid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ProtoOATradeData& tradedata(const ProtoOAOrder* msg);
  static void set_has_tradedata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ordertype(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_orderstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_expirationtimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_executionprice(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_executedvolume(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_utclastupdatetimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_baseslippageprice(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_slippageinpoints(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_closingorder(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_limitprice(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_stopprice(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_stoploss(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_takeprofit(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_clientorderid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timeinforce(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_positionid(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_relativestoploss(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_relativetakeprofit(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_isstopout(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_trailingstoploss(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_stoptriggermethod(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00180006) ^ 0x00180006) != 0;
  }
};

const ::ProtoOATradeData&
ProtoOAOrder::_Internal::tradedata(const ProtoOAOrder* msg) {
  return *msg->tradedata_;
}
ProtoOAOrder::ProtoOAOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoOAOrder)
}
ProtoOAOrder::ProtoOAOrder(const ProtoOAOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clientorderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clientorderid()) {
    clientorderid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clientorderid(), 
      GetArena());
  }
  if (from._internal_has_tradedata()) {
    tradedata_ = new ::ProtoOATradeData(*from.tradedata_);
  } else {
    tradedata_ = nullptr;
  }
  ::memcpy(&orderid_, &from.orderid_,
    static_cast<size_t>(reinterpret_cast<char*>(&stoptriggermethod_) -
    reinterpret_cast<char*>(&orderid_)) + sizeof(stoptriggermethod_));
  // @@protoc_insertion_point(copy_constructor:ProtoOAOrder)
}

void ProtoOAOrder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoOAOrder_OpenApiModelMessages_2eproto.base);
  clientorderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&tradedata_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&trailingstoploss_) -
      reinterpret_cast<char*>(&tradedata_)) + sizeof(trailingstoploss_));
  ordertype_ = 1;
  orderstatus_ = 1;
  timeinforce_ = 3;
  stoptriggermethod_ = 1;
}

ProtoOAOrder::~ProtoOAOrder() {
  // @@protoc_insertion_point(destructor:ProtoOAOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProtoOAOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clientorderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tradedata_;
}

void ProtoOAOrder::ArenaDtor(void* object) {
  ProtoOAOrder* _this = reinterpret_cast< ProtoOAOrder* >(object);
  (void)_this;
}
void ProtoOAOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtoOAOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOAOrder& ProtoOAOrder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOAOrder_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOAOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOAOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      clientorderid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tradedata_ != nullptr);
      tradedata_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&orderid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&baseslippageprice_) -
        reinterpret_cast<char*>(&orderid_)) + sizeof(baseslippageprice_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&slippageinpoints_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&relativetakeprofit_) -
        reinterpret_cast<char*>(&slippageinpoints_)) + sizeof(relativetakeprofit_));
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&closingorder_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trailingstoploss_) -
        reinterpret_cast<char*>(&closingorder_)) + sizeof(trailingstoploss_));
    ordertype_ = 1;
    orderstatus_ = 1;
    timeinforce_ = 3;
    stoptriggermethod_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoOAOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 orderId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_orderid(&has_bits);
          orderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ProtoOATradeData tradeData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tradedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ProtoOAOrderType orderType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProtoOAOrderType_IsValid(val))) {
            _internal_set_ordertype(static_cast<::ProtoOAOrderType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .ProtoOAOrderStatus orderStatus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProtoOAOrderStatus_IsValid(val))) {
            _internal_set_orderstatus(static_cast<::ProtoOAOrderStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 expirationTimestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_expirationtimestamp(&has_bits);
          expirationtimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double executionPrice = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_executionprice(&has_bits);
          executionprice_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int64 executedVolume = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_executedvolume(&has_bits);
          executedvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 utcLastUpdateTimestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_utclastupdatetimestamp(&has_bits);
          utclastupdatetimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double baseSlippagePrice = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_baseslippageprice(&has_bits);
          baseslippageprice_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int64 slippageInPoints = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_slippageinpoints(&has_bits);
          slippageinpoints_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool closingOrder = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_closingorder(&has_bits);
          closingorder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double limitPrice = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_limitprice(&has_bits);
          limitprice_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double stopPrice = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_stopprice(&has_bits);
          stopprice_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double stopLoss = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_stoploss(&has_bits);
          stoploss_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double takeProfit = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_takeprofit(&has_bits);
          takeprofit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string clientOrderId = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_clientorderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProtoOAOrder.clientOrderId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProtoOATimeInForce timeInForce = 18 [default = IMMEDIATE_OR_CANCEL];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProtoOATimeInForce_IsValid(val))) {
            _internal_set_timeinforce(static_cast<::ProtoOATimeInForce>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(18, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 positionId = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_positionid(&has_bits);
          positionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 relativeStopLoss = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_relativestoploss(&has_bits);
          relativestoploss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 relativeTakeProfit = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_relativetakeprofit(&has_bits);
          relativetakeprofit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isStopOut = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_isstopout(&has_bits);
          isstopout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool trailingStopLoss = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_trailingstoploss(&has_bits);
          trailingstoploss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProtoOAOrderTriggerMethod stopTriggerMethod = 24 [default = TRADE];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProtoOAOrderTriggerMethod_IsValid(val))) {
            _internal_set_stoptriggermethod(static_cast<::ProtoOAOrderTriggerMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(24, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOAOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOAOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 orderId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_orderid(), target);
  }

  // required .ProtoOATradeData tradeData = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tradedata(this), target, stream);
  }

  // required .ProtoOAOrderType orderType = 3;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_ordertype(), target);
  }

  // required .ProtoOAOrderStatus orderStatus = 4;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_orderstatus(), target);
  }

  // optional int64 expirationTimestamp = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_expirationtimestamp(), target);
  }

  // optional double executionPrice = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_executionprice(), target);
  }

  // optional int64 executedVolume = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_executedvolume(), target);
  }

  // optional int64 utcLastUpdateTimestamp = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_utclastupdatetimestamp(), target);
  }

  // optional double baseSlippagePrice = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_baseslippageprice(), target);
  }

  // optional int64 slippageInPoints = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_slippageinpoints(), target);
  }

  // optional bool closingOrder = 12;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_closingorder(), target);
  }

  // optional double limitPrice = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_limitprice(), target);
  }

  // optional double stopPrice = 14;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_stopprice(), target);
  }

  // optional double stopLoss = 15;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_stoploss(), target);
  }

  // optional double takeProfit = 16;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_takeprofit(), target);
  }

  // optional string clientOrderId = 17;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clientorderid().data(), static_cast<int>(this->_internal_clientorderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOAOrder.clientOrderId");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_clientorderid(), target);
  }

  // optional .ProtoOATimeInForce timeInForce = 18 [default = IMMEDIATE_OR_CANCEL];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      18, this->_internal_timeinforce(), target);
  }

  // optional int64 positionId = 19;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(19, this->_internal_positionid(), target);
  }

  // optional int64 relativeStopLoss = 20;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(20, this->_internal_relativestoploss(), target);
  }

  // optional int64 relativeTakeProfit = 21;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(21, this->_internal_relativetakeprofit(), target);
  }

  // optional bool isStopOut = 22;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_isstopout(), target);
  }

  // optional bool trailingStopLoss = 23;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_trailingstoploss(), target);
  }

  // optional .ProtoOAOrderTriggerMethod stopTriggerMethod = 24 [default = TRADE];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      24, this->_internal_stoptriggermethod(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOAOrder)
  return target;
}

size_t ProtoOAOrder::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoOAOrder)
  size_t total_size = 0;

  if (_internal_has_tradedata()) {
    // required .ProtoOATradeData tradeData = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tradedata_);
  }

  if (_internal_has_orderid()) {
    // required int64 orderId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_orderid());
  }

  if (_internal_has_ordertype()) {
    // required .ProtoOAOrderType orderType = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ordertype());
  }

  if (_internal_has_orderstatus()) {
    // required .ProtoOAOrderStatus orderStatus = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_orderstatus());
  }

  return total_size;
}
size_t ProtoOAOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOAOrder)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00180006) ^ 0x00180006) == 0) {  // All required fields are present.
    // required .ProtoOATradeData tradeData = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tradedata_);

    // required int64 orderId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_orderid());

    // required .ProtoOAOrderType orderType = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ordertype());

    // required .ProtoOAOrderStatus orderStatus = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_orderstatus());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string clientOrderId = 17;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientorderid());
  }

  if (cached_has_bits & 0x000000f8u) {
    // optional int64 expirationTimestamp = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_expirationtimestamp());
    }

    // optional double executionPrice = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional int64 executedVolume = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_executedvolume());
    }

    // optional int64 utcLastUpdateTimestamp = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_utclastupdatetimestamp());
    }

    // optional double baseSlippagePrice = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int64 slippageInPoints = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_slippageinpoints());
    }

    // optional double limitPrice = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double stopPrice = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double stopLoss = 15;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double takeProfit = 16;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

    // optional int64 positionId = 19;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_positionid());
    }

    // optional int64 relativeStopLoss = 20;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_relativestoploss());
    }

    // optional int64 relativeTakeProfit = 21;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_relativetakeprofit());
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional bool closingOrder = 12;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional bool isStopOut = 22;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool trailingStopLoss = 23;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00600000u) {
    // optional .ProtoOATimeInForce timeInForce = 18 [default = IMMEDIATE_OR_CANCEL];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_timeinforce());
    }

    // optional .ProtoOAOrderTriggerMethod stopTriggerMethod = 24 [default = TRADE];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stoptriggermethod());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOAOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOAOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOAOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOAOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOAOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOAOrder)
    MergeFrom(*source);
  }
}

void ProtoOAOrder::MergeFrom(const ProtoOAOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOAOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_clientorderid(from._internal_clientorderid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tradedata()->::ProtoOATradeData::MergeFrom(from._internal_tradedata());
    }
    if (cached_has_bits & 0x00000004u) {
      orderid_ = from.orderid_;
    }
    if (cached_has_bits & 0x00000008u) {
      expirationtimestamp_ = from.expirationtimestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      executionprice_ = from.executionprice_;
    }
    if (cached_has_bits & 0x00000020u) {
      executedvolume_ = from.executedvolume_;
    }
    if (cached_has_bits & 0x00000040u) {
      utclastupdatetimestamp_ = from.utclastupdatetimestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      baseslippageprice_ = from.baseslippageprice_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      slippageinpoints_ = from.slippageinpoints_;
    }
    if (cached_has_bits & 0x00000200u) {
      limitprice_ = from.limitprice_;
    }
    if (cached_has_bits & 0x00000400u) {
      stopprice_ = from.stopprice_;
    }
    if (cached_has_bits & 0x00000800u) {
      stoploss_ = from.stoploss_;
    }
    if (cached_has_bits & 0x00001000u) {
      takeprofit_ = from.takeprofit_;
    }
    if (cached_has_bits & 0x00002000u) {
      positionid_ = from.positionid_;
    }
    if (cached_has_bits & 0x00004000u) {
      relativestoploss_ = from.relativestoploss_;
    }
    if (cached_has_bits & 0x00008000u) {
      relativetakeprofit_ = from.relativetakeprofit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      closingorder_ = from.closingorder_;
    }
    if (cached_has_bits & 0x00020000u) {
      isstopout_ = from.isstopout_;
    }
    if (cached_has_bits & 0x00040000u) {
      trailingstoploss_ = from.trailingstoploss_;
    }
    if (cached_has_bits & 0x00080000u) {
      ordertype_ = from.ordertype_;
    }
    if (cached_has_bits & 0x00100000u) {
      orderstatus_ = from.orderstatus_;
    }
    if (cached_has_bits & 0x00200000u) {
      timeinforce_ = from.timeinforce_;
    }
    if (cached_has_bits & 0x00400000u) {
      stoptriggermethod_ = from.stoptriggermethod_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOAOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOAOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOAOrder::CopyFrom(const ProtoOAOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOAOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOAOrder::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_tradedata()) {
    if (!tradedata_->IsInitialized()) return false;
  }
  return true;
}

void ProtoOAOrder::InternalSwap(ProtoOAOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  clientorderid_.Swap(&other->clientorderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtoOAOrder, trailingstoploss_)
      + sizeof(ProtoOAOrder::trailingstoploss_)
      - PROTOBUF_FIELD_OFFSET(ProtoOAOrder, tradedata_)>(
          reinterpret_cast<char*>(&tradedata_),
          reinterpret_cast<char*>(&other->tradedata_));
  swap(ordertype_, other->ordertype_);
  swap(orderstatus_, other->orderstatus_);
  swap(timeinforce_, other->timeinforce_);
  swap(stoptriggermethod_, other->stoptriggermethod_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOAOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProtoOABonusDepositWithdraw::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoOABonusDepositWithdraw>()._has_bits_);
  static void set_has_operationtype(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bonushistoryid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_managerbonus(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_managerdelta(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ibbonus(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ibdelta(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_changebonustimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_externalnote(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_introducingbrokerid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_moneydigits(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000001be) ^ 0x000001be) != 0;
  }
};

ProtoOABonusDepositWithdraw::ProtoOABonusDepositWithdraw(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoOABonusDepositWithdraw)
}
ProtoOABonusDepositWithdraw::ProtoOABonusDepositWithdraw(const ProtoOABonusDepositWithdraw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  externalnote_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_externalnote()) {
    externalnote_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_externalnote(), 
      GetArena());
  }
  ::memcpy(&bonushistoryid_, &from.bonushistoryid_,
    static_cast<size_t>(reinterpret_cast<char*>(&introducingbrokerid_) -
    reinterpret_cast<char*>(&bonushistoryid_)) + sizeof(introducingbrokerid_));
  // @@protoc_insertion_point(copy_constructor:ProtoOABonusDepositWithdraw)
}

void ProtoOABonusDepositWithdraw::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoOABonusDepositWithdraw_OpenApiModelMessages_2eproto.base);
  externalnote_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bonushistoryid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&introducingbrokerid_) -
      reinterpret_cast<char*>(&bonushistoryid_)) + sizeof(introducingbrokerid_));
}

ProtoOABonusDepositWithdraw::~ProtoOABonusDepositWithdraw() {
  // @@protoc_insertion_point(destructor:ProtoOABonusDepositWithdraw)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProtoOABonusDepositWithdraw::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  externalnote_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProtoOABonusDepositWithdraw::ArenaDtor(void* object) {
  ProtoOABonusDepositWithdraw* _this = reinterpret_cast< ProtoOABonusDepositWithdraw* >(object);
  (void)_this;
}
void ProtoOABonusDepositWithdraw::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtoOABonusDepositWithdraw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOABonusDepositWithdraw& ProtoOABonusDepositWithdraw::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOABonusDepositWithdraw_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOABonusDepositWithdraw::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOABonusDepositWithdraw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    externalnote_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&bonushistoryid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ibdelta_) -
        reinterpret_cast<char*>(&bonushistoryid_)) + sizeof(ibdelta_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&changebonustimestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&introducingbrokerid_) -
        reinterpret_cast<char*>(&changebonustimestamp_)) + sizeof(introducingbrokerid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoOABonusDepositWithdraw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .ProtoOAChangeBonusType operationType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProtoOAChangeBonusType_IsValid(val))) {
            _internal_set_operationtype(static_cast<::ProtoOAChangeBonusType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required int64 bonusHistoryId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bonushistoryid(&has_bits);
          bonushistoryid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 managerBonus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_managerbonus(&has_bits);
          managerbonus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 managerDelta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_managerdelta(&has_bits);
          managerdelta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 ibBonus = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ibbonus(&has_bits);
          ibbonus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 ibDelta = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ibdelta(&has_bits);
          ibdelta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 changeBonusTimestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_changebonustimestamp(&has_bits);
          changebonustimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string externalNote = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_externalnote();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProtoOABonusDepositWithdraw.externalNote");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 introducingBrokerId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_introducingbrokerid(&has_bits);
          introducingbrokerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 moneyDigits = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_moneydigits(&has_bits);
          moneydigits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOABonusDepositWithdraw::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOABonusDepositWithdraw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ProtoOAChangeBonusType operationType = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operationtype(), target);
  }

  // required int64 bonusHistoryId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_bonushistoryid(), target);
  }

  // required int64 managerBonus = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_managerbonus(), target);
  }

  // required int64 managerDelta = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_managerdelta(), target);
  }

  // required int64 ibBonus = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_ibbonus(), target);
  }

  // required int64 ibDelta = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_ibdelta(), target);
  }

  // required int64 changeBonusTimestamp = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_changebonustimestamp(), target);
  }

  // optional string externalNote = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_externalnote().data(), static_cast<int>(this->_internal_externalnote().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOABonusDepositWithdraw.externalNote");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_externalnote(), target);
  }

  // optional int64 introducingBrokerId = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_introducingbrokerid(), target);
  }

  // optional uint32 moneyDigits = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_moneydigits(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOABonusDepositWithdraw)
  return target;
}

size_t ProtoOABonusDepositWithdraw::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoOABonusDepositWithdraw)
  size_t total_size = 0;

  if (_internal_has_bonushistoryid()) {
    // required int64 bonusHistoryId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_bonushistoryid());
  }

  if (_internal_has_managerbonus()) {
    // required int64 managerBonus = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_managerbonus());
  }

  if (_internal_has_managerdelta()) {
    // required int64 managerDelta = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_managerdelta());
  }

  if (_internal_has_ibbonus()) {
    // required int64 ibBonus = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ibbonus());
  }

  if (_internal_has_operationtype()) {
    // required .ProtoOAChangeBonusType operationType = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operationtype());
  }

  if (_internal_has_ibdelta()) {
    // required int64 ibDelta = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ibdelta());
  }

  if (_internal_has_changebonustimestamp()) {
    // required int64 changeBonusTimestamp = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_changebonustimestamp());
  }

  return total_size;
}
size_t ProtoOABonusDepositWithdraw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOABonusDepositWithdraw)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000001be) ^ 0x000001be) == 0) {  // All required fields are present.
    // required int64 bonusHistoryId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_bonushistoryid());

    // required int64 managerBonus = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_managerbonus());

    // required int64 managerDelta = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_managerdelta());

    // required int64 ibBonus = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ibbonus());

    // required .ProtoOAChangeBonusType operationType = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operationtype());

    // required int64 ibDelta = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ibdelta());

    // required int64 changeBonusTimestamp = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_changebonustimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string externalNote = 8;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_externalnote());
  }

  // optional uint32 moneyDigits = 10;
  if (cached_has_bits & 0x00000040u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_moneydigits());
  }

  // optional int64 introducingBrokerId = 9;
  if (cached_has_bits & 0x00000200u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_introducingbrokerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOABonusDepositWithdraw::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOABonusDepositWithdraw)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOABonusDepositWithdraw* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOABonusDepositWithdraw>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOABonusDepositWithdraw)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOABonusDepositWithdraw)
    MergeFrom(*source);
  }
}

void ProtoOABonusDepositWithdraw::MergeFrom(const ProtoOABonusDepositWithdraw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOABonusDepositWithdraw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_externalnote(from._internal_externalnote());
    }
    if (cached_has_bits & 0x00000002u) {
      bonushistoryid_ = from.bonushistoryid_;
    }
    if (cached_has_bits & 0x00000004u) {
      managerbonus_ = from.managerbonus_;
    }
    if (cached_has_bits & 0x00000008u) {
      managerdelta_ = from.managerdelta_;
    }
    if (cached_has_bits & 0x00000010u) {
      ibbonus_ = from.ibbonus_;
    }
    if (cached_has_bits & 0x00000020u) {
      operationtype_ = from.operationtype_;
    }
    if (cached_has_bits & 0x00000040u) {
      moneydigits_ = from.moneydigits_;
    }
    if (cached_has_bits & 0x00000080u) {
      ibdelta_ = from.ibdelta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      changebonustimestamp_ = from.changebonustimestamp_;
    }
    if (cached_has_bits & 0x00000200u) {
      introducingbrokerid_ = from.introducingbrokerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOABonusDepositWithdraw::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOABonusDepositWithdraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOABonusDepositWithdraw::CopyFrom(const ProtoOABonusDepositWithdraw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOABonusDepositWithdraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOABonusDepositWithdraw::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ProtoOABonusDepositWithdraw::InternalSwap(ProtoOABonusDepositWithdraw* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  externalnote_.Swap(&other->externalnote_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtoOABonusDepositWithdraw, introducingbrokerid_)
      + sizeof(ProtoOABonusDepositWithdraw::introducingbrokerid_)
      - PROTOBUF_FIELD_OFFSET(ProtoOABonusDepositWithdraw, bonushistoryid_)>(
          reinterpret_cast<char*>(&bonushistoryid_),
          reinterpret_cast<char*>(&other->bonushistoryid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOABonusDepositWithdraw::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProtoOADepositWithdraw::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoOADepositWithdraw>()._has_bits_);
  static void set_has_operationtype(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_balancehistoryid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_changebalancetimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_externalnote(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_balanceversion(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_equity(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_moneydigits(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003e) ^ 0x0000003e) != 0;
  }
};

ProtoOADepositWithdraw::ProtoOADepositWithdraw(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoOADepositWithdraw)
}
ProtoOADepositWithdraw::ProtoOADepositWithdraw(const ProtoOADepositWithdraw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  externalnote_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_externalnote()) {
    externalnote_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_externalnote(), 
      GetArena());
  }
  ::memcpy(&balancehistoryid_, &from.balancehistoryid_,
    static_cast<size_t>(reinterpret_cast<char*>(&equity_) -
    reinterpret_cast<char*>(&balancehistoryid_)) + sizeof(equity_));
  // @@protoc_insertion_point(copy_constructor:ProtoOADepositWithdraw)
}

void ProtoOADepositWithdraw::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoOADepositWithdraw_OpenApiModelMessages_2eproto.base);
  externalnote_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&balancehistoryid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&equity_) -
      reinterpret_cast<char*>(&balancehistoryid_)) + sizeof(equity_));
}

ProtoOADepositWithdraw::~ProtoOADepositWithdraw() {
  // @@protoc_insertion_point(destructor:ProtoOADepositWithdraw)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProtoOADepositWithdraw::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  externalnote_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProtoOADepositWithdraw::ArenaDtor(void* object) {
  ProtoOADepositWithdraw* _this = reinterpret_cast< ProtoOADepositWithdraw* >(object);
  (void)_this;
}
void ProtoOADepositWithdraw::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtoOADepositWithdraw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOADepositWithdraw& ProtoOADepositWithdraw::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOADepositWithdraw_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOADepositWithdraw::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOADepositWithdraw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    externalnote_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&balancehistoryid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&balanceversion_) -
        reinterpret_cast<char*>(&balancehistoryid_)) + sizeof(balanceversion_));
  }
  equity_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoOADepositWithdraw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .ProtoOAChangeBalanceType operationType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProtoOAChangeBalanceType_IsValid(val))) {
            _internal_set_operationtype(static_cast<::ProtoOAChangeBalanceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required int64 balanceHistoryId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_balancehistoryid(&has_bits);
          balancehistoryid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 balance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_balance(&has_bits);
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 delta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_delta(&has_bits);
          delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 changeBalanceTimestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_changebalancetimestamp(&has_bits);
          changebalancetimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string externalNote = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_externalnote();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProtoOADepositWithdraw.externalNote");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 balanceVersion = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_balanceversion(&has_bits);
          balanceversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 equity = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_equity(&has_bits);
          equity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 moneyDigits = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_moneydigits(&has_bits);
          moneydigits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOADepositWithdraw::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOADepositWithdraw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ProtoOAChangeBalanceType operationType = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operationtype(), target);
  }

  // required int64 balanceHistoryId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_balancehistoryid(), target);
  }

  // required int64 balance = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_balance(), target);
  }

  // required int64 delta = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_delta(), target);
  }

  // required int64 changeBalanceTimestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_changebalancetimestamp(), target);
  }

  // optional string externalNote = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_externalnote().data(), static_cast<int>(this->_internal_externalnote().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOADepositWithdraw.externalNote");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_externalnote(), target);
  }

  // optional int64 balanceVersion = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_balanceversion(), target);
  }

  // optional int64 equity = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_equity(), target);
  }

  // optional uint32 moneyDigits = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_moneydigits(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOADepositWithdraw)
  return target;
}

size_t ProtoOADepositWithdraw::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoOADepositWithdraw)
  size_t total_size = 0;

  if (_internal_has_balancehistoryid()) {
    // required int64 balanceHistoryId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_balancehistoryid());
  }

  if (_internal_has_balance()) {
    // required int64 balance = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_balance());
  }

  if (_internal_has_delta()) {
    // required int64 delta = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_delta());
  }

  if (_internal_has_changebalancetimestamp()) {
    // required int64 changeBalanceTimestamp = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_changebalancetimestamp());
  }

  if (_internal_has_operationtype()) {
    // required .ProtoOAChangeBalanceType operationType = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operationtype());
  }

  return total_size;
}
size_t ProtoOADepositWithdraw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOADepositWithdraw)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003e) ^ 0x0000003e) == 0) {  // All required fields are present.
    // required int64 balanceHistoryId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_balancehistoryid());

    // required int64 balance = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_balance());

    // required int64 delta = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_delta());

    // required int64 changeBalanceTimestamp = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_changebalancetimestamp());

    // required .ProtoOAChangeBalanceType operationType = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operationtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string externalNote = 6;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_externalnote());
  }

  if (cached_has_bits & 0x000000c0u) {
    // optional uint32 moneyDigits = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_moneydigits());
    }

    // optional int64 balanceVersion = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_balanceversion());
    }

  }
  // optional int64 equity = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_equity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOADepositWithdraw::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOADepositWithdraw)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOADepositWithdraw* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOADepositWithdraw>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOADepositWithdraw)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOADepositWithdraw)
    MergeFrom(*source);
  }
}

void ProtoOADepositWithdraw::MergeFrom(const ProtoOADepositWithdraw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOADepositWithdraw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_externalnote(from._internal_externalnote());
    }
    if (cached_has_bits & 0x00000002u) {
      balancehistoryid_ = from.balancehistoryid_;
    }
    if (cached_has_bits & 0x00000004u) {
      balance_ = from.balance_;
    }
    if (cached_has_bits & 0x00000008u) {
      delta_ = from.delta_;
    }
    if (cached_has_bits & 0x00000010u) {
      changebalancetimestamp_ = from.changebalancetimestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      operationtype_ = from.operationtype_;
    }
    if (cached_has_bits & 0x00000040u) {
      moneydigits_ = from.moneydigits_;
    }
    if (cached_has_bits & 0x00000080u) {
      balanceversion_ = from.balanceversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_equity(from._internal_equity());
  }
}

void ProtoOADepositWithdraw::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOADepositWithdraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOADepositWithdraw::CopyFrom(const ProtoOADepositWithdraw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOADepositWithdraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOADepositWithdraw::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ProtoOADepositWithdraw::InternalSwap(ProtoOADepositWithdraw* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  externalnote_.Swap(&other->externalnote_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtoOADepositWithdraw, equity_)
      + sizeof(ProtoOADepositWithdraw::equity_)
      - PROTOBUF_FIELD_OFFSET(ProtoOADepositWithdraw, balancehistoryid_)>(
          reinterpret_cast<char*>(&balancehistoryid_),
          reinterpret_cast<char*>(&other->balancehistoryid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOADepositWithdraw::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProtoOADeal::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoOADeal>()._has_bits_);
  static void set_has_dealid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_orderid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_positionid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_filledvolume(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_symbolid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_createtimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_executiontimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_utclastupdatetimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_executionprice(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tradeside(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_dealstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_marginrate(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_commission(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_basetousdconversionrate(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::ProtoOAClosePositionDetail& closepositiondetail(const ProtoOADeal* msg);
  static void set_has_closepositiondetail(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_moneydigits(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000181fe) ^ 0x000181fe) != 0;
  }
};

const ::ProtoOAClosePositionDetail&
ProtoOADeal::_Internal::closepositiondetail(const ProtoOADeal* msg) {
  return *msg->closepositiondetail_;
}
ProtoOADeal::ProtoOADeal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoOADeal)
}
ProtoOADeal::ProtoOADeal(const ProtoOADeal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_closepositiondetail()) {
    closepositiondetail_ = new ::ProtoOAClosePositionDetail(*from.closepositiondetail_);
  } else {
    closepositiondetail_ = nullptr;
  }
  ::memcpy(&dealid_, &from.dealid_,
    static_cast<size_t>(reinterpret_cast<char*>(&dealstatus_) -
    reinterpret_cast<char*>(&dealid_)) + sizeof(dealstatus_));
  // @@protoc_insertion_point(copy_constructor:ProtoOADeal)
}

void ProtoOADeal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoOADeal_OpenApiModelMessages_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&closepositiondetail_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&moneydigits_) -
      reinterpret_cast<char*>(&closepositiondetail_)) + sizeof(moneydigits_));
  tradeside_ = 1;
  dealstatus_ = 2;
}

ProtoOADeal::~ProtoOADeal() {
  // @@protoc_insertion_point(destructor:ProtoOADeal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProtoOADeal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete closepositiondetail_;
}

void ProtoOADeal::ArenaDtor(void* object) {
  ProtoOADeal* _this = reinterpret_cast< ProtoOADeal* >(object);
  (void)_this;
}
void ProtoOADeal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtoOADeal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOADeal& ProtoOADeal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOADeal_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOADeal::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOADeal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(closepositiondetail_ != nullptr);
    closepositiondetail_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&dealid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&createtimestamp_) -
        reinterpret_cast<char*>(&dealid_)) + sizeof(createtimestamp_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&executiontimestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&moneydigits_) -
        reinterpret_cast<char*>(&executiontimestamp_)) + sizeof(moneydigits_));
    tradeside_ = 1;
  }
  dealstatus_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoOADeal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 dealId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dealid(&has_bits);
          dealid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 orderId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_orderid(&has_bits);
          orderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 positionId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_positionid(&has_bits);
          positionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 volume = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_volume(&has_bits);
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 filledVolume = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_filledvolume(&has_bits);
          filledvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 symbolId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_symbolid(&has_bits);
          symbolid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 createTimestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_createtimestamp(&has_bits);
          createtimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 executionTimestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_executiontimestamp(&has_bits);
          executiontimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 utcLastUpdateTimestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_utclastupdatetimestamp(&has_bits);
          utclastupdatetimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double executionPrice = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_executionprice(&has_bits);
          executionprice_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required .ProtoOATradeSide tradeSide = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProtoOATradeSide_IsValid(val))) {
            _internal_set_tradeside(static_cast<::ProtoOATradeSide>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .ProtoOADealStatus dealStatus = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProtoOADealStatus_IsValid(val))) {
            _internal_set_dealstatus(static_cast<::ProtoOADealStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double marginRate = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_marginrate(&has_bits);
          marginrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int64 commission = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_commission(&has_bits);
          commission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double baseToUsdConversionRate = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_basetousdconversionrate(&has_bits);
          basetousdconversionrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .ProtoOAClosePositionDetail closePositionDetail = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_closepositiondetail(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 moneyDigits = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_moneydigits(&has_bits);
          moneydigits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOADeal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOADeal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 dealId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_dealid(), target);
  }

  // required int64 orderId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_orderid(), target);
  }

  // required int64 positionId = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_positionid(), target);
  }

  // required int64 volume = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_volume(), target);
  }

  // required int64 filledVolume = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_filledvolume(), target);
  }

  // required int64 symbolId = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_symbolid(), target);
  }

  // required int64 createTimestamp = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_createtimestamp(), target);
  }

  // required int64 executionTimestamp = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_executiontimestamp(), target);
  }

  // optional int64 utcLastUpdateTimestamp = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_utclastupdatetimestamp(), target);
  }

  // optional double executionPrice = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_executionprice(), target);
  }

  // required .ProtoOATradeSide tradeSide = 11;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_tradeside(), target);
  }

  // required .ProtoOADealStatus dealStatus = 12;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_dealstatus(), target);
  }

  // optional double marginRate = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_marginrate(), target);
  }

  // optional int64 commission = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_commission(), target);
  }

  // optional double baseToUsdConversionRate = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_basetousdconversionrate(), target);
  }

  // optional .ProtoOAClosePositionDetail closePositionDetail = 16;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::closepositiondetail(this), target, stream);
  }

  // optional uint32 moneyDigits = 17;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_moneydigits(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOADeal)
  return target;
}

size_t ProtoOADeal::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoOADeal)
  size_t total_size = 0;

  if (_internal_has_dealid()) {
    // required int64 dealId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_dealid());
  }

  if (_internal_has_orderid()) {
    // required int64 orderId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_orderid());
  }

  if (_internal_has_positionid()) {
    // required int64 positionId = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_positionid());
  }

  if (_internal_has_volume()) {
    // required int64 volume = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_volume());
  }

  if (_internal_has_filledvolume()) {
    // required int64 filledVolume = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_filledvolume());
  }

  if (_internal_has_symbolid()) {
    // required int64 symbolId = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_symbolid());
  }

  if (_internal_has_createtimestamp()) {
    // required int64 createTimestamp = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_createtimestamp());
  }

  if (_internal_has_executiontimestamp()) {
    // required int64 executionTimestamp = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_executiontimestamp());
  }

  if (_internal_has_tradeside()) {
    // required .ProtoOATradeSide tradeSide = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tradeside());
  }

  if (_internal_has_dealstatus()) {
    // required .ProtoOADealStatus dealStatus = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dealstatus());
  }

  return total_size;
}
size_t ProtoOADeal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOADeal)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000181fe) ^ 0x000181fe) == 0) {  // All required fields are present.
    // required int64 dealId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_dealid());

    // required int64 orderId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_orderid());

    // required int64 positionId = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_positionid());

    // required int64 volume = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_volume());

    // required int64 filledVolume = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_filledvolume());

    // required int64 symbolId = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_symbolid());

    // required int64 createTimestamp = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_createtimestamp());

    // required int64 executionTimestamp = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_executiontimestamp());

    // required .ProtoOATradeSide tradeSide = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tradeside());

    // required .ProtoOADealStatus dealStatus = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dealstatus());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ProtoOAClosePositionDetail closePositionDetail = 16;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *closepositiondetail_);
  }

  if (cached_has_bits & 0x00007e00u) {
    // optional int64 utcLastUpdateTimestamp = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_utclastupdatetimestamp());
    }

    // optional double executionPrice = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double marginRate = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional int64 commission = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_commission());
    }

    // optional double baseToUsdConversionRate = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional uint32 moneyDigits = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_moneydigits());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOADeal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOADeal)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOADeal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOADeal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOADeal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOADeal)
    MergeFrom(*source);
  }
}

void ProtoOADeal::MergeFrom(const ProtoOADeal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOADeal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_closepositiondetail()->::ProtoOAClosePositionDetail::MergeFrom(from._internal_closepositiondetail());
    }
    if (cached_has_bits & 0x00000002u) {
      dealid_ = from.dealid_;
    }
    if (cached_has_bits & 0x00000004u) {
      orderid_ = from.orderid_;
    }
    if (cached_has_bits & 0x00000008u) {
      positionid_ = from.positionid_;
    }
    if (cached_has_bits & 0x00000010u) {
      volume_ = from.volume_;
    }
    if (cached_has_bits & 0x00000020u) {
      filledvolume_ = from.filledvolume_;
    }
    if (cached_has_bits & 0x00000040u) {
      symbolid_ = from.symbolid_;
    }
    if (cached_has_bits & 0x00000080u) {
      createtimestamp_ = from.createtimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      executiontimestamp_ = from.executiontimestamp_;
    }
    if (cached_has_bits & 0x00000200u) {
      utclastupdatetimestamp_ = from.utclastupdatetimestamp_;
    }
    if (cached_has_bits & 0x00000400u) {
      executionprice_ = from.executionprice_;
    }
    if (cached_has_bits & 0x00000800u) {
      marginrate_ = from.marginrate_;
    }
    if (cached_has_bits & 0x00001000u) {
      commission_ = from.commission_;
    }
    if (cached_has_bits & 0x00002000u) {
      basetousdconversionrate_ = from.basetousdconversionrate_;
    }
    if (cached_has_bits & 0x00004000u) {
      moneydigits_ = from.moneydigits_;
    }
    if (cached_has_bits & 0x00008000u) {
      tradeside_ = from.tradeside_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_dealstatus(from._internal_dealstatus());
  }
}

void ProtoOADeal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOADeal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOADeal::CopyFrom(const ProtoOADeal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOADeal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOADeal::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_closepositiondetail()) {
    if (!closepositiondetail_->IsInitialized()) return false;
  }
  return true;
}

void ProtoOADeal::InternalSwap(ProtoOADeal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtoOADeal, moneydigits_)
      + sizeof(ProtoOADeal::moneydigits_)
      - PROTOBUF_FIELD_OFFSET(ProtoOADeal, closepositiondetail_)>(
          reinterpret_cast<char*>(&closepositiondetail_),
          reinterpret_cast<char*>(&other->closepositiondetail_));
  swap(tradeside_, other->tradeside_);
  swap(dealstatus_, other->dealstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOADeal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProtoOAClosePositionDetail::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoOAClosePositionDetail>()._has_bits_);
  static void set_has_entryprice(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_grossprofit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_swap(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_commission(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_quotetodepositconversionrate(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_closedvolume(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_balanceversion(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_moneydigits(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

ProtoOAClosePositionDetail::ProtoOAClosePositionDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoOAClosePositionDetail)
}
ProtoOAClosePositionDetail::ProtoOAClosePositionDetail(const ProtoOAClosePositionDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&entryprice_, &from.entryprice_,
    static_cast<size_t>(reinterpret_cast<char*>(&moneydigits_) -
    reinterpret_cast<char*>(&entryprice_)) + sizeof(moneydigits_));
  // @@protoc_insertion_point(copy_constructor:ProtoOAClosePositionDetail)
}

void ProtoOAClosePositionDetail::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&entryprice_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&moneydigits_) -
      reinterpret_cast<char*>(&entryprice_)) + sizeof(moneydigits_));
}

ProtoOAClosePositionDetail::~ProtoOAClosePositionDetail() {
  // @@protoc_insertion_point(destructor:ProtoOAClosePositionDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProtoOAClosePositionDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProtoOAClosePositionDetail::ArenaDtor(void* object) {
  ProtoOAClosePositionDetail* _this = reinterpret_cast< ProtoOAClosePositionDetail* >(object);
  (void)_this;
}
void ProtoOAClosePositionDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtoOAClosePositionDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOAClosePositionDetail& ProtoOAClosePositionDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOAClosePositionDetail_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOAClosePositionDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOAClosePositionDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&entryprice_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&balanceversion_) -
        reinterpret_cast<char*>(&entryprice_)) + sizeof(balanceversion_));
  }
  moneydigits_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoOAClosePositionDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double entryPrice = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_entryprice(&has_bits);
          entryprice_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required int64 grossProfit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_grossprofit(&has_bits);
          grossprofit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 swap = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_swap(&has_bits);
          swap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 commission = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_commission(&has_bits);
          commission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 balance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_balance(&has_bits);
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double quoteToDepositConversionRate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_quotetodepositconversionrate(&has_bits);
          quotetodepositconversionrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int64 closedVolume = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_closedvolume(&has_bits);
          closedvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 balanceVersion = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_balanceversion(&has_bits);
          balanceversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 moneyDigits = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_moneydigits(&has_bits);
          moneydigits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOAClosePositionDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOAClosePositionDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double entryPrice = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_entryprice(), target);
  }

  // required int64 grossProfit = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_grossprofit(), target);
  }

  // required int64 swap = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_swap(), target);
  }

  // required int64 commission = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_commission(), target);
  }

  // required int64 balance = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_balance(), target);
  }

  // optional double quoteToDepositConversionRate = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_quotetodepositconversionrate(), target);
  }

  // optional int64 closedVolume = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_closedvolume(), target);
  }

  // optional int64 balanceVersion = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_balanceversion(), target);
  }

  // optional uint32 moneyDigits = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_moneydigits(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOAClosePositionDetail)
  return target;
}

size_t ProtoOAClosePositionDetail::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoOAClosePositionDetail)
  size_t total_size = 0;

  if (_internal_has_entryprice()) {
    // required double entryPrice = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_grossprofit()) {
    // required int64 grossProfit = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_grossprofit());
  }

  if (_internal_has_swap()) {
    // required int64 swap = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_swap());
  }

  if (_internal_has_commission()) {
    // required int64 commission = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_commission());
  }

  if (_internal_has_balance()) {
    // required int64 balance = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_balance());
  }

  return total_size;
}
size_t ProtoOAClosePositionDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOAClosePositionDetail)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required double entryPrice = 1;
    total_size += 1 + 8;

    // required int64 grossProfit = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_grossprofit());

    // required int64 swap = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_swap());

    // required int64 commission = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_commission());

    // required int64 balance = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_balance());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000e0u) {
    // optional double quoteToDepositConversionRate = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional int64 closedVolume = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_closedvolume());
    }

    // optional int64 balanceVersion = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_balanceversion());
    }

  }
  // optional uint32 moneyDigits = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_moneydigits());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOAClosePositionDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOAClosePositionDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOAClosePositionDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOAClosePositionDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOAClosePositionDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOAClosePositionDetail)
    MergeFrom(*source);
  }
}

void ProtoOAClosePositionDetail::MergeFrom(const ProtoOAClosePositionDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOAClosePositionDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      entryprice_ = from.entryprice_;
    }
    if (cached_has_bits & 0x00000002u) {
      grossprofit_ = from.grossprofit_;
    }
    if (cached_has_bits & 0x00000004u) {
      swap_ = from.swap_;
    }
    if (cached_has_bits & 0x00000008u) {
      commission_ = from.commission_;
    }
    if (cached_has_bits & 0x00000010u) {
      balance_ = from.balance_;
    }
    if (cached_has_bits & 0x00000020u) {
      quotetodepositconversionrate_ = from.quotetodepositconversionrate_;
    }
    if (cached_has_bits & 0x00000040u) {
      closedvolume_ = from.closedvolume_;
    }
    if (cached_has_bits & 0x00000080u) {
      balanceversion_ = from.balanceversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_moneydigits(from._internal_moneydigits());
  }
}

void ProtoOAClosePositionDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOAClosePositionDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOAClosePositionDetail::CopyFrom(const ProtoOAClosePositionDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOAClosePositionDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOAClosePositionDetail::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ProtoOAClosePositionDetail::InternalSwap(ProtoOAClosePositionDetail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtoOAClosePositionDetail, moneydigits_)
      + sizeof(ProtoOAClosePositionDetail::moneydigits_)
      - PROTOBUF_FIELD_OFFSET(ProtoOAClosePositionDetail, entryprice_)>(
          reinterpret_cast<char*>(&entryprice_),
          reinterpret_cast<char*>(&other->entryprice_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOAClosePositionDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProtoOATrendbar::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoOATrendbar>()._has_bits_);
  static void set_has_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_period(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_low(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_deltaopen(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_deltaclose(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_deltahigh(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_utctimestampinminutes(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ProtoOATrendbar::ProtoOATrendbar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoOATrendbar)
}
ProtoOATrendbar::ProtoOATrendbar(const ProtoOATrendbar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&volume_, &from.volume_,
    static_cast<size_t>(reinterpret_cast<char*>(&period_) -
    reinterpret_cast<char*>(&volume_)) + sizeof(period_));
  // @@protoc_insertion_point(copy_constructor:ProtoOATrendbar)
}

void ProtoOATrendbar::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&volume_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&utctimestampinminutes_) -
      reinterpret_cast<char*>(&volume_)) + sizeof(utctimestampinminutes_));
  period_ = 1;
}

ProtoOATrendbar::~ProtoOATrendbar() {
  // @@protoc_insertion_point(destructor:ProtoOATrendbar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProtoOATrendbar::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProtoOATrendbar::ArenaDtor(void* object) {
  ProtoOATrendbar* _this = reinterpret_cast< ProtoOATrendbar* >(object);
  (void)_this;
}
void ProtoOATrendbar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtoOATrendbar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOATrendbar& ProtoOATrendbar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOATrendbar_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOATrendbar::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOATrendbar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&volume_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&utctimestampinminutes_) -
        reinterpret_cast<char*>(&volume_)) + sizeof(utctimestampinminutes_));
    period_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoOATrendbar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 volume = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_volume(&has_bits);
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProtoOATrendbarPeriod period = 4 [default = M1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProtoOATrendbarPeriod_IsValid(val))) {
            _internal_set_period(static_cast<::ProtoOATrendbarPeriod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 low = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_low(&has_bits);
          low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 deltaOpen = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_deltaopen(&has_bits);
          deltaopen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 deltaClose = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_deltaclose(&has_bits);
          deltaclose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 deltaHigh = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_deltahigh(&has_bits);
          deltahigh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 utcTimestampInMinutes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_utctimestampinminutes(&has_bits);
          utctimestampinminutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOATrendbar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOATrendbar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 volume = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_volume(), target);
  }

  // optional .ProtoOATrendbarPeriod period = 4 [default = M1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_period(), target);
  }

  // optional int64 low = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_low(), target);
  }

  // optional uint64 deltaOpen = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_deltaopen(), target);
  }

  // optional uint64 deltaClose = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_deltaclose(), target);
  }

  // optional uint64 deltaHigh = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_deltahigh(), target);
  }

  // optional uint32 utcTimestampInMinutes = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_utctimestampinminutes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOATrendbar)
  return target;
}

size_t ProtoOATrendbar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOATrendbar)
  size_t total_size = 0;

  // required int64 volume = 3;
  if (_internal_has_volume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_volume());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007eu) {
    // optional int64 low = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_low());
    }

    // optional uint64 deltaOpen = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_deltaopen());
    }

    // optional uint64 deltaClose = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_deltaclose());
    }

    // optional uint64 deltaHigh = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_deltahigh());
    }

    // optional uint32 utcTimestampInMinutes = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_utctimestampinminutes());
    }

    // optional .ProtoOATrendbarPeriod period = 4 [default = M1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_period());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOATrendbar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOATrendbar)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOATrendbar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOATrendbar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOATrendbar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOATrendbar)
    MergeFrom(*source);
  }
}

void ProtoOATrendbar::MergeFrom(const ProtoOATrendbar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOATrendbar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      volume_ = from.volume_;
    }
    if (cached_has_bits & 0x00000002u) {
      low_ = from.low_;
    }
    if (cached_has_bits & 0x00000004u) {
      deltaopen_ = from.deltaopen_;
    }
    if (cached_has_bits & 0x00000008u) {
      deltaclose_ = from.deltaclose_;
    }
    if (cached_has_bits & 0x00000010u) {
      deltahigh_ = from.deltahigh_;
    }
    if (cached_has_bits & 0x00000020u) {
      utctimestampinminutes_ = from.utctimestampinminutes_;
    }
    if (cached_has_bits & 0x00000040u) {
      period_ = from.period_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOATrendbar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOATrendbar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOATrendbar::CopyFrom(const ProtoOATrendbar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOATrendbar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOATrendbar::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ProtoOATrendbar::InternalSwap(ProtoOATrendbar* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtoOATrendbar, utctimestampinminutes_)
      + sizeof(ProtoOATrendbar::utctimestampinminutes_)
      - PROTOBUF_FIELD_OFFSET(ProtoOATrendbar, volume_)>(
          reinterpret_cast<char*>(&volume_),
          reinterpret_cast<char*>(&other->volume_));
  swap(period_, other->period_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOATrendbar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProtoOAExpectedMargin::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoOAExpectedMargin>()._has_bits_);
  static void set_has_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_buymargin(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sellmargin(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

ProtoOAExpectedMargin::ProtoOAExpectedMargin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoOAExpectedMargin)
}
ProtoOAExpectedMargin::ProtoOAExpectedMargin(const ProtoOAExpectedMargin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&volume_, &from.volume_,
    static_cast<size_t>(reinterpret_cast<char*>(&sellmargin_) -
    reinterpret_cast<char*>(&volume_)) + sizeof(sellmargin_));
  // @@protoc_insertion_point(copy_constructor:ProtoOAExpectedMargin)
}

void ProtoOAExpectedMargin::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&volume_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sellmargin_) -
      reinterpret_cast<char*>(&volume_)) + sizeof(sellmargin_));
}

ProtoOAExpectedMargin::~ProtoOAExpectedMargin() {
  // @@protoc_insertion_point(destructor:ProtoOAExpectedMargin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProtoOAExpectedMargin::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProtoOAExpectedMargin::ArenaDtor(void* object) {
  ProtoOAExpectedMargin* _this = reinterpret_cast< ProtoOAExpectedMargin* >(object);
  (void)_this;
}
void ProtoOAExpectedMargin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtoOAExpectedMargin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOAExpectedMargin& ProtoOAExpectedMargin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOAExpectedMargin_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOAExpectedMargin::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOAExpectedMargin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&volume_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sellmargin_) -
        reinterpret_cast<char*>(&volume_)) + sizeof(sellmargin_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoOAExpectedMargin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 volume = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_volume(&has_bits);
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 buyMargin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_buymargin(&has_bits);
          buymargin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 sellMargin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_sellmargin(&has_bits);
          sellmargin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOAExpectedMargin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOAExpectedMargin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 volume = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_volume(), target);
  }

  // required int64 buyMargin = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_buymargin(), target);
  }

  // required int64 sellMargin = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_sellmargin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOAExpectedMargin)
  return target;
}

size_t ProtoOAExpectedMargin::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoOAExpectedMargin)
  size_t total_size = 0;

  if (_internal_has_volume()) {
    // required int64 volume = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_volume());
  }

  if (_internal_has_buymargin()) {
    // required int64 buyMargin = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_buymargin());
  }

  if (_internal_has_sellmargin()) {
    // required int64 sellMargin = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sellmargin());
  }

  return total_size;
}
size_t ProtoOAExpectedMargin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOAExpectedMargin)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 volume = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_volume());

    // required int64 buyMargin = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_buymargin());

    // required int64 sellMargin = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sellmargin());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOAExpectedMargin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOAExpectedMargin)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOAExpectedMargin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOAExpectedMargin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOAExpectedMargin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOAExpectedMargin)
    MergeFrom(*source);
  }
}

void ProtoOAExpectedMargin::MergeFrom(const ProtoOAExpectedMargin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOAExpectedMargin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      volume_ = from.volume_;
    }
    if (cached_has_bits & 0x00000002u) {
      buymargin_ = from.buymargin_;
    }
    if (cached_has_bits & 0x00000004u) {
      sellmargin_ = from.sellmargin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOAExpectedMargin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOAExpectedMargin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOAExpectedMargin::CopyFrom(const ProtoOAExpectedMargin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOAExpectedMargin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOAExpectedMargin::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ProtoOAExpectedMargin::InternalSwap(ProtoOAExpectedMargin* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtoOAExpectedMargin, sellmargin_)
      + sizeof(ProtoOAExpectedMargin::sellmargin_)
      - PROTOBUF_FIELD_OFFSET(ProtoOAExpectedMargin, volume_)>(
          reinterpret_cast<char*>(&volume_),
          reinterpret_cast<char*>(&other->volume_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOAExpectedMargin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProtoOATickData::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoOATickData>()._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tick(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ProtoOATickData::ProtoOATickData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoOATickData)
}
ProtoOATickData::ProtoOATickData(const ProtoOATickData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&tick_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(tick_));
  // @@protoc_insertion_point(copy_constructor:ProtoOATickData)
}

void ProtoOATickData::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&tick_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(tick_));
}

ProtoOATickData::~ProtoOATickData() {
  // @@protoc_insertion_point(destructor:ProtoOATickData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProtoOATickData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProtoOATickData::ArenaDtor(void* object) {
  ProtoOATickData* _this = reinterpret_cast< ProtoOATickData* >(object);
  (void)_this;
}
void ProtoOATickData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtoOATickData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOATickData& ProtoOATickData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOATickData_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOATickData::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOATickData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tick_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(tick_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoOATickData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 tick = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tick(&has_bits);
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOATickData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOATickData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // required int64 tick = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_tick(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOATickData)
  return target;
}

size_t ProtoOATickData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoOATickData)
  size_t total_size = 0;

  if (_internal_has_timestamp()) {
    // required int64 timestamp = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (_internal_has_tick()) {
    // required int64 tick = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tick());
  }

  return total_size;
}
size_t ProtoOATickData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOATickData)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 timestamp = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());

    // required int64 tick = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tick());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOATickData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOATickData)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOATickData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOATickData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOATickData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOATickData)
    MergeFrom(*source);
  }
}

void ProtoOATickData::MergeFrom(const ProtoOATickData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOATickData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      tick_ = from.tick_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOATickData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOATickData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOATickData::CopyFrom(const ProtoOATickData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOATickData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOATickData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ProtoOATickData::InternalSwap(ProtoOATickData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtoOATickData, tick_)
      + sizeof(ProtoOATickData::tick_)
      - PROTOBUF_FIELD_OFFSET(ProtoOATickData, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOATickData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProtoOACtidProfile::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoOACtidProfile>()._has_bits_);
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ProtoOACtidProfile::ProtoOACtidProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoOACtidProfile)
}
ProtoOACtidProfile::ProtoOACtidProfile(const ProtoOACtidProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:ProtoOACtidProfile)
}

void ProtoOACtidProfile::SharedCtor() {
  userid_ = PROTOBUF_LONGLONG(0);
}

ProtoOACtidProfile::~ProtoOACtidProfile() {
  // @@protoc_insertion_point(destructor:ProtoOACtidProfile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProtoOACtidProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProtoOACtidProfile::ArenaDtor(void* object) {
  ProtoOACtidProfile* _this = reinterpret_cast< ProtoOACtidProfile* >(object);
  (void)_this;
}
void ProtoOACtidProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtoOACtidProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOACtidProfile& ProtoOACtidProfile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOACtidProfile_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOACtidProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOACtidProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoOACtidProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 userId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOACtidProfile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOACtidProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 userId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOACtidProfile)
  return target;
}

size_t ProtoOACtidProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOACtidProfile)
  size_t total_size = 0;

  // required int64 userId = 1;
  if (_internal_has_userid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_userid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOACtidProfile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOACtidProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOACtidProfile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOACtidProfile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOACtidProfile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOACtidProfile)
    MergeFrom(*source);
  }
}

void ProtoOACtidProfile::MergeFrom(const ProtoOACtidProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOACtidProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_userid()) {
    _internal_set_userid(from._internal_userid());
  }
}

void ProtoOACtidProfile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOACtidProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOACtidProfile::CopyFrom(const ProtoOACtidProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOACtidProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOACtidProfile::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ProtoOACtidProfile::InternalSwap(ProtoOACtidProfile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOACtidProfile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProtoOACtidTraderAccount::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoOACtidTraderAccount>()._has_bits_);
  static void set_has_ctidtraderaccountid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_islive(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_traderlogin(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ProtoOACtidTraderAccount::ProtoOACtidTraderAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoOACtidTraderAccount)
}
ProtoOACtidTraderAccount::ProtoOACtidTraderAccount(const ProtoOACtidTraderAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ctidtraderaccountid_, &from.ctidtraderaccountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&islive_) -
    reinterpret_cast<char*>(&ctidtraderaccountid_)) + sizeof(islive_));
  // @@protoc_insertion_point(copy_constructor:ProtoOACtidTraderAccount)
}

void ProtoOACtidTraderAccount::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ctidtraderaccountid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&islive_) -
      reinterpret_cast<char*>(&ctidtraderaccountid_)) + sizeof(islive_));
}

ProtoOACtidTraderAccount::~ProtoOACtidTraderAccount() {
  // @@protoc_insertion_point(destructor:ProtoOACtidTraderAccount)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProtoOACtidTraderAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProtoOACtidTraderAccount::ArenaDtor(void* object) {
  ProtoOACtidTraderAccount* _this = reinterpret_cast< ProtoOACtidTraderAccount* >(object);
  (void)_this;
}
void ProtoOACtidTraderAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtoOACtidTraderAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOACtidTraderAccount& ProtoOACtidTraderAccount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOACtidTraderAccount_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOACtidTraderAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOACtidTraderAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&ctidtraderaccountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&islive_) -
        reinterpret_cast<char*>(&ctidtraderaccountid_)) + sizeof(islive_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoOACtidTraderAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 ctidTraderAccountId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ctidtraderaccountid(&has_bits);
          ctidtraderaccountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isLive = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_islive(&has_bits);
          islive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 traderLogin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_traderlogin(&has_bits);
          traderlogin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOACtidTraderAccount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOACtidTraderAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 ctidTraderAccountId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_ctidtraderaccountid(), target);
  }

  // optional bool isLive = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_islive(), target);
  }

  // optional int64 traderLogin = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_traderlogin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOACtidTraderAccount)
  return target;
}

size_t ProtoOACtidTraderAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOACtidTraderAccount)
  size_t total_size = 0;

  // required uint64 ctidTraderAccountId = 1;
  if (_internal_has_ctidtraderaccountid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ctidtraderaccountid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional int64 traderLogin = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_traderlogin());
    }

    // optional bool isLive = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOACtidTraderAccount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOACtidTraderAccount)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOACtidTraderAccount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOACtidTraderAccount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOACtidTraderAccount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOACtidTraderAccount)
    MergeFrom(*source);
  }
}

void ProtoOACtidTraderAccount::MergeFrom(const ProtoOACtidTraderAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOACtidTraderAccount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ctidtraderaccountid_ = from.ctidtraderaccountid_;
    }
    if (cached_has_bits & 0x00000002u) {
      traderlogin_ = from.traderlogin_;
    }
    if (cached_has_bits & 0x00000004u) {
      islive_ = from.islive_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOACtidTraderAccount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOACtidTraderAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOACtidTraderAccount::CopyFrom(const ProtoOACtidTraderAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOACtidTraderAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOACtidTraderAccount::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ProtoOACtidTraderAccount::InternalSwap(ProtoOACtidTraderAccount* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtoOACtidTraderAccount, islive_)
      + sizeof(ProtoOACtidTraderAccount::islive_)
      - PROTOBUF_FIELD_OFFSET(ProtoOACtidTraderAccount, ctidtraderaccountid_)>(
          reinterpret_cast<char*>(&ctidtraderaccountid_),
          reinterpret_cast<char*>(&other->ctidtraderaccountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOACtidTraderAccount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProtoOAAssetClass::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoOAAssetClass>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ProtoOAAssetClass::ProtoOAAssetClass(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoOAAssetClass)
}
ProtoOAAssetClass::ProtoOAAssetClass(const ProtoOAAssetClass& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:ProtoOAAssetClass)
}

void ProtoOAAssetClass::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoOAAssetClass_OpenApiModelMessages_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_LONGLONG(0);
}

ProtoOAAssetClass::~ProtoOAAssetClass() {
  // @@protoc_insertion_point(destructor:ProtoOAAssetClass)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProtoOAAssetClass::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProtoOAAssetClass::ArenaDtor(void* object) {
  ProtoOAAssetClass* _this = reinterpret_cast< ProtoOAAssetClass* >(object);
  (void)_this;
}
void ProtoOAAssetClass::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtoOAAssetClass::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOAAssetClass& ProtoOAAssetClass::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOAAssetClass_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOAAssetClass::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOAAssetClass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoOAAssetClass::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProtoOAAssetClass.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOAAssetClass::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOAAssetClass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOAAssetClass.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOAAssetClass)
  return target;
}

size_t ProtoOAAssetClass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOAAssetClass)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int64 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOAAssetClass::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOAAssetClass)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOAAssetClass* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOAAssetClass>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOAAssetClass)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOAAssetClass)
    MergeFrom(*source);
  }
}

void ProtoOAAssetClass::MergeFrom(const ProtoOAAssetClass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOAAssetClass)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOAAssetClass::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOAAssetClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOAAssetClass::CopyFrom(const ProtoOAAssetClass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOAAssetClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOAAssetClass::IsInitialized() const {
  return true;
}

void ProtoOAAssetClass::InternalSwap(ProtoOAAssetClass* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOAAssetClass::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProtoOADepthQuote::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoOADepthQuote>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ask(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ProtoOADepthQuote::ProtoOADepthQuote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoOADepthQuote)
}
ProtoOADepthQuote::ProtoOADepthQuote(const ProtoOADepthQuote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ask_) -
    reinterpret_cast<char*>(&id_)) + sizeof(ask_));
  // @@protoc_insertion_point(copy_constructor:ProtoOADepthQuote)
}

void ProtoOADepthQuote::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ask_) -
      reinterpret_cast<char*>(&id_)) + sizeof(ask_));
}

ProtoOADepthQuote::~ProtoOADepthQuote() {
  // @@protoc_insertion_point(destructor:ProtoOADepthQuote)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProtoOADepthQuote::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProtoOADepthQuote::ArenaDtor(void* object) {
  ProtoOADepthQuote* _this = reinterpret_cast< ProtoOADepthQuote* >(object);
  (void)_this;
}
void ProtoOADepthQuote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtoOADepthQuote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOADepthQuote& ProtoOADepthQuote::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOADepthQuote_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOADepthQuote::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOADepthQuote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ask_) -
        reinterpret_cast<char*>(&id_)) + sizeof(ask_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoOADepthQuote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 bid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_bid(&has_bits);
          bid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 ask = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ask(&has_bits);
          ask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOADepthQuote::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOADepthQuote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // required uint64 size = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_size(), target);
  }

  // optional uint64 bid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_bid(), target);
  }

  // optional uint64 ask = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_ask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOADepthQuote)
  return target;
}

size_t ProtoOADepthQuote::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoOADepthQuote)
  size_t total_size = 0;

  if (_internal_has_id()) {
    // required uint64 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  if (_internal_has_size()) {
    // required uint64 size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());
  }

  return total_size;
}
size_t ProtoOADepthQuote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOADepthQuote)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());

    // required uint64 size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional uint64 bid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_bid());
    }

    // optional uint64 ask = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_ask());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOADepthQuote::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOADepthQuote)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOADepthQuote* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOADepthQuote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOADepthQuote)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOADepthQuote)
    MergeFrom(*source);
  }
}

void ProtoOADepthQuote::MergeFrom(const ProtoOADepthQuote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOADepthQuote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000004u) {
      bid_ = from.bid_;
    }
    if (cached_has_bits & 0x00000008u) {
      ask_ = from.ask_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOADepthQuote::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOADepthQuote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOADepthQuote::CopyFrom(const ProtoOADepthQuote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOADepthQuote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOADepthQuote::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ProtoOADepthQuote::InternalSwap(ProtoOADepthQuote* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtoOADepthQuote, ask_)
      + sizeof(ProtoOADepthQuote::ask_)
      - PROTOBUF_FIELD_OFFSET(ProtoOADepthQuote, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOADepthQuote::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProtoOAMarginCall::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoOAMarginCall>()._has_bits_);
  static void set_has_margincalltype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_marginlevelthreshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_utclastupdatetimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

ProtoOAMarginCall::ProtoOAMarginCall(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoOAMarginCall)
}
ProtoOAMarginCall::ProtoOAMarginCall(const ProtoOAMarginCall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&marginlevelthreshold_, &from.marginlevelthreshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&margincalltype_) -
    reinterpret_cast<char*>(&marginlevelthreshold_)) + sizeof(margincalltype_));
  // @@protoc_insertion_point(copy_constructor:ProtoOAMarginCall)
}

void ProtoOAMarginCall::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&marginlevelthreshold_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&utclastupdatetimestamp_) -
      reinterpret_cast<char*>(&marginlevelthreshold_)) + sizeof(utclastupdatetimestamp_));
  margincalltype_ = 61;
}

ProtoOAMarginCall::~ProtoOAMarginCall() {
  // @@protoc_insertion_point(destructor:ProtoOAMarginCall)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProtoOAMarginCall::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProtoOAMarginCall::ArenaDtor(void* object) {
  ProtoOAMarginCall* _this = reinterpret_cast< ProtoOAMarginCall* >(object);
  (void)_this;
}
void ProtoOAMarginCall::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtoOAMarginCall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOAMarginCall& ProtoOAMarginCall::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOAMarginCall_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOAMarginCall::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOAMarginCall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&marginlevelthreshold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&utclastupdatetimestamp_) -
        reinterpret_cast<char*>(&marginlevelthreshold_)) + sizeof(utclastupdatetimestamp_));
    margincalltype_ = 61;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoOAMarginCall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .ProtoOANotificationType marginCallType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ProtoOANotificationType_IsValid(val))) {
            _internal_set_margincalltype(static_cast<::ProtoOANotificationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required double marginLevelThreshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_marginlevelthreshold(&has_bits);
          marginlevelthreshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int64 utcLastUpdateTimestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_utclastupdatetimestamp(&has_bits);
          utclastupdatetimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOAMarginCall::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOAMarginCall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ProtoOANotificationType marginCallType = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_margincalltype(), target);
  }

  // required double marginLevelThreshold = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_marginlevelthreshold(), target);
  }

  // optional int64 utcLastUpdateTimestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_utclastupdatetimestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOAMarginCall)
  return target;
}

size_t ProtoOAMarginCall::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoOAMarginCall)
  size_t total_size = 0;

  if (_internal_has_marginlevelthreshold()) {
    // required double marginLevelThreshold = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_margincalltype()) {
    // required .ProtoOANotificationType marginCallType = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_margincalltype());
  }

  return total_size;
}
size_t ProtoOAMarginCall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOAMarginCall)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required double marginLevelThreshold = 2;
    total_size += 1 + 8;

    // required .ProtoOANotificationType marginCallType = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_margincalltype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 utcLastUpdateTimestamp = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_utclastupdatetimestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOAMarginCall::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOAMarginCall)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOAMarginCall* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOAMarginCall>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOAMarginCall)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOAMarginCall)
    MergeFrom(*source);
  }
}

void ProtoOAMarginCall::MergeFrom(const ProtoOAMarginCall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOAMarginCall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      marginlevelthreshold_ = from.marginlevelthreshold_;
    }
    if (cached_has_bits & 0x00000002u) {
      utclastupdatetimestamp_ = from.utclastupdatetimestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      margincalltype_ = from.margincalltype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOAMarginCall::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOAMarginCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOAMarginCall::CopyFrom(const ProtoOAMarginCall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOAMarginCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOAMarginCall::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ProtoOAMarginCall::InternalSwap(ProtoOAMarginCall* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtoOAMarginCall, utclastupdatetimestamp_)
      + sizeof(ProtoOAMarginCall::utclastupdatetimestamp_)
      - PROTOBUF_FIELD_OFFSET(ProtoOAMarginCall, marginlevelthreshold_)>(
          reinterpret_cast<char*>(&marginlevelthreshold_),
          reinterpret_cast<char*>(&other->marginlevelthreshold_));
  swap(margincalltype_, other->margincalltype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOAMarginCall::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProtoOAHoliday::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoOAHoliday>()._has_bits_);
  static void set_has_holidayid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scheduletimezone(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_holidaydate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_isrecurring(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_startsecond(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_endsecond(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003d) ^ 0x0000003d) != 0;
  }
};

ProtoOAHoliday::ProtoOAHoliday(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoOAHoliday)
}
ProtoOAHoliday::ProtoOAHoliday(const ProtoOAHoliday& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  scheduletimezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_scheduletimezone()) {
    scheduletimezone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scheduletimezone(), 
      GetArena());
  }
  ::memcpy(&holidayid_, &from.holidayid_,
    static_cast<size_t>(reinterpret_cast<char*>(&endsecond_) -
    reinterpret_cast<char*>(&holidayid_)) + sizeof(endsecond_));
  // @@protoc_insertion_point(copy_constructor:ProtoOAHoliday)
}

void ProtoOAHoliday::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtoOAHoliday_OpenApiModelMessages_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scheduletimezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&holidayid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&endsecond_) -
      reinterpret_cast<char*>(&holidayid_)) + sizeof(endsecond_));
}

ProtoOAHoliday::~ProtoOAHoliday() {
  // @@protoc_insertion_point(destructor:ProtoOAHoliday)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProtoOAHoliday::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scheduletimezone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProtoOAHoliday::ArenaDtor(void* object) {
  ProtoOAHoliday* _this = reinterpret_cast< ProtoOAHoliday* >(object);
  (void)_this;
}
void ProtoOAHoliday::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtoOAHoliday::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtoOAHoliday& ProtoOAHoliday::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtoOAHoliday_OpenApiModelMessages_2eproto.base);
  return *internal_default_instance();
}


void ProtoOAHoliday::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoOAHoliday)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      scheduletimezone_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&holidayid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&endsecond_) -
        reinterpret_cast<char*>(&holidayid_)) + sizeof(endsecond_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoOAHoliday::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 holidayId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_holidayid(&has_bits);
          holidayid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProtoOAHoliday.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProtoOAHoliday.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string scheduleTimeZone = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_scheduletimezone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProtoOAHoliday.scheduleTimeZone");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 holidayDate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_holidaydate(&has_bits);
          holidaydate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool isRecurring = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_isrecurring(&has_bits);
          isrecurring_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 startSecond = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_startsecond(&has_bits);
          startsecond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 endSecond = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_endsecond(&has_bits);
          endsecond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtoOAHoliday::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOAHoliday)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 holidayId = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_holidayid(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOAHoliday.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string description = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOAHoliday.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // required string scheduleTimeZone = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_scheduletimezone().data(), static_cast<int>(this->_internal_scheduletimezone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoOAHoliday.scheduleTimeZone");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_scheduletimezone(), target);
  }

  // required int64 holidayDate = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_holidaydate(), target);
  }

  // required bool isRecurring = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_isrecurring(), target);
  }

  // optional int32 startSecond = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_startsecond(), target);
  }

  // optional int32 endSecond = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_endsecond(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOAHoliday)
  return target;
}

size_t ProtoOAHoliday::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoOAHoliday)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_scheduletimezone()) {
    // required string scheduleTimeZone = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scheduletimezone());
  }

  if (_internal_has_holidayid()) {
    // required int64 holidayId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_holidayid());
  }

  if (_internal_has_holidaydate()) {
    // required int64 holidayDate = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_holidaydate());
  }

  if (_internal_has_isrecurring()) {
    // required bool isRecurring = 6;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ProtoOAHoliday::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoOAHoliday)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003d) ^ 0x0000003d) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string scheduleTimeZone = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scheduletimezone());

    // required int64 holidayId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_holidayid());

    // required int64 holidayDate = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_holidaydate());

    // required bool isRecurring = 6;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string description = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  if (cached_has_bits & 0x000000c0u) {
    // optional int32 startSecond = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_startsecond());
    }

    // optional int32 endSecond = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_endsecond());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoOAHoliday::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoOAHoliday)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoOAHoliday* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtoOAHoliday>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoOAHoliday)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoOAHoliday)
    MergeFrom(*source);
  }
}

void ProtoOAHoliday::MergeFrom(const ProtoOAHoliday& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoOAHoliday)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_scheduletimezone(from._internal_scheduletimezone());
    }
    if (cached_has_bits & 0x00000008u) {
      holidayid_ = from.holidayid_;
    }
    if (cached_has_bits & 0x00000010u) {
      holidaydate_ = from.holidaydate_;
    }
    if (cached_has_bits & 0x00000020u) {
      isrecurring_ = from.isrecurring_;
    }
    if (cached_has_bits & 0x00000040u) {
      startsecond_ = from.startsecond_;
    }
    if (cached_has_bits & 0x00000080u) {
      endsecond_ = from.endsecond_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoOAHoliday::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoOAHoliday)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoOAHoliday::CopyFrom(const ProtoOAHoliday& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoOAHoliday)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoOAHoliday::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ProtoOAHoliday::InternalSwap(ProtoOAHoliday* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scheduletimezone_.Swap(&other->scheduletimezone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtoOAHoliday, endsecond_)
      + sizeof(ProtoOAHoliday::endsecond_)
      - PROTOBUF_FIELD_OFFSET(ProtoOAHoliday, holidayid_)>(
          reinterpret_cast<char*>(&holidayid_),
          reinterpret_cast<char*>(&other->holidayid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoOAHoliday::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ProtoOAAsset* Arena::CreateMaybeMessage< ::ProtoOAAsset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoOAAsset >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOASymbol* Arena::CreateMaybeMessage< ::ProtoOASymbol >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoOASymbol >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOALightSymbol* Arena::CreateMaybeMessage< ::ProtoOALightSymbol >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoOALightSymbol >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOAArchivedSymbol* Arena::CreateMaybeMessage< ::ProtoOAArchivedSymbol >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoOAArchivedSymbol >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOASymbolCategory* Arena::CreateMaybeMessage< ::ProtoOASymbolCategory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoOASymbolCategory >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOAInterval* Arena::CreateMaybeMessage< ::ProtoOAInterval >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoOAInterval >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOATrader* Arena::CreateMaybeMessage< ::ProtoOATrader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoOATrader >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOAPosition* Arena::CreateMaybeMessage< ::ProtoOAPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoOAPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOATradeData* Arena::CreateMaybeMessage< ::ProtoOATradeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoOATradeData >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOAOrder* Arena::CreateMaybeMessage< ::ProtoOAOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoOAOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOABonusDepositWithdraw* Arena::CreateMaybeMessage< ::ProtoOABonusDepositWithdraw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoOABonusDepositWithdraw >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOADepositWithdraw* Arena::CreateMaybeMessage< ::ProtoOADepositWithdraw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoOADepositWithdraw >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOADeal* Arena::CreateMaybeMessage< ::ProtoOADeal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoOADeal >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOAClosePositionDetail* Arena::CreateMaybeMessage< ::ProtoOAClosePositionDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoOAClosePositionDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOATrendbar* Arena::CreateMaybeMessage< ::ProtoOATrendbar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoOATrendbar >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOAExpectedMargin* Arena::CreateMaybeMessage< ::ProtoOAExpectedMargin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoOAExpectedMargin >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOATickData* Arena::CreateMaybeMessage< ::ProtoOATickData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoOATickData >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOACtidProfile* Arena::CreateMaybeMessage< ::ProtoOACtidProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoOACtidProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOACtidTraderAccount* Arena::CreateMaybeMessage< ::ProtoOACtidTraderAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoOACtidTraderAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOAAssetClass* Arena::CreateMaybeMessage< ::ProtoOAAssetClass >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoOAAssetClass >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOADepthQuote* Arena::CreateMaybeMessage< ::ProtoOADepthQuote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoOADepthQuote >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOAMarginCall* Arena::CreateMaybeMessage< ::ProtoOAMarginCall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoOAMarginCall >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoOAHoliday* Arena::CreateMaybeMessage< ::ProtoOAHoliday >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoOAHoliday >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
